
Fascin8_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800da70  0800da70  0001da70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dba8  0800dba8  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800dba8  0800dba8  0001dba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbb0  0800dbb0  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbb0  0800dbb0  0001dbb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbb4  0800dbb4  0001dbb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800dbb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001230  20000200  0800ddb8  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00009000  20001430  0800ddb8  00021430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b99  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004cd4  00000000  00000000  00043dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a38  00000000  00000000  00048aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001820  00000000  00000000  0004a4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027d78  00000000  00000000  0004bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019ef7  00000000  00000000  00073a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d63ee  00000000  00000000  0008d967  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00163d55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073a8  00000000  00000000  00163dd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da58 	.word	0x0800da58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800da58 	.word	0x0800da58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b37      	ldr	r3, [pc, #220]	; (8000660 <MX_ADC1_Init+0xf0>)
 8000584:	4a37      	ldr	r2, [pc, #220]	; (8000664 <MX_ADC1_Init+0xf4>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000588:	4b35      	ldr	r3, [pc, #212]	; (8000660 <MX_ADC1_Init+0xf0>)
 800058a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b33      	ldr	r3, [pc, #204]	; (8000660 <MX_ADC1_Init+0xf0>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000596:	4b32      	ldr	r3, [pc, #200]	; (8000660 <MX_ADC1_Init+0xf0>)
 8000598:	2201      	movs	r2, #1
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059c:	4b30      	ldr	r3, [pc, #192]	; (8000660 <MX_ADC1_Init+0xf0>)
 800059e:	2201      	movs	r2, #1
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b2f      	ldr	r3, [pc, #188]	; (8000660 <MX_ADC1_Init+0xf0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b2d      	ldr	r3, [pc, #180]	; (8000660 <MX_ADC1_Init+0xf0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <MX_ADC1_Init+0xf0>)
 80005b2:	4a2d      	ldr	r2, [pc, #180]	; (8000668 <MX_ADC1_Init+0xf8>)
 80005b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <MX_ADC1_Init+0xf0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <MX_ADC1_Init+0xf0>)
 80005be:	2204      	movs	r2, #4
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005c2:	4b27      	ldr	r3, [pc, #156]	; (8000660 <MX_ADC1_Init+0xf0>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005ca:	4b25      	ldr	r3, [pc, #148]	; (8000660 <MX_ADC1_Init+0xf0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	4823      	ldr	r0, [pc, #140]	; (8000660 <MX_ADC1_Init+0xf0>)
 80005d2:	f002 fd5d 	bl	8003090 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f002 f8f0 	bl	80027c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	481b      	ldr	r0, [pc, #108]	; (8000660 <MX_ADC1_Init+0xf0>)
 80005f2:	f002 fd91 	bl	8003118 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f002 f8e0 	bl	80027c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000600:	2303      	movs	r3, #3
 8000602:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000604:	2302      	movs	r3, #2
 8000606:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	4619      	mov	r1, r3
 800060c:	4814      	ldr	r0, [pc, #80]	; (8000660 <MX_ADC1_Init+0xf0>)
 800060e:	f002 fd83 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000618:	f002 f8d2 	bl	80027c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800061c:	230b      	movs	r3, #11
 800061e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000620:	2303      	movs	r3, #3
 8000622:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_ADC1_Init+0xf0>)
 800062a:	f002 fd75 	bl	8003118 <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000634:	f002 f8c4 	bl	80027c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000638:	2310      	movs	r3, #16
 800063a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000640:	2303      	movs	r3, #3
 8000642:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_ADC1_Init+0xf0>)
 800064a:	f002 fd65 	bl	8003118 <HAL_ADC_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000654:	f002 f8b4 	bl	80027c0 <Error_Handler>
  }

}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000238 	.word	0x20000238
 8000664:	40012000 	.word	0x40012000
 8000668:	0f000001 	.word	0x0f000001

0800066c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a3c      	ldr	r2, [pc, #240]	; (800077c <HAL_ADC_MspInit+0x110>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d171      	bne.n	8000772 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	4b3b      	ldr	r3, [pc, #236]	; (8000780 <HAL_ADC_MspInit+0x114>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000696:	4a3a      	ldr	r2, [pc, #232]	; (8000780 <HAL_ADC_MspInit+0x114>)
 8000698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800069c:	6453      	str	r3, [r2, #68]	; 0x44
 800069e:	4b38      	ldr	r3, [pc, #224]	; (8000780 <HAL_ADC_MspInit+0x114>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	4b34      	ldr	r3, [pc, #208]	; (8000780 <HAL_ADC_MspInit+0x114>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a33      	ldr	r2, [pc, #204]	; (8000780 <HAL_ADC_MspInit+0x114>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b31      	ldr	r3, [pc, #196]	; (8000780 <HAL_ADC_MspInit+0x114>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <HAL_ADC_MspInit+0x114>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a2c      	ldr	r2, [pc, #176]	; (8000780 <HAL_ADC_MspInit+0x114>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <HAL_ADC_MspInit+0x114>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC_33digital_Pin;
 80006e2:	2302      	movs	r3, #2
 80006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e6:	2303      	movs	r3, #3
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_33digital_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4823      	ldr	r0, [pc, #140]	; (8000784 <HAL_ADC_MspInit+0x118>)
 80006f6:	f003 fd6b 	bl	80041d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_25analog_Pin|ADC_50power_Pin;
 80006fa:	230c      	movs	r3, #12
 80006fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fe:	2303      	movs	r3, #3
 8000700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	481e      	ldr	r0, [pc, #120]	; (8000788 <HAL_ADC_MspInit+0x11c>)
 800070e:	f003 fd5f 	bl	80041d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <HAL_ADC_MspInit+0x120>)
 8000714:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <HAL_ADC_MspInit+0x124>)
 8000716:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <HAL_ADC_MspInit+0x120>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <HAL_ADC_MspInit+0x120>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <HAL_ADC_MspInit+0x120>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_ADC_MspInit+0x120>)
 800072c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000730:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <HAL_ADC_MspInit+0x120>)
 8000734:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000738:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_ADC_MspInit+0x120>)
 800073c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000740:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_ADC_MspInit+0x120>)
 8000744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000748:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <HAL_ADC_MspInit+0x120>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <HAL_ADC_MspInit+0x120>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <HAL_ADC_MspInit+0x120>)
 8000758:	f003 f826 	bl	80037a8 <HAL_DMA_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000762:	f002 f82d 	bl	80027c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a08      	ldr	r2, [pc, #32]	; (800078c <HAL_ADC_MspInit+0x120>)
 800076a:	639a      	str	r2, [r3, #56]	; 0x38
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <HAL_ADC_MspInit+0x120>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40012000 	.word	0x40012000
 8000780:	40023800 	.word	0x40023800
 8000784:	40020800 	.word	0x40020800
 8000788:	40020000 	.word	0x40020000
 800078c:	20000280 	.word	0x20000280
 8000790:	40026410 	.word	0x40026410

08000794 <ADS_Init>:
        * Reset ADS once
        * PWDN Pin high
        * SPI turn on
*/
void ADS_Init(int main_ic)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(START,GPIO_PIN_RESET);  //ADS not Start any conversation
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a2:	485a      	ldr	r0, [pc, #360]	; (800090c <ADS_Init+0x178>)
 80007a4:	f003 fec6 	bl	8004534 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS0,GPIO_PIN_SET);  //ADS SPI turn off
 80007a8:	2201      	movs	r2, #1
 80007aa:	2108      	movs	r1, #8
 80007ac:	4858      	ldr	r0, [pc, #352]	; (8000910 <ADS_Init+0x17c>)
 80007ae:	f003 fec1 	bl	8004534 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS1,GPIO_PIN_SET);  //ADS SPI turn off
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b8:	4854      	ldr	r0, [pc, #336]	; (800090c <ADS_Init+0x178>)
 80007ba:	f003 febb 	bl	8004534 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2,GPIO_PIN_SET);  //ADS SPI turn off
 80007be:	2201      	movs	r2, #1
 80007c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c4:	4851      	ldr	r0, [pc, #324]	; (800090c <ADS_Init+0x178>)
 80007c6:	f003 feb5 	bl	8004534 <HAL_GPIO_WritePin>


	if (main_ic == 0)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d10f      	bne.n	80007f0 <ADS_Init+0x5c>
	{
		HAL_GPIO_WritePin(CLKSEL0,GPIO_PIN_SET);    //Internal clock
 80007d0:	2201      	movs	r2, #1
 80007d2:	2104      	movs	r1, #4
 80007d4:	484e      	ldr	r0, [pc, #312]	; (8000910 <ADS_Init+0x17c>)
 80007d6:	f003 fead 	bl	8004534 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLKSEL1,GPIO_PIN_RESET);   //External clock
 80007da:	2200      	movs	r2, #0
 80007dc:	2101      	movs	r1, #1
 80007de:	484d      	ldr	r0, [pc, #308]	; (8000914 <ADS_Init+0x180>)
 80007e0:	f003 fea8 	bl	8004534 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLKSEL2,GPIO_PIN_RESET);    //External clock
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ea:	4848      	ldr	r0, [pc, #288]	; (800090c <ADS_Init+0x178>)
 80007ec:	f003 fea2 	bl	8004534 <HAL_GPIO_WritePin>
	}
	if (main_ic == 1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d10f      	bne.n	8000816 <ADS_Init+0x82>
	{
		HAL_GPIO_WritePin(CLKSEL0,GPIO_PIN_RESET);    //External clock
 80007f6:	2200      	movs	r2, #0
 80007f8:	2104      	movs	r1, #4
 80007fa:	4845      	ldr	r0, [pc, #276]	; (8000910 <ADS_Init+0x17c>)
 80007fc:	f003 fe9a 	bl	8004534 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLKSEL1,GPIO_PIN_SET);      //Internal clock
 8000800:	2201      	movs	r2, #1
 8000802:	2101      	movs	r1, #1
 8000804:	4843      	ldr	r0, [pc, #268]	; (8000914 <ADS_Init+0x180>)
 8000806:	f003 fe95 	bl	8004534 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLKSEL2,GPIO_PIN_RESET);    //External clock
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000810:	483e      	ldr	r0, [pc, #248]	; (800090c <ADS_Init+0x178>)
 8000812:	f003 fe8f 	bl	8004534 <HAL_GPIO_WritePin>
	}
	if (main_ic == 2)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d10f      	bne.n	800083c <ADS_Init+0xa8>
	{
		HAL_GPIO_WritePin(CLKSEL0,GPIO_PIN_RESET);    //External clock
 800081c:	2200      	movs	r2, #0
 800081e:	2104      	movs	r1, #4
 8000820:	483b      	ldr	r0, [pc, #236]	; (8000910 <ADS_Init+0x17c>)
 8000822:	f003 fe87 	bl	8004534 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLKSEL1,GPIO_PIN_RESET);      //External clock
 8000826:	2200      	movs	r2, #0
 8000828:	2101      	movs	r1, #1
 800082a:	483a      	ldr	r0, [pc, #232]	; (8000914 <ADS_Init+0x180>)
 800082c:	f003 fe82 	bl	8004534 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLKSEL2,GPIO_PIN_SET);    //Internal clock
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000836:	4835      	ldr	r0, [pc, #212]	; (800090c <ADS_Init+0x178>)
 8000838:	f003 fe7c 	bl	8004534 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(CLKSEL0,GPIO_PIN_RESET);    //External clock
//	HAL_GPIO_WritePin(CLKSEL1,GPIO_PIN_RESET);      //External clock
//	HAL_GPIO_WritePin(CLKSEL2,GPIO_PIN_RESET);    //External clock
//	HAL_Delay(1000);

	ADS_Write_Reg(0x01,0xB6, main_ic);  //defult = 0x96      sampling Rate = 250, clk output to two other ADS
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	21b6      	movs	r1, #182	; 0xb6
 8000840:	2001      	movs	r0, #1
 8000842:	f000 f869 	bl	8000918 <ADS_Write_Reg>





	HAL_Delay(11*CSdelay);
 8000846:	200b      	movs	r0, #11
 8000848:	f002 fc00 	bl	800304c <HAL_Delay>
	HAL_GPIO_WritePin(PWDN,GPIO_PIN_SET);    //To exit power-down mode, take the PWDN pin high
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000852:	482e      	ldr	r0, [pc, #184]	; (800090c <ADS_Init+0x178>)
 8000854:	f003 fe6e 	bl	8004534 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RSTN,GPIO_PIN_SET);    //not reset ADS
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085e:	482b      	ldr	r0, [pc, #172]	; (800090c <ADS_Init+0x178>)
 8000860:	f003 fe68 	bl	8004534 <HAL_GPIO_WritePin>

	HAL_Delay(200);
 8000864:	20c8      	movs	r0, #200	; 0xc8
 8000866:	f002 fbf1 	bl	800304c <HAL_Delay>

	HAL_GPIO_WritePin(RSTN,GPIO_PIN_RESET);   //reset ADS
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000870:	4826      	ldr	r0, [pc, #152]	; (800090c <ADS_Init+0x178>)
 8000872:	f003 fe5f 	bl	8004534 <HAL_GPIO_WritePin>
	HAL_Delay(11*CSdelay);
 8000876:	200b      	movs	r0, #11
 8000878:	f002 fbe8 	bl	800304c <HAL_Delay>
	HAL_GPIO_WritePin(RSTN,GPIO_PIN_SET);    //not reset ADS
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000882:	4822      	ldr	r0, [pc, #136]	; (800090c <ADS_Init+0x178>)
 8000884:	f003 fe56 	bl	8004534 <HAL_GPIO_WritePin>
	HAL_Delay(11*CSdelay);
 8000888:	200b      	movs	r0, #11
 800088a:	f002 fbdf 	bl	800304c <HAL_Delay>


	ADS_Stop_data_cont(1);     //Device Wakes Up in RDATAC Mode, so Send SDATAC Command so Registers can be Written
 800088e:	2001      	movs	r0, #1
 8000890:	f000 f9c8 	bl	8000c24 <ADS_Stop_data_cont>
	ADS_Write_Reg(0x01,0xF6, main_ic); //0b1111 0110  //defult = 0x96      sampling Rate = 250, clk output to two other ADS
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	21f6      	movs	r1, #246	; 0xf6
 8000898:	2001      	movs	r0, #1
 800089a:	f000 f83d 	bl	8000918 <ADS_Write_Reg>

	HAL_Delay(100);
 800089e:	2064      	movs	r0, #100	; 0x64
 80008a0:	f002 fbd4 	bl	800304c <HAL_Delay>

	ADS_Reset(0);
 80008a4:	2000      	movs	r0, #0
 80008a6:	f000 f8f9 	bl	8000a9c <ADS_Reset>
	ADS_Reset(2);
 80008aa:	2002      	movs	r0, #2
 80008ac:	f000 f8f6 	bl	8000a9c <ADS_Reset>

	HAL_Delay(2*CSdelay);
 80008b0:	2002      	movs	r0, #2
 80008b2:	f002 fbcb 	bl	800304c <HAL_Delay>

	ADS_Stop_data_cont(0);     //Device Wakes Up in RDATAC Mode, so Send SDATAC Command so Registers can be Written
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 f9b4 	bl	8000c24 <ADS_Stop_data_cont>
	//ADS_Stop_data_cont(1);     //Device Wakes Up in RDATAC Mode, so Send SDATAC Command so Registers can be Written
	ADS_Stop_data_cont(2);     //Device Wakes Up in RDATAC Mode, so Send SDATAC Command so Registers can be Written
 80008bc:	2002      	movs	r0, #2
 80008be:	f000 f9b1 	bl	8000c24 <ADS_Stop_data_cont>
		HAL_Delay(100);
 80008c2:	2064      	movs	r0, #100	; 0x64
 80008c4:	f002 fbc2 	bl	800304c <HAL_Delay>
	//ADS_Write_Reg(0x01,0xF6, main_ic); //0b1111 0110  //defult = 0x96      sampling Rate = 250, clk output to two other ADS

	ADS_Internal_Ref_Active(0, 0xEC);  //Enable internal reference buffer, no BIAS measurement, BIASREF signal fed internally, Power on BIAS buffer
 80008c8:	21ec      	movs	r1, #236	; 0xec
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 fa37 	bl	8000d3e <ADS_Internal_Ref_Active>
	ADS_Internal_Ref_Active(1, 0x7C);  //Enable internal reference buffer, no BIAS measurement, BIASREF signal fed internally, BIAS buffer is powered down
 80008d0:	217c      	movs	r1, #124	; 0x7c
 80008d2:	2001      	movs	r0, #1
 80008d4:	f000 fa33 	bl	8000d3e <ADS_Internal_Ref_Active>
	ADS_Internal_Ref_Active(2, 0x7C);  //Enable internal reference buffer, no BIAS measurement, BIASREF signal fed internally, BIAS buffer is powered down
 80008d8:	217c      	movs	r1, #124	; 0x7c
 80008da:	2002      	movs	r0, #2
 80008dc:	f000 fa2f 	bl	8000d3e <ADS_Internal_Ref_Active>

	ADS_Write_Reg(0x14,0xF0, 0);  //ALL_CHANNELS gpio output and 1
 80008e0:	2200      	movs	r2, #0
 80008e2:	21f0      	movs	r1, #240	; 0xf0
 80008e4:	2014      	movs	r0, #20
 80008e6:	f000 f817 	bl	8000918 <ADS_Write_Reg>
	ADS_Write_Reg(0x14,0xF0, 1);  //ALL_CHANNELS gpio output and 1
 80008ea:	2201      	movs	r2, #1
 80008ec:	21f0      	movs	r1, #240	; 0xf0
 80008ee:	2014      	movs	r0, #20
 80008f0:	f000 f812 	bl	8000918 <ADS_Write_Reg>
	ADS_Write_Reg(0x14,0xF0, 2);  //ALL_CHANNELS gpio output and 1
 80008f4:	2202      	movs	r2, #2
 80008f6:	21f0      	movs	r1, #240	; 0xf0
 80008f8:	2014      	movs	r0, #20
 80008fa:	f000 f80d 	bl	8000918 <ADS_Write_Reg>



	HAL_Delay(CSdelay);
 80008fe:	2001      	movs	r0, #1
 8000900:	f002 fba4 	bl	800304c <HAL_Delay>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000
 8000910:	40020800 	.word	0x40020800
 8000914:	40020000 	.word	0x40020000

08000918 <ADS_Write_Reg>:
				* Reg = Register Number
				* val = Register Value
				* i   = ADS Number to write
*/
void ADS_Write_Reg(uint8_t Reg, uint8_t val, int i)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	603a      	str	r2, [r7, #0]
 8000922:	71fb      	strb	r3, [r7, #7]
 8000924:	460b      	mov	r3, r1
 8000926:	71bb      	strb	r3, [r7, #6]
	uint8_t trans[3];
	if (i == 0) HAL_GPIO_WritePin(CS0,GPIO_PIN_RESET);  //ADS SPI turn on
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d104      	bne.n	8000938 <ADS_Write_Reg+0x20>
 800092e:	2200      	movs	r2, #0
 8000930:	2108      	movs	r1, #8
 8000932:	4826      	ldr	r0, [pc, #152]	; (80009cc <ADS_Write_Reg+0xb4>)
 8000934:	f003 fdfe 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 1) HAL_GPIO_WritePin(CS1,GPIO_PIN_RESET);  //ADS SPI turn on
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d105      	bne.n	800094a <ADS_Write_Reg+0x32>
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000944:	4822      	ldr	r0, [pc, #136]	; (80009d0 <ADS_Write_Reg+0xb8>)
 8000946:	f003 fdf5 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 2) HAL_GPIO_WritePin(CS2,GPIO_PIN_RESET);  //ADS SPI turn on
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	2b02      	cmp	r3, #2
 800094e:	d105      	bne.n	800095c <ADS_Write_Reg+0x44>
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000956:	481e      	ldr	r0, [pc, #120]	; (80009d0 <ADS_Write_Reg+0xb8>)
 8000958:	f003 fdec 	bl	8004534 <HAL_GPIO_WritePin>

	 HAL_Delay(2*CSdelay);                     //wait for ads spi to turn on
 800095c:	2002      	movs	r0, #2
 800095e:	f002 fb75 	bl	800304c <HAL_Delay>
		trans[0] = Reg + 0x40;                 //regiter address + write command
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	3340      	adds	r3, #64	; 0x40
 8000966:	b2db      	uxtb	r3, r3
 8000968:	733b      	strb	r3, [r7, #12]
		trans[1] = 0x00;                       //number of registger -1
 800096a:	2300      	movs	r3, #0
 800096c:	737b      	strb	r3, [r7, #13]
		trans[2] = val;                        //register value
 800096e:	79bb      	ldrb	r3, [r7, #6]
 8000970:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi1,trans,3,1000);
 8000972:	f107 010c 	add.w	r1, r7, #12
 8000976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097a:	2203      	movs	r2, #3
 800097c:	4815      	ldr	r0, [pc, #84]	; (80009d4 <ADS_Write_Reg+0xbc>)
 800097e:	f007 fbb1 	bl	80080e4 <HAL_SPI_Transmit>
	HAL_Delay(2*CSdelay);                    //wait for spi to transmit
 8000982:	2002      	movs	r0, #2
 8000984:	f002 fb62 	bl	800304c <HAL_Delay>

	if (i == 0) HAL_GPIO_WritePin(CS0,GPIO_PIN_SET);  //ADS SPI turn off
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d104      	bne.n	8000998 <ADS_Write_Reg+0x80>
 800098e:	2201      	movs	r2, #1
 8000990:	2108      	movs	r1, #8
 8000992:	480e      	ldr	r0, [pc, #56]	; (80009cc <ADS_Write_Reg+0xb4>)
 8000994:	f003 fdce 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 1) HAL_GPIO_WritePin(CS1,GPIO_PIN_SET);  //ADS SPI turn off
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d105      	bne.n	80009aa <ADS_Write_Reg+0x92>
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a4:	480a      	ldr	r0, [pc, #40]	; (80009d0 <ADS_Write_Reg+0xb8>)
 80009a6:	f003 fdc5 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 2) HAL_GPIO_WritePin(CS2,GPIO_PIN_SET);  //ADS SPI turn off
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d105      	bne.n	80009bc <ADS_Write_Reg+0xa4>
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <ADS_Write_Reg+0xb8>)
 80009b8:	f003 fdbc 	bl	8004534 <HAL_GPIO_WritePin>

	HAL_Delay(2*CSdelay);
 80009bc:	2002      	movs	r0, #2
 80009be:	f002 fb45 	bl	800304c <HAL_Delay>
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	2000043c 	.word	0x2000043c

080009d8 <ADS_Read_Reg>:
/* Read value from a Register in ADS                                          */
/*----------------------------------------------------------------------------*/
/**
*/
uint8_t ADS_Read_Reg(uint8_t Reg, int i)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af02      	add	r7, sp, #8
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
	uint8_t trans[3];
	uint8_t recive[3];
	if (i == 0) HAL_GPIO_WritePin(CS0,GPIO_PIN_RESET);  //ADS SPI turn on
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d104      	bne.n	80009f4 <ADS_Read_Reg+0x1c>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2108      	movs	r1, #8
 80009ee:	4828      	ldr	r0, [pc, #160]	; (8000a90 <ADS_Read_Reg+0xb8>)
 80009f0:	f003 fda0 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 1) HAL_GPIO_WritePin(CS1,GPIO_PIN_RESET);  //ADS SPI turn on
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d105      	bne.n	8000a06 <ADS_Read_Reg+0x2e>
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a00:	4824      	ldr	r0, [pc, #144]	; (8000a94 <ADS_Read_Reg+0xbc>)
 8000a02:	f003 fd97 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 2) HAL_GPIO_WritePin(CS2,GPIO_PIN_RESET);  //ADS SPI turn on
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d105      	bne.n	8000a18 <ADS_Read_Reg+0x40>
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a12:	4820      	ldr	r0, [pc, #128]	; (8000a94 <ADS_Read_Reg+0xbc>)
 8000a14:	f003 fd8e 	bl	8004534 <HAL_GPIO_WritePin>
	  HAL_Delay(CSdelay);                     //wait for ads spi to turn on
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f002 fb17 	bl	800304c <HAL_Delay>
		 trans[0] = Reg + 0x20;                 //regiter address + read command
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	3320      	adds	r3, #32
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	733b      	strb	r3, [r7, #12]
		 trans[1] = 0x00;                       //number of registger -1
 8000a26:	2300      	movs	r3, #0
 8000a28:	737b      	strb	r3, [r7, #13]
		 trans[2] = 0x00;                       //dummy
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73bb      	strb	r3, [r7, #14]
		//HAL_SPI_TransmitReceive_IT(&hspi1,trans,recive,3);
		HAL_SPI_TransmitReceive(&hspi1,trans,recive,3, 1000);
 8000a2e:	f107 0208 	add.w	r2, r7, #8
 8000a32:	f107 010c 	add.w	r1, r7, #12
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	4816      	ldr	r0, [pc, #88]	; (8000a98 <ADS_Read_Reg+0xc0>)
 8000a40:	f007 fc84 	bl	800834c <HAL_SPI_TransmitReceive>
		HAL_Delay(CSdelay);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f002 fb01 	bl	800304c <HAL_Delay>
	if (i == 0) HAL_GPIO_WritePin(CS0,GPIO_PIN_SET);  //ADS SPI turn off
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d104      	bne.n	8000a5a <ADS_Read_Reg+0x82>
 8000a50:	2201      	movs	r2, #1
 8000a52:	2108      	movs	r1, #8
 8000a54:	480e      	ldr	r0, [pc, #56]	; (8000a90 <ADS_Read_Reg+0xb8>)
 8000a56:	f003 fd6d 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 1) HAL_GPIO_WritePin(CS1,GPIO_PIN_SET);  //ADS SPI turn off
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d105      	bne.n	8000a6c <ADS_Read_Reg+0x94>
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a66:	480b      	ldr	r0, [pc, #44]	; (8000a94 <ADS_Read_Reg+0xbc>)
 8000a68:	f003 fd64 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 2) HAL_GPIO_WritePin(CS2,GPIO_PIN_SET);  //ADS SPI turn off
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d105      	bne.n	8000a7e <ADS_Read_Reg+0xa6>
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a78:	4806      	ldr	r0, [pc, #24]	; (8000a94 <ADS_Read_Reg+0xbc>)
 8000a7a:	f003 fd5b 	bl	8004534 <HAL_GPIO_WritePin>
	HAL_Delay(CSdelay);
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f002 fae4 	bl	800304c <HAL_Delay>
  return recive[2];
 8000a84:	7abb      	ldrb	r3, [r7, #10]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40021000 	.word	0x40021000
 8000a98:	2000043c 	.word	0x2000043c

08000a9c <ADS_Reset>:
		HAL_SPI_Transmit(&hspi1,&trans,1,1000);
	HAL_Delay(CSdelay);
  HAL_GPIO_WritePin(CSN,GPIO_PIN_SET);  //ADS SPI turn OFF
}
void ADS_Reset(int i)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	uint8_t trans;
	if (i == 0) HAL_GPIO_WritePin(CS0,GPIO_PIN_RESET);  //ADS SPI turn on
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d104      	bne.n	8000ab4 <ADS_Reset+0x18>
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2108      	movs	r1, #8
 8000aae:	4821      	ldr	r0, [pc, #132]	; (8000b34 <ADS_Reset+0x98>)
 8000ab0:	f003 fd40 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 1) HAL_GPIO_WritePin(CS1,GPIO_PIN_RESET);  //ADS SPI turn on
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d105      	bne.n	8000ac6 <ADS_Reset+0x2a>
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac0:	481d      	ldr	r0, [pc, #116]	; (8000b38 <ADS_Reset+0x9c>)
 8000ac2:	f003 fd37 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 2) HAL_GPIO_WritePin(CS2,GPIO_PIN_RESET);  //ADS SPI turn on
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d105      	bne.n	8000ad8 <ADS_Reset+0x3c>
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad2:	4819      	ldr	r0, [pc, #100]	; (8000b38 <ADS_Reset+0x9c>)
 8000ad4:	f003 fd2e 	bl	8004534 <HAL_GPIO_WritePin>
	HAL_Delay(CSdelay);                     //wait for ads spi to turn on
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f002 fab7 	bl	800304c <HAL_Delay>
		trans = 0x06;      //reset
 8000ade:	2306      	movs	r3, #6
 8000ae0:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_Transmit(&hspi1,&trans,1, 1000);
 8000ae2:	f107 010f 	add.w	r1, r7, #15
 8000ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aea:	2201      	movs	r2, #1
 8000aec:	4813      	ldr	r0, [pc, #76]	; (8000b3c <ADS_Reset+0xa0>)
 8000aee:	f007 faf9 	bl	80080e4 <HAL_SPI_Transmit>
	HAL_Delay(CSdelay);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f002 faaa 	bl	800304c <HAL_Delay>
  	if (i == 0) HAL_GPIO_WritePin(CS0,GPIO_PIN_SET);  //ADS SPI turn off
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d104      	bne.n	8000b08 <ADS_Reset+0x6c>
 8000afe:	2201      	movs	r2, #1
 8000b00:	2108      	movs	r1, #8
 8000b02:	480c      	ldr	r0, [pc, #48]	; (8000b34 <ADS_Reset+0x98>)
 8000b04:	f003 fd16 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 1) HAL_GPIO_WritePin(CS1,GPIO_PIN_SET);  //ADS SPI turn off
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d105      	bne.n	8000b1a <ADS_Reset+0x7e>
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <ADS_Reset+0x9c>)
 8000b16:	f003 fd0d 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 2) HAL_GPIO_WritePin(CS2,GPIO_PIN_SET);  //ADS SPI turn off
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d105      	bne.n	8000b2c <ADS_Reset+0x90>
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b26:	4804      	ldr	r0, [pc, #16]	; (8000b38 <ADS_Reset+0x9c>)
 8000b28:	f003 fd04 	bl	8004534 <HAL_GPIO_WritePin>
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	2000043c 	.word	0x2000043c

08000b40 <ADS_Start>:

void ADS_Start(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(START,GPIO_PIN_SET);  // Start a Sync Conversation
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4a:	4804      	ldr	r0, [pc, #16]	; (8000b5c <ADS_Start+0x1c>)
 8000b4c:	f003 fcf2 	bl	8004534 <HAL_GPIO_WritePin>
	HAL_Delay(CSdelay);
 8000b50:	2001      	movs	r0, #1
 8000b52:	f002 fa7b 	bl	800304c <HAL_Delay>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40021000 	.word	0x40021000

08000b60 <ADS_Stop>:

void ADS_Stop(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(START,GPIO_PIN_RESET);  //Stop a Sync Conversation
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6a:	4804      	ldr	r0, [pc, #16]	; (8000b7c <ADS_Stop+0x1c>)
 8000b6c:	f003 fce2 	bl	8004534 <HAL_GPIO_WritePin>
	HAL_Delay(CSdelay);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f002 fa6b 	bl	800304c <HAL_Delay>
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000

08000b80 <ADS_Read_data_cont>:



void ADS_Read_data_cont(int i)
	{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	uint8_t trans;
	if (i == 0) HAL_GPIO_WritePin(CS0,GPIO_PIN_RESET);  //ADS SPI turn on
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d104      	bne.n	8000b98 <ADS_Read_data_cont+0x18>
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2108      	movs	r1, #8
 8000b92:	4821      	ldr	r0, [pc, #132]	; (8000c18 <ADS_Read_data_cont+0x98>)
 8000b94:	f003 fcce 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 1) HAL_GPIO_WritePin(CS1,GPIO_PIN_RESET);  //ADS SPI turn on
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d105      	bne.n	8000baa <ADS_Read_data_cont+0x2a>
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba4:	481d      	ldr	r0, [pc, #116]	; (8000c1c <ADS_Read_data_cont+0x9c>)
 8000ba6:	f003 fcc5 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 2) HAL_GPIO_WritePin(CS2,GPIO_PIN_RESET);  //ADS SPI turn on
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d105      	bne.n	8000bbc <ADS_Read_data_cont+0x3c>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb6:	4819      	ldr	r0, [pc, #100]	; (8000c1c <ADS_Read_data_cont+0x9c>)
 8000bb8:	f003 fcbc 	bl	8004534 <HAL_GPIO_WritePin>
	HAL_Delay(CSdelay);                     //wait for ads spi to turn on
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f002 fa45 	bl	800304c <HAL_Delay>
		trans = 0x10;                         //RDATAC
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_Transmit(&hspi1,&trans,1, 1000);
 8000bc6:	f107 010f 	add.w	r1, r7, #15
 8000bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4813      	ldr	r0, [pc, #76]	; (8000c20 <ADS_Read_data_cont+0xa0>)
 8000bd2:	f007 fa87 	bl	80080e4 <HAL_SPI_Transmit>
	HAL_Delay(CSdelay);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f002 fa38 	bl	800304c <HAL_Delay>
  if (i == 0) HAL_GPIO_WritePin(CS0,GPIO_PIN_SET);  //ADS SPI turn off
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d104      	bne.n	8000bec <ADS_Read_data_cont+0x6c>
 8000be2:	2201      	movs	r2, #1
 8000be4:	2108      	movs	r1, #8
 8000be6:	480c      	ldr	r0, [pc, #48]	; (8000c18 <ADS_Read_data_cont+0x98>)
 8000be8:	f003 fca4 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 1) HAL_GPIO_WritePin(CS1,GPIO_PIN_SET);  //ADS SPI turn off
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d105      	bne.n	8000bfe <ADS_Read_data_cont+0x7e>
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <ADS_Read_data_cont+0x9c>)
 8000bfa:	f003 fc9b 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 2) HAL_GPIO_WritePin(CS2,GPIO_PIN_SET);  //ADS SPI turn off
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d105      	bne.n	8000c10 <ADS_Read_data_cont+0x90>
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0a:	4804      	ldr	r0, [pc, #16]	; (8000c1c <ADS_Read_data_cont+0x9c>)
 8000c0c:	f003 fc92 	bl	8004534 <HAL_GPIO_WritePin>
}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40020800 	.word	0x40020800
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	2000043c 	.word	0x2000043c

08000c24 <ADS_Stop_data_cont>:
	

void ADS_Stop_data_cont(int i)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	uint8_t trans;
	if (i == 0) HAL_GPIO_WritePin(CS0,GPIO_PIN_RESET);  //ADS SPI turn on
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d104      	bne.n	8000c3c <ADS_Stop_data_cont+0x18>
 8000c32:	2200      	movs	r2, #0
 8000c34:	2108      	movs	r1, #8
 8000c36:	4821      	ldr	r0, [pc, #132]	; (8000cbc <ADS_Stop_data_cont+0x98>)
 8000c38:	f003 fc7c 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 1) HAL_GPIO_WritePin(CS1,GPIO_PIN_RESET);  //ADS SPI turn on
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d105      	bne.n	8000c4e <ADS_Stop_data_cont+0x2a>
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c48:	481d      	ldr	r0, [pc, #116]	; (8000cc0 <ADS_Stop_data_cont+0x9c>)
 8000c4a:	f003 fc73 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 2) HAL_GPIO_WritePin(CS2,GPIO_PIN_RESET);  //ADS SPI turn on
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d105      	bne.n	8000c60 <ADS_Stop_data_cont+0x3c>
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5a:	4819      	ldr	r0, [pc, #100]	; (8000cc0 <ADS_Stop_data_cont+0x9c>)
 8000c5c:	f003 fc6a 	bl	8004534 <HAL_GPIO_WritePin>

	HAL_Delay(CSdelay);                     //wait for ads spi to turn on
 8000c60:	2001      	movs	r0, #1
 8000c62:	f002 f9f3 	bl	800304c <HAL_Delay>
		trans = 0x11;                        //SDATAC
 8000c66:	2311      	movs	r3, #17
 8000c68:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_Transmit(&hspi1,&trans,1, 1000);
 8000c6a:	f107 010f 	add.w	r1, r7, #15
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	2201      	movs	r2, #1
 8000c74:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <ADS_Stop_data_cont+0xa0>)
 8000c76:	f007 fa35 	bl	80080e4 <HAL_SPI_Transmit>
	HAL_Delay(CSdelay);
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f002 f9e6 	bl	800304c <HAL_Delay>

 	if (i == 0) HAL_GPIO_WritePin(CS0,GPIO_PIN_SET);  //ADS SPI turn off
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d104      	bne.n	8000c90 <ADS_Stop_data_cont+0x6c>
 8000c86:	2201      	movs	r2, #1
 8000c88:	2108      	movs	r1, #8
 8000c8a:	480c      	ldr	r0, [pc, #48]	; (8000cbc <ADS_Stop_data_cont+0x98>)
 8000c8c:	f003 fc52 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 1) HAL_GPIO_WritePin(CS1,GPIO_PIN_SET);  //ADS SPI turn off
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d105      	bne.n	8000ca2 <ADS_Stop_data_cont+0x7e>
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c9c:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <ADS_Stop_data_cont+0x9c>)
 8000c9e:	f003 fc49 	bl	8004534 <HAL_GPIO_WritePin>
	if (i == 2) HAL_GPIO_WritePin(CS2,GPIO_PIN_SET);  //ADS SPI turn off
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d105      	bne.n	8000cb4 <ADS_Stop_data_cont+0x90>
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cae:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <ADS_Stop_data_cont+0x9c>)
 8000cb0:	f003 fc40 	bl	8004534 <HAL_GPIO_WritePin>

}
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40020800 	.word	0x40020800
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	2000043c 	.word	0x2000043c

08000cc8 <ADS_BIAS_SIGNAL_DERIVATION>:
        * MSB bit = PD_REFBU(not) = 0;
        * 1 : Enable internal reference buffer
        * 0b 1110 0000  = 0xE0;
*/
void ADS_BIAS_SIGNAL_DERIVATION(uint8_t P, uint8_t N, int i)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	603a      	str	r2, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	71bb      	strb	r3, [r7, #6]
	   ADS_Write_Reg(0x0D, P ,i);   //0b11111111 //route all Pch Positive to bias deriv.
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	200d      	movs	r0, #13
 8000ce0:	f7ff fe1a 	bl	8000918 <ADS_Write_Reg>
	   ADS_Write_Reg(0x0E, N ,i);
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	200e      	movs	r0, #14
 8000cec:	f7ff fe14 	bl	8000918 <ADS_Write_Reg>
	   //ADS_Write_Reg(0x0E, N ,i);   //0b11111111 //route all Nch negative to bias deriv.
	   HAL_Delay(CSdelay);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f002 f9ab 	bl	800304c <HAL_Delay>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <ADS_SRB1_Conection>:
				inputs
				0 : Switches open
				1 : Switches closed
*/
void ADS_SRB1_Conection(uint8_t con, int i)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	6039      	str	r1, [r7, #0]
 8000d08:	71fb      	strb	r3, [r7, #7]
	if (con ==1)
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d107      	bne.n	8000d20 <ADS_SRB1_Conection+0x22>
	{
  	 ADS_Write_Reg(0x15, 0x20 ,i);   //SRB1 Switch close //connected
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	2120      	movs	r1, #32
 8000d14:	2015      	movs	r0, #21
 8000d16:	f7ff fdff 	bl	8000918 <ADS_Write_Reg>
	   HAL_Delay(CSdelay);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f002 f996 	bl	800304c <HAL_Delay>
	}
	if (con ==0)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d107      	bne.n	8000d36 <ADS_SRB1_Conection+0x38>
	{
  	 ADS_Write_Reg(0x15, 0x00 ,i);   //SRB1 Switch open //not connected
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2015      	movs	r0, #21
 8000d2c:	f7ff fdf4 	bl	8000918 <ADS_Write_Reg>
	   HAL_Delay(CSdelay);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f002 f98b 	bl	800304c <HAL_Delay>
	}
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <ADS_Internal_Ref_Active>:
		2 PD_BIAS R/W 0h BIAS buffer power This bit determines the BIAS buffer power state. 0 : BIAS buffer is powered down 1 : BIAS buffer is enabled
		1 BIAS_LOFF_SENS R/W 0h BIAS sense function This bit enables the BIAS sense function. 0 : BIAS sense is disabled 1 : BIAS sense is enabled
		0 BIAS_STAT R 0h BIAS lead-off status This bit determines the BIAS status. 0 : BIAS is connected 1 : BIAS is not connected
*/
void ADS_Internal_Ref_Active(int i, uint8_t dd)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	460b      	mov	r3, r1
 8000d48:	70fb      	strb	r3, [r7, #3]
	ADS_Write_Reg(0x03, dd, i);     //0b1 11 0 1100
 8000d4a:	78fb      	ldrb	r3, [r7, #3]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	2003      	movs	r0, #3
 8000d52:	f7ff fde1 	bl	8000918 <ADS_Write_Reg>
	HAL_Delay(CSdelay);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f002 f978 	bl	800304c <HAL_Delay>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <ADS_LEOF>:

void ADS_LEOF(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	  3 SINGLE_SHOT R/W 0h Single-shot conversion This bit sets the conversion mode. 0 : Continuous conversion mode 1 : Single-shot mode
		2 Reserved R/W 0h Reserved Always write 0h
		1 PD_LOFF_COMP R/W 0h Lead-off comparator power-down This bit powers down the lead-off comparators. 0 : Lead-off comparators disabled 1 : Lead-off comparators enabled
		0 Reserved R/W 0h Reserved Always write 0h
*/
	for (int ii=0; ii<3; ii++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	e042      	b.n	8000df6 <ADS_LEOF+0x92>
	{
		//  ADS_Write_Reg(0x01, 0xB3, ii); //sampling rate => 2k  0b11
		  ADS_SRB1_Conection(1, ii); //SRB conncted to all ch N
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff ffc3 	bl	8000cfe <ADS_SRB1_Conection>
		
		  //No channels can connected to bias derivation while Leadd-off detection is ON
		  ADS_BIAS_SIGNAL_DERIVATION(0x00, 0x00, ii);
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff ffa3 	bl	8000cc8 <ADS_BIAS_SIGNAL_DERIVATION>

		//  Comparator positive side = 95%
		//  Lead-off current magnitude = 24 nA
		// AC lead-off detection at 7.8 Hz (fCLK / 216)
		  //ADS_Write_Reg(0x04, 0x01 ,ii);  // Lead-Off Control Register 		6nA
		  ADS_Write_Reg(0x04, 0x05 ,ii);  // Lead-Off Control Register			24nA
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	2105      	movs	r1, #5
 8000d86:	2004      	movs	r0, #4
 8000d88:	f7ff fdc6 	bl	8000918 <ADS_Write_Reg>
		//  ADS_Write_Reg(0x04, 0x09 ,ii);  // Lead-Off Control Register		6uA
		// enable/disable the lead-off comparators.  (disable)
		  ADS_Write_Reg(0x17, 0x00 ,ii);  //0b 0000 0010  CONFIG4
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2017      	movs	r0, #23
 8000d92:	f7ff fdc1 	bl	8000918 <ADS_Write_Reg>

		//LOFF_SENSN: Negative Signal Lead-Off Detection Register (address = 10h) (reset = 00h)
			ADS_Write_Reg(0x10, 0x00 ,ii);
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2010      	movs	r0, #16
 8000d9c:	f7ff fdbc 	bl	8000918 <ADS_Write_Reg>

		 // channel state setting
			ADS_Write_Reg(0x05,0x00,ii);
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	2100      	movs	r1, #0
 8000da4:	2005      	movs	r0, #5
 8000da6:	f7ff fdb7 	bl	8000918 <ADS_Write_Reg>
			ADS_Write_Reg(0x06,0x00,ii);
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	2100      	movs	r1, #0
 8000dae:	2006      	movs	r0, #6
 8000db0:	f7ff fdb2 	bl	8000918 <ADS_Write_Reg>
			ADS_Write_Reg(0x07,0x00,ii);
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	2100      	movs	r1, #0
 8000db8:	2007      	movs	r0, #7
 8000dba:	f7ff fdad 	bl	8000918 <ADS_Write_Reg>
			ADS_Write_Reg(0x08,0x00,ii);
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2008      	movs	r0, #8
 8000dc4:	f7ff fda8 	bl	8000918 <ADS_Write_Reg>
			ADS_Write_Reg(0x09,0x00,ii);
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2009      	movs	r0, #9
 8000dce:	f7ff fda3 	bl	8000918 <ADS_Write_Reg>
			ADS_Write_Reg(0x0A,0x00,ii);
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	200a      	movs	r0, #10
 8000dd8:	f7ff fd9e 	bl	8000918 <ADS_Write_Reg>
			ADS_Write_Reg(0x0B,0x00,ii);
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	2100      	movs	r1, #0
 8000de0:	200b      	movs	r0, #11
 8000de2:	f7ff fd99 	bl	8000918 <ADS_Write_Reg>
			ADS_Write_Reg(0x0C,0x00,ii);
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	2100      	movs	r1, #0
 8000dea:	200c      	movs	r0, #12
 8000dec:	f7ff fd94 	bl	8000918 <ADS_Write_Reg>
	for (int ii=0; ii<3; ii++)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3301      	adds	r3, #1
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	ddb9      	ble.n	8000d70 <ADS_LEOF+0xc>
	}

	//LOFF_SENSP: Positive Signal Lead-Off Detection Register (address = 0Fh) (reset = 00h)
	//  ADS_Write_Reg(0x0F, 0xFC ,2); //1,2
	  ADS_Write_Reg(0x0F, 0xF8 ,2);
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	21f8      	movs	r1, #248	; 0xf8
 8000e00:	200f      	movs	r0, #15
 8000e02:	f7ff fd89 	bl	8000918 <ADS_Write_Reg>
	  ADS_Write_Reg(0x0F, 0xFF ,1);
 8000e06:	2201      	movs	r2, #1
 8000e08:	21ff      	movs	r1, #255	; 0xff
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f7ff fd84 	bl	8000918 <ADS_Write_Reg>
	  ADS_Write_Reg(0x0F, 0xFF ,0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	21ff      	movs	r1, #255	; 0xff
 8000e14:	200f      	movs	r0, #15
 8000e16:	f7ff fd7f 	bl	8000918 <ADS_Write_Reg>

	  ADS_Write_Reg(0x03, 0xE8, 2);     // Enable bias buffer
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	21e8      	movs	r1, #232	; 0xe8
 8000e1e:	2003      	movs	r0, #3
 8000e20:	f7ff fd7a 	bl	8000918 <ADS_Write_Reg>
	  ADS_Write_Reg(0x03, 0xE8, 1);     // Enable bias buffer
 8000e24:	2201      	movs	r2, #1
 8000e26:	21e8      	movs	r1, #232	; 0xe8
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f7ff fd75 	bl	8000918 <ADS_Write_Reg>
	  ADS_Write_Reg(0x03, 0xEC, 0);     //0b1 11 1 1100  enable bias buffer      //secondary IC biasAmp turn on
 8000e2e:	2200      	movs	r2, #0
 8000e30:	21ec      	movs	r1, #236	; 0xec
 8000e32:	2003      	movs	r0, #3
 8000e34:	f7ff fd70 	bl	8000918 <ADS_Write_Reg>


}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <analog_setting>:


void  analog_setting(ADS_SettingTypeDef device_setting)
{
 8000e40:	b084      	sub	sp, #16
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	f107 0c18 	add.w	ip, r7, #24
 8000e4c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	if ((device_setting.SamplingRate)=='1') //250 sps
 8000e50:	7e7b      	ldrb	r3, [r7, #25]
 8000e52:	2b31      	cmp	r3, #49	; 0x31
 8000e54:	d111      	bne.n	8000e7a <analog_setting+0x3a>
	{
		ledspeed=10;
 8000e56:	4bc8      	ldr	r3, [pc, #800]	; (8001178 <analog_setting+0x338>)
 8000e58:	220a      	movs	r2, #10
 8000e5a:	601a      	str	r2, [r3, #0]
		ADS_Write_Reg(0x01,0xD6, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	21d6      	movs	r1, #214	; 0xd6
 8000e60:	2001      	movs	r0, #1
 8000e62:	f7ff fd59 	bl	8000918 <ADS_Write_Reg>
		ADS_Write_Reg(0x01,0xF6, 1);  // main IC
 8000e66:	2201      	movs	r2, #1
 8000e68:	21f6      	movs	r1, #246	; 0xf6
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f7ff fd54 	bl	8000918 <ADS_Write_Reg>
		ADS_Write_Reg(0x01,0xD6, 2);
 8000e70:	2202      	movs	r2, #2
 8000e72:	21d6      	movs	r1, #214	; 0xd6
 8000e74:	2001      	movs	r0, #1
 8000e76:	f7ff fd4f 	bl	8000918 <ADS_Write_Reg>
	}
	if ((device_setting.SamplingRate)=='2')  //500 sps
 8000e7a:	7e7b      	ldrb	r3, [r7, #25]
 8000e7c:	2b32      	cmp	r3, #50	; 0x32
 8000e7e:	d111      	bne.n	8000ea4 <analog_setting+0x64>
	{
		ledspeed=20;
 8000e80:	4bbd      	ldr	r3, [pc, #756]	; (8001178 <analog_setting+0x338>)
 8000e82:	2214      	movs	r2, #20
 8000e84:	601a      	str	r2, [r3, #0]
		ADS_Write_Reg(0x01,0xD5, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	21d5      	movs	r1, #213	; 0xd5
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff fd44 	bl	8000918 <ADS_Write_Reg>
		ADS_Write_Reg(0x01,0xF5, 1);  // main IC
 8000e90:	2201      	movs	r2, #1
 8000e92:	21f5      	movs	r1, #245	; 0xf5
 8000e94:	2001      	movs	r0, #1
 8000e96:	f7ff fd3f 	bl	8000918 <ADS_Write_Reg>
		ADS_Write_Reg(0x01,0xD5, 2);
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	21d5      	movs	r1, #213	; 0xd5
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f7ff fd3a 	bl	8000918 <ADS_Write_Reg>
	}
	if ((device_setting.SamplingRate)=='4') //1k  sps
 8000ea4:	7e7b      	ldrb	r3, [r7, #25]
 8000ea6:	2b34      	cmp	r3, #52	; 0x34
 8000ea8:	d111      	bne.n	8000ece <analog_setting+0x8e>
	{
		ledspeed=40;
 8000eaa:	4bb3      	ldr	r3, [pc, #716]	; (8001178 <analog_setting+0x338>)
 8000eac:	2228      	movs	r2, #40	; 0x28
 8000eae:	601a      	str	r2, [r3, #0]
		ADS_Write_Reg(0x01,0xD4, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	21d4      	movs	r1, #212	; 0xd4
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff fd2f 	bl	8000918 <ADS_Write_Reg>
		ADS_Write_Reg(0x01,0xF4, 1);  // main IC
 8000eba:	2201      	movs	r2, #1
 8000ebc:	21f4      	movs	r1, #244	; 0xf4
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff fd2a 	bl	8000918 <ADS_Write_Reg>
		ADS_Write_Reg(0x01,0xD4, 2);
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	21d4      	movs	r1, #212	; 0xd4
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff fd25 	bl	8000918 <ADS_Write_Reg>
	}
	if ((device_setting.SamplingRate)=='8')    //2k  sps
 8000ece:	7e7b      	ldrb	r3, [r7, #25]
 8000ed0:	2b38      	cmp	r3, #56	; 0x38
 8000ed2:	d111      	bne.n	8000ef8 <analog_setting+0xb8>
	{
		ledspeed=80;
 8000ed4:	4ba8      	ldr	r3, [pc, #672]	; (8001178 <analog_setting+0x338>)
 8000ed6:	2250      	movs	r2, #80	; 0x50
 8000ed8:	601a      	str	r2, [r3, #0]
		ADS_Write_Reg(0x01,0xD3, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	21d3      	movs	r1, #211	; 0xd3
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f7ff fd1a 	bl	8000918 <ADS_Write_Reg>
		ADS_Write_Reg(0x01,0xF3, 1);  // main IC
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	21f3      	movs	r1, #243	; 0xf3
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f7ff fd15 	bl	8000918 <ADS_Write_Reg>
		ADS_Write_Reg(0x01,0xD3, 2);
 8000eee:	2202      	movs	r2, #2
 8000ef0:	21d3      	movs	r1, #211	; 0xd3
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f7ff fd10 	bl	8000918 <ADS_Write_Reg>
	}


	if (device_setting.LeadoffMode == 'L')
 8000ef8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000efc:	2b4c      	cmp	r3, #76	; 0x4c
 8000efe:	d131      	bne.n	8000f64 <analog_setting+0x124>
	{
			ADS_LEOF();
 8000f00:	f7ff ff30 	bl	8000d64 <ADS_LEOF>

			ADS_Write_Reg(0x0F, 0xF8 + (device_setting.ExtraChannels & 0x07), 2);
 8000f04:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	3b08      	subs	r3, #8
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2202      	movs	r2, #2
 8000f14:	4619      	mov	r1, r3
 8000f16:	200f      	movs	r0, #15
 8000f18:	f7ff fcfe 	bl	8000918 <ADS_Write_Reg>

			if (!(device_setting.ExtraChannels & 0x01))  ADS_Write_Reg(0x05,0x81,2);  //extra channels off
 8000f1c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d104      	bne.n	8000f32 <analog_setting+0xf2>
 8000f28:	2202      	movs	r2, #2
 8000f2a:	2181      	movs	r1, #129	; 0x81
 8000f2c:	2005      	movs	r0, #5
 8000f2e:	f7ff fcf3 	bl	8000918 <ADS_Write_Reg>
			if (!(device_setting.ExtraChannels & 0x02))  ADS_Write_Reg(0x06,0x81,2);
 8000f32:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d104      	bne.n	8000f48 <analog_setting+0x108>
 8000f3e:	2202      	movs	r2, #2
 8000f40:	2181      	movs	r1, #129	; 0x81
 8000f42:	2006      	movs	r0, #6
 8000f44:	f7ff fce8 	bl	8000918 <ADS_Write_Reg>
			if (!(device_setting.ExtraChannels & 0x04))  ADS_Write_Reg(0x07,0x81,2);
 8000f48:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f040 8443 	bne.w	80017dc <analog_setting+0x99c>
 8000f56:	2202      	movs	r2, #2
 8000f58:	2181      	movs	r1, #129	; 0x81
 8000f5a:	2007      	movs	r0, #7
 8000f5c:	f7ff fcdc 	bl	8000918 <ADS_Write_Reg>
						SetLED(3,3,3,0);
				}

	}

}
 8000f60:	f000 bc3c 	b.w	80017dc <analog_setting+0x99c>
		ADS_Write_Reg(0x03, 0xE8, 2);     //0b1 11 1 1000  enable bias buffer      //secondary IC biasAmp turn off
 8000f64:	2202      	movs	r2, #2
 8000f66:	21e8      	movs	r1, #232	; 0xe8
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f7ff fcd5 	bl	8000918 <ADS_Write_Reg>
		ADS_Write_Reg(0x03, 0xE8, 1);     //0b1 11 1 1000  enable bias buffer      //main IC biasAmp turn off
 8000f6e:	2201      	movs	r2, #1
 8000f70:	21e8      	movs	r1, #232	; 0xe8
 8000f72:	2003      	movs	r0, #3
 8000f74:	f7ff fcd0 	bl	8000918 <ADS_Write_Reg>
		ADS_Write_Reg(0x03, 0xEC, 0);     //0b1 11 1 1100  enable bias buffer      //secondary IC biasAmp turn on
 8000f78:	2200      	movs	r2, #0
 8000f7a:	21ec      	movs	r1, #236	; 0xec
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f7ff fccb 	bl	8000918 <ADS_Write_Reg>
	  for (int i=0; i<3; i ++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	e016      	b.n	8000fb6 <analog_setting+0x176>
			ADS_Write_Reg(0x17, 0x00 ,i);     //LEOF off
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2017      	movs	r0, #23
 8000f8e:	f7ff fcc3 	bl	8000918 <ADS_Write_Reg>
			ADS_Write_Reg(0x0F, 0x00 ,i);	 // lead off dis N
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	2100      	movs	r1, #0
 8000f96:	200f      	movs	r0, #15
 8000f98:	f7ff fcbe 	bl	8000918 <ADS_Write_Reg>
			ADS_Write_Reg(0x10, 0x00 ,i);	// lead off dis P
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2010      	movs	r0, #16
 8000fa2:	f7ff fcb9 	bl	8000918 <ADS_Write_Reg>
			ADS_Write_Reg(0x04, 0x00 ,i);
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2004      	movs	r0, #4
 8000fac:	f7ff fcb4 	bl	8000918 <ADS_Write_Reg>
	  for (int i=0; i<3; i ++)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	dde5      	ble.n	8000f88 <analog_setting+0x148>
		ADS_SRB1_Conection(device_setting.SRBConnection == 'C' ? 1 : 0, 0);
 8000fbc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000fc0:	2b43      	cmp	r3, #67	; 0x43
 8000fc2:	bf0c      	ite	eq
 8000fc4:	2301      	moveq	r3, #1
 8000fc6:	2300      	movne	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe96 	bl	8000cfe <ADS_SRB1_Conection>
		ADS_SRB1_Conection(device_setting.SRBConnection == 'C' ? 1 : 0, 1);
 8000fd2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000fd6:	2b43      	cmp	r3, #67	; 0x43
 8000fd8:	bf0c      	ite	eq
 8000fda:	2301      	moveq	r3, #1
 8000fdc:	2300      	movne	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fe8b 	bl	8000cfe <ADS_SRB1_Conection>
		ADS_SRB1_Conection(device_setting.SRBConnection == 'C' ? 1 : 0, 2);
 8000fe8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000fec:	2b43      	cmp	r3, #67	; 0x43
 8000fee:	bf0c      	ite	eq
 8000ff0:	2301      	moveq	r3, #1
 8000ff2:	2300      	movne	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fe80 	bl	8000cfe <ADS_SRB1_Conection>
			uint8_t reg_gain = 0, exgain = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	72fb      	strb	r3, [r7, #11]
 8001002:	2300      	movs	r3, #0
 8001004:	72bb      	strb	r3, [r7, #10]
			uint8_t ch_off_reg = 0x81; //channel off + input short
 8001006:	2381      	movs	r3, #129	; 0x81
 8001008:	70fb      	strb	r3, [r7, #3]
			if (device_setting.Gain == 1)  reg_gain = 0x00;
 800100a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d101      	bne.n	8001016 <analog_setting+0x1d6>
 8001012:	2300      	movs	r3, #0
 8001014:	72fb      	strb	r3, [r7, #11]
			if (device_setting.Gain == 2)  reg_gain = 0x10;
 8001016:	f897 3020 	ldrb.w	r3, [r7, #32]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d101      	bne.n	8001022 <analog_setting+0x1e2>
 800101e:	2310      	movs	r3, #16
 8001020:	72fb      	strb	r3, [r7, #11]
			if (device_setting.Gain == 4)  reg_gain = 0x20;
 8001022:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001026:	2b04      	cmp	r3, #4
 8001028:	d101      	bne.n	800102e <analog_setting+0x1ee>
 800102a:	2320      	movs	r3, #32
 800102c:	72fb      	strb	r3, [r7, #11]
			if (device_setting.Gain == 6)  reg_gain = 0x30;
 800102e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001032:	2b06      	cmp	r3, #6
 8001034:	d101      	bne.n	800103a <analog_setting+0x1fa>
 8001036:	2330      	movs	r3, #48	; 0x30
 8001038:	72fb      	strb	r3, [r7, #11]
			if (device_setting.Gain == 8)  reg_gain = 0x40;
 800103a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800103e:	2b08      	cmp	r3, #8
 8001040:	d101      	bne.n	8001046 <analog_setting+0x206>
 8001042:	2340      	movs	r3, #64	; 0x40
 8001044:	72fb      	strb	r3, [r7, #11]
			if (device_setting.Gain == 12) reg_gain = 0x50;
 8001046:	f897 3020 	ldrb.w	r3, [r7, #32]
 800104a:	2b0c      	cmp	r3, #12
 800104c:	d101      	bne.n	8001052 <analog_setting+0x212>
 800104e:	2350      	movs	r3, #80	; 0x50
 8001050:	72fb      	strb	r3, [r7, #11]
			if (device_setting.Gain == 24) reg_gain = 0x60;
 8001052:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001056:	2b18      	cmp	r3, #24
 8001058:	d101      	bne.n	800105e <analog_setting+0x21e>
 800105a:	2360      	movs	r3, #96	; 0x60
 800105c:	72fb      	strb	r3, [r7, #11]
			if (device_setting.ExtraGain == 1)  exgain = 0x00;
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <analog_setting+0x228>
 8001064:	2300      	movs	r3, #0
 8001066:	72bb      	strb	r3, [r7, #10]
			if (device_setting.ExtraGain == 2)  exgain = 0x10;
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	2b02      	cmp	r3, #2
 800106c:	d101      	bne.n	8001072 <analog_setting+0x232>
 800106e:	2310      	movs	r3, #16
 8001070:	72bb      	strb	r3, [r7, #10]
			if (device_setting.ExtraGain == 4)  exgain = 0x20;
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	2b04      	cmp	r3, #4
 8001076:	d101      	bne.n	800107c <analog_setting+0x23c>
 8001078:	2320      	movs	r3, #32
 800107a:	72bb      	strb	r3, [r7, #10]
			if (device_setting.ExtraGain == 6)  exgain = 0x30;
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	2b06      	cmp	r3, #6
 8001080:	d101      	bne.n	8001086 <analog_setting+0x246>
 8001082:	2330      	movs	r3, #48	; 0x30
 8001084:	72bb      	strb	r3, [r7, #10]
			if (device_setting.ExtraGain == 8)  exgain = 0x40;
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	2b08      	cmp	r3, #8
 800108a:	d101      	bne.n	8001090 <analog_setting+0x250>
 800108c:	2340      	movs	r3, #64	; 0x40
 800108e:	72bb      	strb	r3, [r7, #10]
			if (device_setting.ExtraGain == 12) exgain = 0x50;
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	2b0c      	cmp	r3, #12
 8001094:	d101      	bne.n	800109a <analog_setting+0x25a>
 8001096:	2350      	movs	r3, #80	; 0x50
 8001098:	72bb      	strb	r3, [r7, #10]
			if (device_setting.ExtraGain == 24) exgain = 0x60;
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	2b18      	cmp	r3, #24
 800109e:	d101      	bne.n	80010a4 <analog_setting+0x264>
 80010a0:	2360      	movs	r3, #96	; 0x60
 80010a2:	72bb      	strb	r3, [r7, #10]
			if (device_setting.ExtraChannels & 0x01) ADS_Write_Reg(0x05, exgain  ,2);  else ADS_Write_Reg(0x05, ch_off_reg  ,2);
 80010a4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <analog_setting+0x27e>
 80010b0:	7abb      	ldrb	r3, [r7, #10]
 80010b2:	2202      	movs	r2, #2
 80010b4:	4619      	mov	r1, r3
 80010b6:	2005      	movs	r0, #5
 80010b8:	f7ff fc2e 	bl	8000918 <ADS_Write_Reg>
 80010bc:	e005      	b.n	80010ca <analog_setting+0x28a>
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	2202      	movs	r2, #2
 80010c2:	4619      	mov	r1, r3
 80010c4:	2005      	movs	r0, #5
 80010c6:	f7ff fc27 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.ExtraChannels & 0x02) ADS_Write_Reg(0x06, exgain  ,2);  else ADS_Write_Reg(0x06, ch_off_reg  ,2);
 80010ca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d006      	beq.n	80010e4 <analog_setting+0x2a4>
 80010d6:	7abb      	ldrb	r3, [r7, #10]
 80010d8:	2202      	movs	r2, #2
 80010da:	4619      	mov	r1, r3
 80010dc:	2006      	movs	r0, #6
 80010de:	f7ff fc1b 	bl	8000918 <ADS_Write_Reg>
 80010e2:	e005      	b.n	80010f0 <analog_setting+0x2b0>
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	2202      	movs	r2, #2
 80010e8:	4619      	mov	r1, r3
 80010ea:	2006      	movs	r0, #6
 80010ec:	f7ff fc14 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.ExtraChannels & 0x04) ADS_Write_Reg(0x07, exgain  ,2);  else ADS_Write_Reg(0x07, ch_off_reg  ,2);
 80010f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <analog_setting+0x2ca>
 80010fc:	7abb      	ldrb	r3, [r7, #10]
 80010fe:	2202      	movs	r2, #2
 8001100:	4619      	mov	r1, r3
 8001102:	2007      	movs	r0, #7
 8001104:	f7ff fc08 	bl	8000918 <ADS_Write_Reg>
 8001108:	e005      	b.n	8001116 <analog_setting+0x2d6>
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	2202      	movs	r2, #2
 800110e:	4619      	mov	r1, r3
 8001110:	2007      	movs	r0, #7
 8001112:	f7ff fc01 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x000001) ADS_Write_Reg(0x08, reg_gain  ,2);  else ADS_Write_Reg(0x08, ch_off_reg  ,2);
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <analog_setting+0x2ee>
 8001120:	7afb      	ldrb	r3, [r7, #11]
 8001122:	2202      	movs	r2, #2
 8001124:	4619      	mov	r1, r3
 8001126:	2008      	movs	r0, #8
 8001128:	f7ff fbf6 	bl	8000918 <ADS_Write_Reg>
 800112c:	e005      	b.n	800113a <analog_setting+0x2fa>
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	2202      	movs	r2, #2
 8001132:	4619      	mov	r1, r3
 8001134:	2008      	movs	r0, #8
 8001136:	f7ff fbef 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x000002) ADS_Write_Reg(0x09, reg_gain  ,2);  else ADS_Write_Reg(0x09, ch_off_reg  ,2);
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <analog_setting+0x312>
 8001144:	7afb      	ldrb	r3, [r7, #11]
 8001146:	2202      	movs	r2, #2
 8001148:	4619      	mov	r1, r3
 800114a:	2009      	movs	r0, #9
 800114c:	f7ff fbe4 	bl	8000918 <ADS_Write_Reg>
 8001150:	e005      	b.n	800115e <analog_setting+0x31e>
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	2202      	movs	r2, #2
 8001156:	4619      	mov	r1, r3
 8001158:	2009      	movs	r0, #9
 800115a:	f7ff fbdd 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x000004) ADS_Write_Reg(0x0A, reg_gain  ,2);  else ADS_Write_Reg(0x0A, ch_off_reg  ,2);
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	d009      	beq.n	800117c <analog_setting+0x33c>
 8001168:	7afb      	ldrb	r3, [r7, #11]
 800116a:	2202      	movs	r2, #2
 800116c:	4619      	mov	r1, r3
 800116e:	200a      	movs	r0, #10
 8001170:	f7ff fbd2 	bl	8000918 <ADS_Write_Reg>
 8001174:	e008      	b.n	8001188 <analog_setting+0x348>
 8001176:	bf00      	nop
 8001178:	200002e4 	.word	0x200002e4
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	2202      	movs	r2, #2
 8001180:	4619      	mov	r1, r3
 8001182:	200a      	movs	r0, #10
 8001184:	f7ff fbc8 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x000008) ADS_Write_Reg(0x0B, reg_gain  ,2);  else ADS_Write_Reg(0x0B, ch_off_reg  ,2);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d006      	beq.n	80011a0 <analog_setting+0x360>
 8001192:	7afb      	ldrb	r3, [r7, #11]
 8001194:	2202      	movs	r2, #2
 8001196:	4619      	mov	r1, r3
 8001198:	200b      	movs	r0, #11
 800119a:	f7ff fbbd 	bl	8000918 <ADS_Write_Reg>
 800119e:	e005      	b.n	80011ac <analog_setting+0x36c>
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	2202      	movs	r2, #2
 80011a4:	4619      	mov	r1, r3
 80011a6:	200b      	movs	r0, #11
 80011a8:	f7ff fbb6 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x000010) ADS_Write_Reg(0x0C, reg_gain  ,2);  else ADS_Write_Reg(0x0C, ch_off_reg  ,2);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d006      	beq.n	80011c4 <analog_setting+0x384>
 80011b6:	7afb      	ldrb	r3, [r7, #11]
 80011b8:	2202      	movs	r2, #2
 80011ba:	4619      	mov	r1, r3
 80011bc:	200c      	movs	r0, #12
 80011be:	f7ff fbab 	bl	8000918 <ADS_Write_Reg>
 80011c2:	e005      	b.n	80011d0 <analog_setting+0x390>
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	2202      	movs	r2, #2
 80011c8:	4619      	mov	r1, r3
 80011ca:	200c      	movs	r0, #12
 80011cc:	f7ff fba4 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x000020) ADS_Write_Reg(0x05, reg_gain  ,1);  else ADS_Write_Reg(0x05, ch_off_reg  ,1);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0320 	and.w	r3, r3, #32
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d006      	beq.n	80011e8 <analog_setting+0x3a8>
 80011da:	7afb      	ldrb	r3, [r7, #11]
 80011dc:	2201      	movs	r2, #1
 80011de:	4619      	mov	r1, r3
 80011e0:	2005      	movs	r0, #5
 80011e2:	f7ff fb99 	bl	8000918 <ADS_Write_Reg>
 80011e6:	e005      	b.n	80011f4 <analog_setting+0x3b4>
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	2201      	movs	r2, #1
 80011ec:	4619      	mov	r1, r3
 80011ee:	2005      	movs	r0, #5
 80011f0:	f7ff fb92 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x000040) ADS_Write_Reg(0x06, reg_gain  ,1);  else ADS_Write_Reg(0x06, ch_off_reg  ,1);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <analog_setting+0x3cc>
 80011fe:	7afb      	ldrb	r3, [r7, #11]
 8001200:	2201      	movs	r2, #1
 8001202:	4619      	mov	r1, r3
 8001204:	2006      	movs	r0, #6
 8001206:	f7ff fb87 	bl	8000918 <ADS_Write_Reg>
 800120a:	e005      	b.n	8001218 <analog_setting+0x3d8>
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	2201      	movs	r2, #1
 8001210:	4619      	mov	r1, r3
 8001212:	2006      	movs	r0, #6
 8001214:	f7ff fb80 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x000080) ADS_Write_Reg(0x07, reg_gain  ,1);  else ADS_Write_Reg(0x07, ch_off_reg  ,1);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121e:	2b00      	cmp	r3, #0
 8001220:	d006      	beq.n	8001230 <analog_setting+0x3f0>
 8001222:	7afb      	ldrb	r3, [r7, #11]
 8001224:	2201      	movs	r2, #1
 8001226:	4619      	mov	r1, r3
 8001228:	2007      	movs	r0, #7
 800122a:	f7ff fb75 	bl	8000918 <ADS_Write_Reg>
 800122e:	e005      	b.n	800123c <analog_setting+0x3fc>
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	2201      	movs	r2, #1
 8001234:	4619      	mov	r1, r3
 8001236:	2007      	movs	r0, #7
 8001238:	f7ff fb6e 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x000100) ADS_Write_Reg(0x08, reg_gain  ,1);  else ADS_Write_Reg(0x08, ch_off_reg  ,1);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <analog_setting+0x414>
 8001246:	7afb      	ldrb	r3, [r7, #11]
 8001248:	2201      	movs	r2, #1
 800124a:	4619      	mov	r1, r3
 800124c:	2008      	movs	r0, #8
 800124e:	f7ff fb63 	bl	8000918 <ADS_Write_Reg>
 8001252:	e005      	b.n	8001260 <analog_setting+0x420>
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	2201      	movs	r2, #1
 8001258:	4619      	mov	r1, r3
 800125a:	2008      	movs	r0, #8
 800125c:	f7ff fb5c 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x000200) ADS_Write_Reg(0x09, reg_gain  ,1);  else ADS_Write_Reg(0x09, ch_off_reg  ,1);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001266:	2b00      	cmp	r3, #0
 8001268:	d006      	beq.n	8001278 <analog_setting+0x438>
 800126a:	7afb      	ldrb	r3, [r7, #11]
 800126c:	2201      	movs	r2, #1
 800126e:	4619      	mov	r1, r3
 8001270:	2009      	movs	r0, #9
 8001272:	f7ff fb51 	bl	8000918 <ADS_Write_Reg>
 8001276:	e005      	b.n	8001284 <analog_setting+0x444>
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	2201      	movs	r2, #1
 800127c:	4619      	mov	r1, r3
 800127e:	2009      	movs	r0, #9
 8001280:	f7ff fb4a 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x000400) ADS_Write_Reg(0x0A, reg_gain  ,1);  else ADS_Write_Reg(0x0A, ch_off_reg  ,1);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128a:	2b00      	cmp	r3, #0
 800128c:	d006      	beq.n	800129c <analog_setting+0x45c>
 800128e:	7afb      	ldrb	r3, [r7, #11]
 8001290:	2201      	movs	r2, #1
 8001292:	4619      	mov	r1, r3
 8001294:	200a      	movs	r0, #10
 8001296:	f7ff fb3f 	bl	8000918 <ADS_Write_Reg>
 800129a:	e005      	b.n	80012a8 <analog_setting+0x468>
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	2201      	movs	r2, #1
 80012a0:	4619      	mov	r1, r3
 80012a2:	200a      	movs	r0, #10
 80012a4:	f7ff fb38 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x000800) ADS_Write_Reg(0x0B, reg_gain  ,1);  else ADS_Write_Reg(0x0B, ch_off_reg  ,1);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <analog_setting+0x480>
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4619      	mov	r1, r3
 80012b8:	200b      	movs	r0, #11
 80012ba:	f7ff fb2d 	bl	8000918 <ADS_Write_Reg>
 80012be:	e005      	b.n	80012cc <analog_setting+0x48c>
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	2201      	movs	r2, #1
 80012c4:	4619      	mov	r1, r3
 80012c6:	200b      	movs	r0, #11
 80012c8:	f7ff fb26 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x001000) ADS_Write_Reg(0x0C, reg_gain  ,1);  else ADS_Write_Reg(0x0C, ch_off_reg  ,1);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <analog_setting+0x4a4>
 80012d6:	7afb      	ldrb	r3, [r7, #11]
 80012d8:	2201      	movs	r2, #1
 80012da:	4619      	mov	r1, r3
 80012dc:	200c      	movs	r0, #12
 80012de:	f7ff fb1b 	bl	8000918 <ADS_Write_Reg>
 80012e2:	e005      	b.n	80012f0 <analog_setting+0x4b0>
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	2201      	movs	r2, #1
 80012e8:	4619      	mov	r1, r3
 80012ea:	200c      	movs	r0, #12
 80012ec:	f7ff fb14 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x002000) ADS_Write_Reg(0x05, reg_gain  ,0);  else ADS_Write_Reg(0x05, ch_off_reg  ,0);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d006      	beq.n	8001308 <analog_setting+0x4c8>
 80012fa:	7afb      	ldrb	r3, [r7, #11]
 80012fc:	2200      	movs	r2, #0
 80012fe:	4619      	mov	r1, r3
 8001300:	2005      	movs	r0, #5
 8001302:	f7ff fb09 	bl	8000918 <ADS_Write_Reg>
 8001306:	e005      	b.n	8001314 <analog_setting+0x4d4>
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	2200      	movs	r2, #0
 800130c:	4619      	mov	r1, r3
 800130e:	2005      	movs	r0, #5
 8001310:	f7ff fb02 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x004000) ADS_Write_Reg(0x06, reg_gain  ,0);  else ADS_Write_Reg(0x06, ch_off_reg  ,0);
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <analog_setting+0x4ec>
 800131e:	7afb      	ldrb	r3, [r7, #11]
 8001320:	2200      	movs	r2, #0
 8001322:	4619      	mov	r1, r3
 8001324:	2006      	movs	r0, #6
 8001326:	f7ff faf7 	bl	8000918 <ADS_Write_Reg>
 800132a:	e005      	b.n	8001338 <analog_setting+0x4f8>
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	2200      	movs	r2, #0
 8001330:	4619      	mov	r1, r3
 8001332:	2006      	movs	r0, #6
 8001334:	f7ff faf0 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x008000) ADS_Write_Reg(0x07, reg_gain  ,0);  else ADS_Write_Reg(0x07, ch_off_reg  ,0);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <analog_setting+0x510>
 8001342:	7afb      	ldrb	r3, [r7, #11]
 8001344:	2200      	movs	r2, #0
 8001346:	4619      	mov	r1, r3
 8001348:	2007      	movs	r0, #7
 800134a:	f7ff fae5 	bl	8000918 <ADS_Write_Reg>
 800134e:	e005      	b.n	800135c <analog_setting+0x51c>
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	2200      	movs	r2, #0
 8001354:	4619      	mov	r1, r3
 8001356:	2007      	movs	r0, #7
 8001358:	f7ff fade 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x010000) ADS_Write_Reg(0x08, reg_gain  ,0);  else ADS_Write_Reg(0x08, ch_off_reg  ,0);
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d006      	beq.n	8001374 <analog_setting+0x534>
 8001366:	7afb      	ldrb	r3, [r7, #11]
 8001368:	2200      	movs	r2, #0
 800136a:	4619      	mov	r1, r3
 800136c:	2008      	movs	r0, #8
 800136e:	f7ff fad3 	bl	8000918 <ADS_Write_Reg>
 8001372:	e005      	b.n	8001380 <analog_setting+0x540>
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	2200      	movs	r2, #0
 8001378:	4619      	mov	r1, r3
 800137a:	2008      	movs	r0, #8
 800137c:	f7ff facc 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x020000) ADS_Write_Reg(0x09, reg_gain  ,0);  else ADS_Write_Reg(0x09, ch_off_reg  ,0);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <analog_setting+0x558>
 800138a:	7afb      	ldrb	r3, [r7, #11]
 800138c:	2200      	movs	r2, #0
 800138e:	4619      	mov	r1, r3
 8001390:	2009      	movs	r0, #9
 8001392:	f7ff fac1 	bl	8000918 <ADS_Write_Reg>
 8001396:	e005      	b.n	80013a4 <analog_setting+0x564>
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	2200      	movs	r2, #0
 800139c:	4619      	mov	r1, r3
 800139e:	2009      	movs	r0, #9
 80013a0:	f7ff faba 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x040000) ADS_Write_Reg(0x0A, reg_gain  ,0);  else ADS_Write_Reg(0x0A, ch_off_reg  ,0);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d006      	beq.n	80013bc <analog_setting+0x57c>
 80013ae:	7afb      	ldrb	r3, [r7, #11]
 80013b0:	2200      	movs	r2, #0
 80013b2:	4619      	mov	r1, r3
 80013b4:	200a      	movs	r0, #10
 80013b6:	f7ff faaf 	bl	8000918 <ADS_Write_Reg>
 80013ba:	e005      	b.n	80013c8 <analog_setting+0x588>
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	2200      	movs	r2, #0
 80013c0:	4619      	mov	r1, r3
 80013c2:	200a      	movs	r0, #10
 80013c4:	f7ff faa8 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x080000) ADS_Write_Reg(0x0B, reg_gain  ,0);  else ADS_Write_Reg(0x0B, ch_off_reg  ,0);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <analog_setting+0x5a0>
 80013d2:	7afb      	ldrb	r3, [r7, #11]
 80013d4:	2200      	movs	r2, #0
 80013d6:	4619      	mov	r1, r3
 80013d8:	200b      	movs	r0, #11
 80013da:	f7ff fa9d 	bl	8000918 <ADS_Write_Reg>
 80013de:	e005      	b.n	80013ec <analog_setting+0x5ac>
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	2200      	movs	r2, #0
 80013e4:	4619      	mov	r1, r3
 80013e6:	200b      	movs	r0, #11
 80013e8:	f7ff fa96 	bl	8000918 <ADS_Write_Reg>
			if (device_setting.Channels & 0x100000) ADS_Write_Reg(0x0C, reg_gain  ,0);  else ADS_Write_Reg(0x0C, ch_off_reg  ,0);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <analog_setting+0x5c4>
 80013f6:	7afb      	ldrb	r3, [r7, #11]
 80013f8:	2200      	movs	r2, #0
 80013fa:	4619      	mov	r1, r3
 80013fc:	200c      	movs	r0, #12
 80013fe:	f7ff fa8b 	bl	8000918 <ADS_Write_Reg>
 8001402:	e005      	b.n	8001410 <analog_setting+0x5d0>
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	2200      	movs	r2, #0
 8001408:	4619      	mov	r1, r3
 800140a:	200c      	movs	r0, #12
 800140c:	f7ff fa84 	bl	8000918 <ADS_Write_Reg>
			uint8_t bias_derive[3] = {0x00, 0x00, 0x00};
 8001410:	2300      	movs	r3, #0
 8001412:	703b      	strb	r3, [r7, #0]
 8001414:	2300      	movs	r3, #0
 8001416:	707b      	strb	r3, [r7, #1]
 8001418:	2300      	movs	r3, #0
 800141a:	70bb      	strb	r3, [r7, #2]
			if (device_setting.ExtraChannels & 0x01) bias_derive[2] |= 0x01;  else bias_derive[2] &= 0xFE;
 800141c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <analog_setting+0x5f4>
 8001428:	78bb      	ldrb	r3, [r7, #2]
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	70bb      	strb	r3, [r7, #2]
 8001432:	e004      	b.n	800143e <analog_setting+0x5fe>
 8001434:	78bb      	ldrb	r3, [r7, #2]
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	70bb      	strb	r3, [r7, #2]
			if (device_setting.ExtraChannels & 0x02) bias_derive[2] |= 0x02;  else bias_derive[2] &= 0xFD;
 800143e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <analog_setting+0x616>
 800144a:	78bb      	ldrb	r3, [r7, #2]
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	b2db      	uxtb	r3, r3
 8001452:	70bb      	strb	r3, [r7, #2]
 8001454:	e004      	b.n	8001460 <analog_setting+0x620>
 8001456:	78bb      	ldrb	r3, [r7, #2]
 8001458:	f023 0302 	bic.w	r3, r3, #2
 800145c:	b2db      	uxtb	r3, r3
 800145e:	70bb      	strb	r3, [r7, #2]
			if (device_setting.ExtraChannels & 0x04) bias_derive[2] |= 0x04;  else bias_derive[2] &= 0xFB;
 8001460:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <analog_setting+0x638>
 800146c:	78bb      	ldrb	r3, [r7, #2]
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	b2db      	uxtb	r3, r3
 8001474:	70bb      	strb	r3, [r7, #2]
 8001476:	e004      	b.n	8001482 <analog_setting+0x642>
 8001478:	78bb      	ldrb	r3, [r7, #2]
 800147a:	f023 0304 	bic.w	r3, r3, #4
 800147e:	b2db      	uxtb	r3, r3
 8001480:	70bb      	strb	r3, [r7, #2]
			if (device_setting.Channels & 0x000001) bias_derive[2] |= 0x08;  else bias_derive[2] &= 0xF7;
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <analog_setting+0x658>
 800148c:	78bb      	ldrb	r3, [r7, #2]
 800148e:	f043 0308 	orr.w	r3, r3, #8
 8001492:	b2db      	uxtb	r3, r3
 8001494:	70bb      	strb	r3, [r7, #2]
 8001496:	e004      	b.n	80014a2 <analog_setting+0x662>
 8001498:	78bb      	ldrb	r3, [r7, #2]
 800149a:	f023 0308 	bic.w	r3, r3, #8
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	70bb      	strb	r3, [r7, #2]
			if (device_setting.Channels & 0x000002) bias_derive[2] |= 0x10;  else bias_derive[2] &= 0xEF;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <analog_setting+0x678>
 80014ac:	78bb      	ldrb	r3, [r7, #2]
 80014ae:	f043 0310 	orr.w	r3, r3, #16
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	70bb      	strb	r3, [r7, #2]
 80014b6:	e004      	b.n	80014c2 <analog_setting+0x682>
 80014b8:	78bb      	ldrb	r3, [r7, #2]
 80014ba:	f023 0310 	bic.w	r3, r3, #16
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	70bb      	strb	r3, [r7, #2]
			if (device_setting.Channels & 0x000004) bias_derive[2] |= 0x20;  else bias_derive[2] &= 0xDF;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <analog_setting+0x698>
 80014cc:	78bb      	ldrb	r3, [r7, #2]
 80014ce:	f043 0320 	orr.w	r3, r3, #32
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	70bb      	strb	r3, [r7, #2]
 80014d6:	e004      	b.n	80014e2 <analog_setting+0x6a2>
 80014d8:	78bb      	ldrb	r3, [r7, #2]
 80014da:	f023 0320 	bic.w	r3, r3, #32
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	70bb      	strb	r3, [r7, #2]
			if (device_setting.Channels & 0x000008) bias_derive[2] |= 0x40;  else bias_derive[2] &= 0xBF;
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <analog_setting+0x6b8>
 80014ec:	78bb      	ldrb	r3, [r7, #2]
 80014ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	70bb      	strb	r3, [r7, #2]
 80014f6:	e004      	b.n	8001502 <analog_setting+0x6c2>
 80014f8:	78bb      	ldrb	r3, [r7, #2]
 80014fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	70bb      	strb	r3, [r7, #2]
			if (device_setting.Channels & 0x000010) bias_derive[2] |= 0x80;  else bias_derive[2] &= 0x7F;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <analog_setting+0x6d8>
 800150c:	78bb      	ldrb	r3, [r7, #2]
 800150e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001512:	b2db      	uxtb	r3, r3
 8001514:	70bb      	strb	r3, [r7, #2]
 8001516:	e004      	b.n	8001522 <analog_setting+0x6e2>
 8001518:	78bb      	ldrb	r3, [r7, #2]
 800151a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800151e:	b2db      	uxtb	r3, r3
 8001520:	70bb      	strb	r3, [r7, #2]
			if (device_setting.Channels & 0x000020) bias_derive[1] |= 0x01;  else bias_derive[1] &= 0xFE;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0320 	and.w	r3, r3, #32
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <analog_setting+0x6f8>
 800152c:	787b      	ldrb	r3, [r7, #1]
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	707b      	strb	r3, [r7, #1]
 8001536:	e004      	b.n	8001542 <analog_setting+0x702>
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	b2db      	uxtb	r3, r3
 8001540:	707b      	strb	r3, [r7, #1]
			if (device_setting.Channels & 0x000040) bias_derive[1] |= 0x02;  else bias_derive[1] &= 0xFD;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <analog_setting+0x718>
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	b2db      	uxtb	r3, r3
 8001554:	707b      	strb	r3, [r7, #1]
 8001556:	e004      	b.n	8001562 <analog_setting+0x722>
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	f023 0302 	bic.w	r3, r3, #2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	707b      	strb	r3, [r7, #1]
			if (device_setting.Channels & 0x000080) bias_derive[1] |= 0x04;  else bias_derive[1] &= 0xFB;
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <analog_setting+0x738>
 800156c:	787b      	ldrb	r3, [r7, #1]
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	b2db      	uxtb	r3, r3
 8001574:	707b      	strb	r3, [r7, #1]
 8001576:	e004      	b.n	8001582 <analog_setting+0x742>
 8001578:	787b      	ldrb	r3, [r7, #1]
 800157a:	f023 0304 	bic.w	r3, r3, #4
 800157e:	b2db      	uxtb	r3, r3
 8001580:	707b      	strb	r3, [r7, #1]
			if (device_setting.Channels & 0x000100) bias_derive[1] |= 0x08;  else bias_derive[1] &= 0xF7;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <analog_setting+0x758>
 800158c:	787b      	ldrb	r3, [r7, #1]
 800158e:	f043 0308 	orr.w	r3, r3, #8
 8001592:	b2db      	uxtb	r3, r3
 8001594:	707b      	strb	r3, [r7, #1]
 8001596:	e004      	b.n	80015a2 <analog_setting+0x762>
 8001598:	787b      	ldrb	r3, [r7, #1]
 800159a:	f023 0308 	bic.w	r3, r3, #8
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	707b      	strb	r3, [r7, #1]
			if (device_setting.Channels & 0x000200) bias_derive[1] |= 0x10;  else bias_derive[1] &= 0xEF;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <analog_setting+0x778>
 80015ac:	787b      	ldrb	r3, [r7, #1]
 80015ae:	f043 0310 	orr.w	r3, r3, #16
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	707b      	strb	r3, [r7, #1]
 80015b6:	e004      	b.n	80015c2 <analog_setting+0x782>
 80015b8:	787b      	ldrb	r3, [r7, #1]
 80015ba:	f023 0310 	bic.w	r3, r3, #16
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	707b      	strb	r3, [r7, #1]
			if (device_setting.Channels & 0x000400) bias_derive[1] |= 0x20;  else bias_derive[1] &= 0xDE;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <analog_setting+0x798>
 80015cc:	787b      	ldrb	r3, [r7, #1]
 80015ce:	f043 0320 	orr.w	r3, r3, #32
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	707b      	strb	r3, [r7, #1]
 80015d6:	e004      	b.n	80015e2 <analog_setting+0x7a2>
 80015d8:	787b      	ldrb	r3, [r7, #1]
 80015da:	f023 0321 	bic.w	r3, r3, #33	; 0x21
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	707b      	strb	r3, [r7, #1]
			if (device_setting.Channels & 0x000800) bias_derive[1] |= 0x40;  else bias_derive[1] &= 0xBE;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <analog_setting+0x7b8>
 80015ec:	787b      	ldrb	r3, [r7, #1]
 80015ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	707b      	strb	r3, [r7, #1]
 80015f6:	e004      	b.n	8001602 <analog_setting+0x7c2>
 80015f8:	787b      	ldrb	r3, [r7, #1]
 80015fa:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	707b      	strb	r3, [r7, #1]
			if (device_setting.Channels & 0x001000) bias_derive[1] |= 0x80;  else bias_derive[1] &= 0x7E;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <analog_setting+0x7d8>
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001612:	b2db      	uxtb	r3, r3
 8001614:	707b      	strb	r3, [r7, #1]
 8001616:	e004      	b.n	8001622 <analog_setting+0x7e2>
 8001618:	787b      	ldrb	r3, [r7, #1]
 800161a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800161e:	b2db      	uxtb	r3, r3
 8001620:	707b      	strb	r3, [r7, #1]
			if (device_setting.Channels & 0x002000) bias_derive[0] |= 0x01;  else bias_derive[0] &= 0xFE;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <analog_setting+0x7f8>
 800162c:	783b      	ldrb	r3, [r7, #0]
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	703b      	strb	r3, [r7, #0]
 8001636:	e004      	b.n	8001642 <analog_setting+0x802>
 8001638:	783b      	ldrb	r3, [r7, #0]
 800163a:	f023 0301 	bic.w	r3, r3, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	703b      	strb	r3, [r7, #0]
			if (device_setting.Channels & 0x004000) bias_derive[0] |= 0x02;  else bias_derive[0] &= 0xFD;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <analog_setting+0x818>
 800164c:	783b      	ldrb	r3, [r7, #0]
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	b2db      	uxtb	r3, r3
 8001654:	703b      	strb	r3, [r7, #0]
 8001656:	e004      	b.n	8001662 <analog_setting+0x822>
 8001658:	783b      	ldrb	r3, [r7, #0]
 800165a:	f023 0302 	bic.w	r3, r3, #2
 800165e:	b2db      	uxtb	r3, r3
 8001660:	703b      	strb	r3, [r7, #0]
			if (device_setting.Channels & 0x008000) bias_derive[0] |= 0x04;  else bias_derive[0] &= 0xFB;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <analog_setting+0x838>
 800166c:	783b      	ldrb	r3, [r7, #0]
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	b2db      	uxtb	r3, r3
 8001674:	703b      	strb	r3, [r7, #0]
 8001676:	e004      	b.n	8001682 <analog_setting+0x842>
 8001678:	783b      	ldrb	r3, [r7, #0]
 800167a:	f023 0304 	bic.w	r3, r3, #4
 800167e:	b2db      	uxtb	r3, r3
 8001680:	703b      	strb	r3, [r7, #0]
			if (device_setting.Channels & 0x010000) bias_derive[0] |= 0x08;  else bias_derive[0] &= 0xF7;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <analog_setting+0x858>
 800168c:	783b      	ldrb	r3, [r7, #0]
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	b2db      	uxtb	r3, r3
 8001694:	703b      	strb	r3, [r7, #0]
 8001696:	e004      	b.n	80016a2 <analog_setting+0x862>
 8001698:	783b      	ldrb	r3, [r7, #0]
 800169a:	f023 0308 	bic.w	r3, r3, #8
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	703b      	strb	r3, [r7, #0]
			if (device_setting.Channels & 0x020000) bias_derive[0] |= 0x10;  else bias_derive[0] &= 0xEF;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <analog_setting+0x878>
 80016ac:	783b      	ldrb	r3, [r7, #0]
 80016ae:	f043 0310 	orr.w	r3, r3, #16
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	703b      	strb	r3, [r7, #0]
 80016b6:	e004      	b.n	80016c2 <analog_setting+0x882>
 80016b8:	783b      	ldrb	r3, [r7, #0]
 80016ba:	f023 0310 	bic.w	r3, r3, #16
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	703b      	strb	r3, [r7, #0]
			if (device_setting.Channels & 0x040000) bias_derive[0] |= 0x20;  else bias_derive[0] &= 0xDE;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <analog_setting+0x898>
 80016cc:	783b      	ldrb	r3, [r7, #0]
 80016ce:	f043 0320 	orr.w	r3, r3, #32
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	703b      	strb	r3, [r7, #0]
 80016d6:	e004      	b.n	80016e2 <analog_setting+0x8a2>
 80016d8:	783b      	ldrb	r3, [r7, #0]
 80016da:	f023 0321 	bic.w	r3, r3, #33	; 0x21
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	703b      	strb	r3, [r7, #0]
			if (device_setting.Channels & 0x080000) bias_derive[0] |= 0x40;  else bias_derive[0] &= 0xBE;
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <analog_setting+0x8b8>
 80016ec:	783b      	ldrb	r3, [r7, #0]
 80016ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	703b      	strb	r3, [r7, #0]
 80016f6:	e004      	b.n	8001702 <analog_setting+0x8c2>
 80016f8:	783b      	ldrb	r3, [r7, #0]
 80016fa:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	703b      	strb	r3, [r7, #0]
			if (device_setting.Channels & 0x100000) bias_derive[0] |= 0x80;  else bias_derive[0] &= 0x7E;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <analog_setting+0x8d8>
 800170c:	783b      	ldrb	r3, [r7, #0]
 800170e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001712:	b2db      	uxtb	r3, r3
 8001714:	703b      	strb	r3, [r7, #0]
 8001716:	e004      	b.n	8001722 <analog_setting+0x8e2>
 8001718:	783b      	ldrb	r3, [r7, #0]
 800171a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800171e:	b2db      	uxtb	r3, r3
 8001720:	703b      	strb	r3, [r7, #0]
			for (int k=0; k < 3; k++)
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	e037      	b.n	8001798 <analog_setting+0x958>
				if (device_setting.derivation == 0x00)  // None
 8001728:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800172c:	2b00      	cmp	r3, #0
 800172e:	d105      	bne.n	800173c <analog_setting+0x8fc>
						ADS_BIAS_SIGNAL_DERIVATION(0x00, 0x00, k);
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	2100      	movs	r1, #0
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff fac7 	bl	8000cc8 <ADS_BIAS_SIGNAL_DERIVATION>
 800173a:	e02a      	b.n	8001792 <analog_setting+0x952>
				else if (device_setting.derivation == 0xF0)   // just P  //for refrential montage no need to fucking rout N channels to Bias Deriv.
 800173c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001740:	2bf0      	cmp	r3, #240	; 0xf0
 8001742:	d109      	bne.n	8001758 <analog_setting+0x918>
						ADS_BIAS_SIGNAL_DERIVATION(bias_derive[k], 0x00, k);
 8001744:	463a      	mov	r2, r7
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fab9 	bl	8000cc8 <ADS_BIAS_SIGNAL_DERIVATION>
 8001756:	e01c      	b.n	8001792 <analog_setting+0x952>
				else if (device_setting.derivation == 0x0F)  // Just N
 8001758:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d105      	bne.n	800176c <analog_setting+0x92c>
						ADS_BIAS_SIGNAL_DERIVATION(0x00, 0xFF, k);
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	21ff      	movs	r1, #255	; 0xff
 8001764:	2000      	movs	r0, #0
 8001766:	f7ff faaf 	bl	8000cc8 <ADS_BIAS_SIGNAL_DERIVATION>
 800176a:	e012      	b.n	8001792 <analog_setting+0x952>
				else if (device_setting.derivation == 0xFF)  // ALL
 800176c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001770:	2bff      	cmp	r3, #255	; 0xff
 8001772:	d109      	bne.n	8001788 <analog_setting+0x948>
						ADS_BIAS_SIGNAL_DERIVATION(bias_derive[k], 0xFF, k);
 8001774:	463a      	mov	r2, r7
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	21ff      	movs	r1, #255	; 0xff
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff faa1 	bl	8000cc8 <ADS_BIAS_SIGNAL_DERIVATION>
 8001786:	e004      	b.n	8001792 <analog_setting+0x952>
					ADS_BIAS_SIGNAL_DERIVATION(0x00, 0x00, k);
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	2100      	movs	r1, #0
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff fa9b 	bl	8000cc8 <ADS_BIAS_SIGNAL_DERIVATION>
			for (int k=0; k < 3; k++)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3301      	adds	r3, #1
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b02      	cmp	r3, #2
 800179c:	ddc4      	ble.n	8001728 <analog_setting+0x8e8>
				if (device_setting.TestSignal=='T')
 800179e:	7e3b      	ldrb	r3, [r7, #24]
 80017a0:	2b54      	cmp	r3, #84	; 0x54
 80017a2:	d110      	bne.n	80017c6 <analog_setting+0x986>
						ADS_Write_Reg(0x02 ,0xD0 ,2); //register conf 2  = d0  0b110 1 0000  test internally signal is available
 80017a4:	2202      	movs	r2, #2
 80017a6:	21d0      	movs	r1, #208	; 0xd0
 80017a8:	2002      	movs	r0, #2
 80017aa:	f7ff f8b5 	bl	8000918 <ADS_Write_Reg>
						ADS_Write_Reg(0x05, 0x65 ,2);  //input Test 24g ch1
 80017ae:	2202      	movs	r2, #2
 80017b0:	2165      	movs	r1, #101	; 0x65
 80017b2:	2005      	movs	r0, #5
 80017b4:	f7ff f8b0 	bl	8000918 <ADS_Write_Reg>
						SetLED(3,3,3,1);
 80017b8:	2301      	movs	r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	2103      	movs	r1, #3
 80017be:	2003      	movs	r0, #3
 80017c0:	f000 f9d4 	bl	8001b6c <SetLED>
}
 80017c4:	e00a      	b.n	80017dc <analog_setting+0x99c>
						ADS_Write_Reg(0x02, 0xC2 , 2); //register conf 2  = d0  0b110 0 0000  test internally signal  not active
 80017c6:	2202      	movs	r2, #2
 80017c8:	21c2      	movs	r1, #194	; 0xc2
 80017ca:	2002      	movs	r0, #2
 80017cc:	f7ff f8a4 	bl	8000918 <ADS_Write_Reg>
						SetLED(3,3,3,0);
 80017d0:	2300      	movs	r3, #0
 80017d2:	2203      	movs	r2, #3
 80017d4:	2103      	movs	r1, #3
 80017d6:	2003      	movs	r0, #3
 80017d8:	f000 f9c8 	bl	8001b6c <SetLED>
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017e6:	b004      	add	sp, #16
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop

080017ec <ADS_Start_data_full>:
void ADS_Start_data_full(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	ADS_Write_Reg(0x14,0xE0, 0);  // gpio0 output and 0
 80017f0:	2200      	movs	r2, #0
 80017f2:	21e0      	movs	r1, #224	; 0xe0
 80017f4:	2014      	movs	r0, #20
 80017f6:	f7ff f88f 	bl	8000918 <ADS_Write_Reg>
	ADS_Write_Reg(0x14,0xE0, 1);  // gpio0 output and 0
 80017fa:	2201      	movs	r2, #1
 80017fc:	21e0      	movs	r1, #224	; 0xe0
 80017fe:	2014      	movs	r0, #20
 8001800:	f7ff f88a 	bl	8000918 <ADS_Write_Reg>
	ADS_Write_Reg(0x14,0xE0, 2);  // gpio0 output and 0
 8001804:	2202      	movs	r2, #2
 8001806:	21e0      	movs	r1, #224	; 0xe0
 8001808:	2014      	movs	r0, #20
 800180a:	f7ff f885 	bl	8000918 <ADS_Write_Reg>
	ADS_Read_data_cont(0);
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff f9b6 	bl	8000b80 <ADS_Read_data_cont>
	ADS_Read_data_cont(1);
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff f9b3 	bl	8000b80 <ADS_Read_data_cont>
	ADS_Read_data_cont(2);
 800181a:	2002      	movs	r0, #2
 800181c:	f7ff f9b0 	bl	8000b80 <ADS_Read_data_cont>
	ADS_Start();
 8001820:	f7ff f98e 	bl	8000b40 <ADS_Start>
	RDATACflag = 1;
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <ADS_Start_data_full+0x64>)
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS0,GPIO_PIN_SET);  //ADS SPI turn off
 800182a:	2201      	movs	r2, #1
 800182c:	2108      	movs	r1, #8
 800182e:	4809      	ldr	r0, [pc, #36]	; (8001854 <ADS_Start_data_full+0x68>)
 8001830:	f002 fe80 	bl	8004534 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS1,GPIO_PIN_SET);  //ADS SPI turn off
 8001834:	2201      	movs	r2, #1
 8001836:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800183a:	4807      	ldr	r0, [pc, #28]	; (8001858 <ADS_Start_data_full+0x6c>)
 800183c:	f002 fe7a 	bl	8004534 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2,GPIO_PIN_SET);  //ADS SPI turn off
 8001840:	2201      	movs	r2, #1
 8001842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001846:	4804      	ldr	r0, [pc, #16]	; (8001858 <ADS_Start_data_full+0x6c>)
 8001848:	f002 fe74 	bl	8004534 <HAL_GPIO_WritePin>
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	2000036c 	.word	0x2000036c
 8001854:	40020800 	.word	0x40020800
 8001858:	40021000 	.word	0x40021000

0800185c <ADS_Stop_data_Full>:


void ADS_Stop_data_Full()
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	RDATACflag = 0;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <ADS_Stop_data_Full+0x44>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
	ADS_Stop_data_cont(0);
 8001866:	2000      	movs	r0, #0
 8001868:	f7ff f9dc 	bl	8000c24 <ADS_Stop_data_cont>
	ADS_Stop_data_cont(1);
 800186c:	2001      	movs	r0, #1
 800186e:	f7ff f9d9 	bl	8000c24 <ADS_Stop_data_cont>
	ADS_Stop_data_cont(2);
 8001872:	2002      	movs	r0, #2
 8001874:	f7ff f9d6 	bl	8000c24 <ADS_Stop_data_cont>
	ADS_Stop();
 8001878:	f7ff f972 	bl	8000b60 <ADS_Stop>
	ADS_Write_Reg(0x14,0xF0 ,0);  // gpio0 output and 0
 800187c:	2200      	movs	r2, #0
 800187e:	21f0      	movs	r1, #240	; 0xf0
 8001880:	2014      	movs	r0, #20
 8001882:	f7ff f849 	bl	8000918 <ADS_Write_Reg>
	ADS_Write_Reg(0x14,0xF0 ,1);  // gpio0 output and 0
 8001886:	2201      	movs	r2, #1
 8001888:	21f0      	movs	r1, #240	; 0xf0
 800188a:	2014      	movs	r0, #20
 800188c:	f7ff f844 	bl	8000918 <ADS_Write_Reg>
	ADS_Write_Reg(0x14,0xF0 ,2);  // gpio0 output and 0
 8001890:	2202      	movs	r2, #2
 8001892:	21f0      	movs	r1, #240	; 0xf0
 8001894:	2014      	movs	r0, #20
 8001896:	f7ff f83f 	bl	8000918 <ADS_Write_Reg>
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000036c 	.word	0x2000036c

080018a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_DMA_Init+0x3c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <MX_DMA_Init+0x3c>)
 80018b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_DMA_Init+0x3c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2038      	movs	r0, #56	; 0x38
 80018cc:	f001 ff31 	bl	8003732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018d0:	2038      	movs	r0, #56	; 0x38
 80018d2:	f001 ff4a 	bl	800376a <HAL_NVIC_EnableIRQ>

}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	; 0x30
 80018e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	4b94      	ldr	r3, [pc, #592]	; (8001b50 <MX_GPIO_Init+0x26c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a93      	ldr	r2, [pc, #588]	; (8001b50 <MX_GPIO_Init+0x26c>)
 8001904:	f043 0310 	orr.w	r3, r3, #16
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b91      	ldr	r3, [pc, #580]	; (8001b50 <MX_GPIO_Init+0x26c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	61bb      	str	r3, [r7, #24]
 8001914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	4b8d      	ldr	r3, [pc, #564]	; (8001b50 <MX_GPIO_Init+0x26c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a8c      	ldr	r2, [pc, #560]	; (8001b50 <MX_GPIO_Init+0x26c>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b8a      	ldr	r3, [pc, #552]	; (8001b50 <MX_GPIO_Init+0x26c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b86      	ldr	r3, [pc, #536]	; (8001b50 <MX_GPIO_Init+0x26c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a85      	ldr	r2, [pc, #532]	; (8001b50 <MX_GPIO_Init+0x26c>)
 800193c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b83      	ldr	r3, [pc, #524]	; (8001b50 <MX_GPIO_Init+0x26c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b7f      	ldr	r3, [pc, #508]	; (8001b50 <MX_GPIO_Init+0x26c>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a7e      	ldr	r2, [pc, #504]	; (8001b50 <MX_GPIO_Init+0x26c>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b7c      	ldr	r3, [pc, #496]	; (8001b50 <MX_GPIO_Init+0x26c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	4b78      	ldr	r3, [pc, #480]	; (8001b50 <MX_GPIO_Init+0x26c>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a77      	ldr	r2, [pc, #476]	; (8001b50 <MX_GPIO_Init+0x26c>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b75      	ldr	r3, [pc, #468]	; (8001b50 <MX_GPIO_Init+0x26c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	4b71      	ldr	r3, [pc, #452]	; (8001b50 <MX_GPIO_Init+0x26c>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a70      	ldr	r2, [pc, #448]	; (8001b50 <MX_GPIO_Init+0x26c>)
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b6e      	ldr	r3, [pc, #440]	; (8001b50 <MX_GPIO_Init+0x26c>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, O1_Pin|O2_Pin|CLKSEL2_Pin|CS1_Pin
 80019a2:	2200      	movs	r2, #0
 80019a4:	f64f 410c 	movw	r1, #64524	; 0xfc0c
 80019a8:	486a      	ldr	r0, [pc, #424]	; (8001b54 <MX_GPIO_Init+0x270>)
 80019aa:	f002 fdc3 	bl	8004534 <HAL_GPIO_WritePin>
                          |CS2_Pin|START_Pin|RSTN_Pin|PWDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CLKSEL0_Pin|CS0_Pin, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	210c      	movs	r1, #12
 80019b2:	4869      	ldr	r0, [pc, #420]	; (8001b58 <MX_GPIO_Init+0x274>)
 80019b4:	f002 fdbe 	bl	8004534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CLKSEL1_GPIO_Port, CLKSEL1_Pin, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2101      	movs	r1, #1
 80019bc:	4867      	ldr	r0, [pc, #412]	; (8001b5c <MX_GPIO_Init+0x278>)
 80019be:	f002 fdb9 	bl	8004534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STAT1_Pin|STAT2_Pin|STAT3_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80019c8:	4865      	ldr	r0, [pc, #404]	; (8001b60 <MX_GPIO_Init+0x27c>)
 80019ca:	f002 fdb3 	bl	8004534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80019ce:	2200      	movs	r2, #0
 80019d0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80019d4:	4863      	ldr	r0, [pc, #396]	; (8001b64 <MX_GPIO_Init+0x280>)
 80019d6:	f002 fdad 	bl	8004534 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = O1_Pin|O2_Pin|CLKSEL2_Pin|CS1_Pin
 80019da:	f64f 430c 	movw	r3, #64524	; 0xfc0c
 80019de:	61fb      	str	r3, [r7, #28]
                          |CS2_Pin|START_Pin|RSTN_Pin|PWDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	4858      	ldr	r0, [pc, #352]	; (8001b54 <MX_GPIO_Init+0x270>)
 80019f4:	f002 fbec 	bl	80041d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = W6_Pin|W5_Pin|W4_Pin;
 80019f8:	2370      	movs	r3, #112	; 0x70
 80019fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a00:	2301      	movs	r3, #1
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4852      	ldr	r0, [pc, #328]	; (8001b54 <MX_GPIO_Init+0x270>)
 8001a0c:	f002 fbe0 	bl	80041d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = W3_Pin|W2_Pin|W1_Pin;
 8001a10:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	4619      	mov	r1, r3
 8001a24:	484c      	ldr	r0, [pc, #304]	; (8001b58 <MX_GPIO_Init+0x274>)
 8001a26:	f002 fbd3 	bl	80041d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC4 PC5 PC6
                           PC7 PC8 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001a2a:	f641 53f1 	movw	r3, #7665	; 0x1df1
 8001a2e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a30:	2303      	movs	r3, #3
 8001a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4846      	ldr	r0, [pc, #280]	; (8001b58 <MX_GPIO_Init+0x274>)
 8001a40:	f002 fbc6 	bl	80041d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CLKSEL0_Pin|CS0_Pin;
 8001a44:	230c      	movs	r3, #12
 8001a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	4619      	mov	r1, r3
 8001a5a:	483f      	ldr	r0, [pc, #252]	; (8001b58 <MX_GPIO_Init+0x274>)
 8001a5c:	f002 fbb8 	bl	80041d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLKSEL1_Pin;
 8001a60:	2301      	movs	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a64:	2301      	movs	r3, #1
 8001a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CLKSEL1_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	4839      	ldr	r0, [pc, #228]	; (8001b5c <MX_GPIO_Init+0x278>)
 8001a78:	f002 fbaa 	bl	80041d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY_Pin;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a80:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <MX_GPIO_Init+0x284>)
 8001a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4833      	ldr	r0, [pc, #204]	; (8001b5c <MX_GPIO_Init+0x278>)
 8001a90:	f002 fb9e 	bl	80041d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_15;
 8001a94:	f248 4310 	movw	r3, #33808	; 0x8410
 8001a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	482c      	ldr	r0, [pc, #176]	; (8001b5c <MX_GPIO_Init+0x278>)
 8001aaa:	f002 fb91 	bl	80041d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB15 PB3 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001aae:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8001ab2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4827      	ldr	r0, [pc, #156]	; (8001b60 <MX_GPIO_Init+0x27c>)
 8001ac4:	f002 fb84 	bl	80041d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0
 8001ac8:	f240 3383 	movw	r3, #899	; 0x383
 8001acc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	4619      	mov	r1, r3
 8001adc:	481d      	ldr	r0, [pc, #116]	; (8001b54 <MX_GPIO_Init+0x270>)
 8001ade:	f002 fb77 	bl	80041d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = STAT1_Pin|STAT2_Pin|STAT3_Pin;
 8001ae2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4619      	mov	r1, r3
 8001afa:	4819      	ldr	r0, [pc, #100]	; (8001b60 <MX_GPIO_Init+0x27c>)
 8001afc:	f002 fb68 	bl	80041d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b00:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001b04:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b06:	2303      	movs	r3, #3
 8001b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	4619      	mov	r1, r3
 8001b14:	4813      	ldr	r0, [pc, #76]	; (8001b64 <MX_GPIO_Init+0x280>)
 8001b16:	f002 fb5b 	bl	80041d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8001b1a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	4619      	mov	r1, r3
 8001b32:	480c      	ldr	r0, [pc, #48]	; (8001b64 <MX_GPIO_Init+0x280>)
 8001b34:	f002 fb4c 	bl	80041d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2007      	movs	r0, #7
 8001b3e:	f001 fdf8 	bl	8003732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b42:	2007      	movs	r0, #7
 8001b44:	f001 fe11 	bl	800376a <HAL_NVIC_EnableIRQ>

}
 8001b48:	bf00      	nop
 8001b4a:	3730      	adds	r7, #48	; 0x30
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40020800 	.word	0x40020800
 8001b5c:	40020000 	.word	0x40020000
 8001b60:	40020400 	.word	0x40020400
 8001b64:	40020c00 	.word	0x40020c00
 8001b68:	10210000 	.word	0x10210000

08001b6c <SetLED>:

/* USER CODE BEGIN 2 */
void SetLED(int l1,int l2,int l3, int l4)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
	if (l1==1) HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d105      	bne.n	8001b8c <SetLED+0x20>
 8001b80:	2201      	movs	r2, #1
 8001b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b86:	4833      	ldr	r0, [pc, #204]	; (8001c54 <SetLED+0xe8>)
 8001b88:	f002 fcd4 	bl	8004534 <HAL_GPIO_WritePin>
	if (l1==0) HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d105      	bne.n	8001b9e <SetLED+0x32>
 8001b92:	2200      	movs	r2, #0
 8001b94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b98:	482e      	ldr	r0, [pc, #184]	; (8001c54 <SetLED+0xe8>)
 8001b9a:	f002 fccb 	bl	8004534 <HAL_GPIO_WritePin>
	if (l1==2)	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d104      	bne.n	8001bae <SetLED+0x42>
 8001ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ba8:	482a      	ldr	r0, [pc, #168]	; (8001c54 <SetLED+0xe8>)
 8001baa:	f002 fcdc 	bl	8004566 <HAL_GPIO_TogglePin>

	if (l2==1) HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d105      	bne.n	8001bc0 <SetLED+0x54>
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bba:	4826      	ldr	r0, [pc, #152]	; (8001c54 <SetLED+0xe8>)
 8001bbc:	f002 fcba 	bl	8004534 <HAL_GPIO_WritePin>
	if (l2==0) HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d105      	bne.n	8001bd2 <SetLED+0x66>
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bcc:	4821      	ldr	r0, [pc, #132]	; (8001c54 <SetLED+0xe8>)
 8001bce:	f002 fcb1 	bl	8004534 <HAL_GPIO_WritePin>
	if (l2==2)	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d104      	bne.n	8001be2 <SetLED+0x76>
 8001bd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bdc:	481d      	ldr	r0, [pc, #116]	; (8001c54 <SetLED+0xe8>)
 8001bde:	f002 fcc2 	bl	8004566 <HAL_GPIO_TogglePin>

	if (l3==1) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <SetLED+0x88>
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bee:	4819      	ldr	r0, [pc, #100]	; (8001c54 <SetLED+0xe8>)
 8001bf0:	f002 fca0 	bl	8004534 <HAL_GPIO_WritePin>
	if (l3==0) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d105      	bne.n	8001c06 <SetLED+0x9a>
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c00:	4814      	ldr	r0, [pc, #80]	; (8001c54 <SetLED+0xe8>)
 8001c02:	f002 fc97 	bl	8004534 <HAL_GPIO_WritePin>
	if (l3==2)	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d104      	bne.n	8001c16 <SetLED+0xaa>
 8001c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c10:	4810      	ldr	r0, [pc, #64]	; (8001c54 <SetLED+0xe8>)
 8001c12:	f002 fca8 	bl	8004566 <HAL_GPIO_TogglePin>

	if (l4==1) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d105      	bne.n	8001c28 <SetLED+0xbc>
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c22:	480c      	ldr	r0, [pc, #48]	; (8001c54 <SetLED+0xe8>)
 8001c24:	f002 fc86 	bl	8004534 <HAL_GPIO_WritePin>
	if (l4==0) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d105      	bne.n	8001c3a <SetLED+0xce>
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c34:	4807      	ldr	r0, [pc, #28]	; (8001c54 <SetLED+0xe8>)
 8001c36:	f002 fc7d 	bl	8004534 <HAL_GPIO_WritePin>
	if (l4==2)	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d104      	bne.n	8001c4a <SetLED+0xde>
 8001c40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c44:	4803      	ldr	r0, [pc, #12]	; (8001c54 <SetLED+0xe8>)
 8001c46:	f002 fc8e 	bl	8004566 <HAL_GPIO_TogglePin>
}
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40020c00 	.word	0x40020c00

08001c58 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <MX_I2C3_Init+0x50>)
 8001c5e:	4a13      	ldr	r2, [pc, #76]	; (8001cac <MX_I2C3_Init+0x54>)
 8001c60:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 200000;
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_I2C3_Init+0x50>)
 8001c64:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <MX_I2C3_Init+0x58>)
 8001c66:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <MX_I2C3_Init+0x50>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_I2C3_Init+0x50>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MX_I2C3_Init+0x50>)
 8001c76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c7a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <MX_I2C3_Init+0x50>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <MX_I2C3_Init+0x50>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <MX_I2C3_Init+0x50>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <MX_I2C3_Init+0x50>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c94:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <MX_I2C3_Init+0x50>)
 8001c96:	f002 fca5 	bl	80045e4 <HAL_I2C_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ca0:	f000 fd8e 	bl	80027c0 <Error_Handler>
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	200002ec 	.word	0x200002ec
 8001cac:	40005c00 	.word	0x40005c00
 8001cb0:	00030d40 	.word	0x00030d40

08001cb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a31      	ldr	r2, [pc, #196]	; (8001d98 <HAL_I2C_MspInit+0xe4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d15b      	bne.n	8001d8e <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <HAL_I2C_MspInit+0xe8>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a2f      	ldr	r2, [pc, #188]	; (8001d9c <HAL_I2C_MspInit+0xe8>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_I2C_MspInit+0xe8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_I2C_MspInit+0xe8>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a28      	ldr	r2, [pc, #160]	; (8001d9c <HAL_I2C_MspInit+0xe8>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <HAL_I2C_MspInit+0xe8>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d14:	2312      	movs	r3, #18
 8001d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d20:	2304      	movs	r3, #4
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	481d      	ldr	r0, [pc, #116]	; (8001da0 <HAL_I2C_MspInit+0xec>)
 8001d2c:	f002 fa50 	bl	80041d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d36:	2312      	movs	r3, #18
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d42:	2304      	movs	r3, #4
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4815      	ldr	r0, [pc, #84]	; (8001da4 <HAL_I2C_MspInit+0xf0>)
 8001d4e:	f002 fa3f 	bl	80041d0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_I2C_MspInit+0xe8>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <HAL_I2C_MspInit+0xe8>)
 8001d5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_I2C_MspInit+0xe8>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	2048      	movs	r0, #72	; 0x48
 8001d74:	f001 fcdd 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001d78:	2048      	movs	r0, #72	; 0x48
 8001d7a:	f001 fcf6 	bl	800376a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	2049      	movs	r0, #73	; 0x49
 8001d84:	f001 fcd5 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001d88:	2049      	movs	r0, #73	; 0x49
 8001d8a:	f001 fcee 	bl	800376a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001d8e:	bf00      	nop
 8001d90:	3728      	adds	r7, #40	; 0x28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40005c00 	.word	0x40005c00
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40020000 	.word	0x40020000

08001da8 <check_i2c_slaves_IT>:
extern uint8_t user_huge_values, huge_updated, huge_colors[8], huge_stat;
extern uint8_t device_stat, new_data_flag_usb;
extern uint8_t testshow;

void check_i2c_slaves_IT(void)
{	
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	if (new_data_flag_usb == 0 && device_stat == 0)
 8001dac:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <check_i2c_slaves_IT+0x7c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d135      	bne.n	8001e20 <check_i2c_slaves_IT+0x78>
 8001db4:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <check_i2c_slaves_IT+0x80>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d131      	bne.n	8001e20 <check_i2c_slaves_IT+0x78>
	{
		if (huge_updated == 0)
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <check_i2c_slaves_IT+0x84>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d108      	bne.n	8001dd6 <check_i2c_slaves_IT+0x2e>
		{	
			//HAL_I2C_Master_Abort_IT(&hi2c3, 0x10);
			__NOP();	
 8001dc4:	bf00      	nop
			huge_updated = 1;
 8001dc6:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <check_i2c_slaves_IT+0x84>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Abort_IT(&hi2c3, 0x10);
 8001dcc:	2110      	movs	r1, #16
 8001dce:	4818      	ldr	r0, [pc, #96]	; (8001e30 <check_i2c_slaves_IT+0x88>)
 8001dd0:	f002 fe94 	bl	8004afc <HAL_I2C_Master_Abort_IT>
				HAL_I2C_Master_Abort_IT(&hi2c3, 0x10);
				HAL_I2C_Master_Transmit_IT(&hi2c3, 0x10, i2cOUT, 4);
			}
		}
	}
}
 8001dd4:	e024      	b.n	8001e20 <check_i2c_slaves_IT+0x78>
		  huge_updated = 0;
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <check_i2c_slaves_IT+0x84>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
			i2cOUT[0] = 's';
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <check_i2c_slaves_IT+0x8c>)
 8001dde:	2273      	movs	r2, #115	; 0x73
 8001de0:	701a      	strb	r2, [r3, #0]
			i2cOUT[1] = huge_colors[0];
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <check_i2c_slaves_IT+0x90>)
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <check_i2c_slaves_IT+0x8c>)
 8001de8:	705a      	strb	r2, [r3, #1]
			i2cOUT[2] = huge_colors[1];
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <check_i2c_slaves_IT+0x90>)
 8001dec:	785a      	ldrb	r2, [r3, #1]
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <check_i2c_slaves_IT+0x8c>)
 8001df0:	709a      	strb	r2, [r3, #2]
			i2cOUT[3] = huge_colors[2];
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <check_i2c_slaves_IT+0x90>)
 8001df4:	789a      	ldrb	r2, [r3, #2]
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <check_i2c_slaves_IT+0x8c>)
 8001df8:	70da      	strb	r2, [r3, #3]
			if (HAL_I2C_Master_Transmit_IT(&hi2c3, 0x10, i2cOUT, 4) != HAL_OK)
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	4a0d      	ldr	r2, [pc, #52]	; (8001e34 <check_i2c_slaves_IT+0x8c>)
 8001dfe:	2110      	movs	r1, #16
 8001e00:	480b      	ldr	r0, [pc, #44]	; (8001e30 <check_i2c_slaves_IT+0x88>)
 8001e02:	f002 fd27 	bl	8004854 <HAL_I2C_Master_Transmit_IT>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d009      	beq.n	8001e20 <check_i2c_slaves_IT+0x78>
				HAL_I2C_Master_Abort_IT(&hi2c3, 0x10);
 8001e0c:	2110      	movs	r1, #16
 8001e0e:	4808      	ldr	r0, [pc, #32]	; (8001e30 <check_i2c_slaves_IT+0x88>)
 8001e10:	f002 fe74 	bl	8004afc <HAL_I2C_Master_Abort_IT>
				HAL_I2C_Master_Transmit_IT(&hi2c3, 0x10, i2cOUT, 4);
 8001e14:	2304      	movs	r3, #4
 8001e16:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <check_i2c_slaves_IT+0x8c>)
 8001e18:	2110      	movs	r1, #16
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <check_i2c_slaves_IT+0x88>)
 8001e1c:	f002 fd1a 	bl	8004854 <HAL_I2C_Master_Transmit_IT>
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	2000021c 	.word	0x2000021c
 8001e28:	20000220 	.word	0x20000220
 8001e2c:	20000004 	.word	0x20000004
 8001e30:	200002ec 	.word	0x200002ec
 8001e34:	20000380 	.word	0x20000380
 8001e38:	20000008 	.word	0x20000008

08001e3c <start_i2c_data>:
// }
		return 255;
}

void start_i2c_data(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	while (huge_updated == 0)
 8001e40:	e006      	b.n	8001e50 <start_i2c_data+0x14>
	{
		__NOP();
 8001e42:	bf00      	nop
		SetLED(1,1,1,1);
 8001e44:	2301      	movs	r3, #1
 8001e46:	2201      	movs	r2, #1
 8001e48:	2101      	movs	r1, #1
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f7ff fe8e 	bl	8001b6c <SetLED>
	while (huge_updated == 0)
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <start_i2c_data+0x44>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f4      	beq.n	8001e42 <start_i2c_data+0x6>
	}
	
	i2cOUT[0] = 'd';
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <start_i2c_data+0x48>)
 8001e5a:	2264      	movs	r2, #100	; 0x64
 8001e5c:	701a      	strb	r2, [r3, #0]
	i2cOUT[1] = 0;
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <start_i2c_data+0x48>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	705a      	strb	r2, [r3, #1]
	i2cOUT[2] = 1;
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <start_i2c_data+0x48>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	709a      	strb	r2, [r3, #2]
	i2cOUT[3] = 1;
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <start_i2c_data+0x48>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	70da      	strb	r2, [r3, #3]
	
	HAL_I2C_Master_Transmit_IT(&hi2c3, 0x10, i2cOUT, 4);
 8001e70:	2304      	movs	r3, #4
 8001e72:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <start_i2c_data+0x48>)
 8001e74:	2110      	movs	r1, #16
 8001e76:	4804      	ldr	r0, [pc, #16]	; (8001e88 <start_i2c_data+0x4c>)
 8001e78:	f002 fcec 	bl	8004854 <HAL_I2C_Master_Transmit_IT>
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000004 	.word	0x20000004
 8001e84:	20000380 	.word	0x20000380
 8001e88:	200002ec 	.word	0x200002ec

08001e8c <get_i2c_data>:

uint8_t get_i2c_data(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
		if (huge_updated == 1)
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <get_i2c_data+0x24>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d108      	bne.n	8001eaa <get_i2c_data+0x1e>
		{
			huge_updated = 0;
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <get_i2c_data+0x24>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Transmit_IT(&hi2c3, 0x10, i2cOUT, 4);		
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <get_i2c_data+0x28>)
 8001ea2:	2110      	movs	r1, #16
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <get_i2c_data+0x2c>)
 8001ea6:	f002 fcd5 	bl	8004854 <HAL_I2C_Master_Transmit_IT>
		}
}
 8001eaa:	bf00      	nop
 8001eac:	4618      	mov	r0, r3
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000004 	.word	0x20000004
 8001eb4:	20000380 	.word	0x20000380
 8001eb8:	200002ec 	.word	0x200002ec

08001ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec2:	f001 f851 	bl	8002f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec6:	f000 f8cd 	bl	8002064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eca:	f7ff fd0b 	bl	80018e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ece:	f7ff fce9 	bl	80018a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001ed2:	f7fe fb4d 	bl	8000570 <MX_ADC1_Init>
  MX_I2C3_Init();
 8001ed6:	f7ff febf 	bl	8001c58 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001eda:	f000 fc95 	bl	8002808 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001ede:	f000 ffa3 	bl	8002e28 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001ee2:	f00a f921 	bl	800c128 <MX_USB_DEVICE_Init>


  /* USER CODE BEGIN 2 */
  light_pattern(2);
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f000 fb90 	bl	800260c <light_pattern>
  HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, 1);
 8001eec:	2201      	movs	r2, #1
 8001eee:	2104      	movs	r1, #4
 8001ef0:	4858      	ldr	r0, [pc, #352]	; (8002054 <main+0x198>)
 8001ef2:	f002 fb1f 	bl	8004534 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, 1);
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2108      	movs	r1, #8
 8001efa:	4856      	ldr	r0, [pc, #344]	; (8002054 <main+0x198>)
 8001efc:	f002 fb1a 	bl	8004534 <HAL_GPIO_WritePin>


  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 2);
 8001f00:	2202      	movs	r2, #2
 8001f02:	2102      	movs	r1, #2
 8001f04:	201d      	movs	r0, #29
 8001f06:	f001 fc14 	bl	8003732 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(I2C3_EV_IRQn, 1, 1);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	2048      	movs	r0, #72	; 0x48
 8001f10:	f001 fc0f 	bl	8003732 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(I2C3_ER_IRQn, 1, 1);
 8001f14:	2201      	movs	r2, #1
 8001f16:	2101      	movs	r1, #1
 8001f18:	2049      	movs	r0, #73	; 0x49
 8001f1a:	f001 fc0a 	bl	8003732 <HAL_NVIC_SetPriority>

  HAL_TIM_Base_Stop_IT(&htim3);
 8001f1e:	484e      	ldr	r0, [pc, #312]	; (8002058 <main+0x19c>)
 8001f20:	f006 fdcf 	bl	8008ac2 <HAL_TIM_Base_Stop_IT>
  Variable_Defults();
 8001f24:	f000 fb0c 	bl	8002540 <Variable_Defults>
  HAL_Delay(500);
 8001f28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f2c:	f001 f88e 	bl	800304c <HAL_Delay>
  ADS_Init(1);
 8001f30:	2001      	movs	r0, #1
 8001f32:	f7fe fc2f 	bl	8000794 <ADS_Init>

  HAL_GPIO_WritePin(CS0,GPIO_PIN_SET);  //ADS SPI turn off
 8001f36:	2201      	movs	r2, #1
 8001f38:	2108      	movs	r1, #8
 8001f3a:	4848      	ldr	r0, [pc, #288]	; (800205c <main+0x1a0>)
 8001f3c:	f002 fafa 	bl	8004534 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS1,GPIO_PIN_SET);  //ADS SPI turn off
 8001f40:	2201      	movs	r2, #1
 8001f42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f46:	4843      	ldr	r0, [pc, #268]	; (8002054 <main+0x198>)
 8001f48:	f002 faf4 	bl	8004534 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS2,GPIO_PIN_SET);  //ADS SPI turn off
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f52:	4840      	ldr	r0, [pc, #256]	; (8002054 <main+0x198>)
 8001f54:	f002 faee 	bl	8004534 <HAL_GPIO_WritePin>


 if ((ADS_Read_Reg(0x00, 0) & 0x0F) != 0x0E) Error_Handler();
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f7fe fd3c 	bl	80009d8 <ADS_Read_Reg>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	2b0e      	cmp	r3, #14
 8001f68:	d001      	beq.n	8001f6e <main+0xb2>
 8001f6a:	f000 fc29 	bl	80027c0 <Error_Handler>
  if ((ADS_Read_Reg(0x00, 1) & 0x0F) != 0x0E) Error_Handler();
 8001f6e:	2101      	movs	r1, #1
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7fe fd31 	bl	80009d8 <ADS_Read_Reg>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	2b0e      	cmp	r3, #14
 8001f7e:	d001      	beq.n	8001f84 <main+0xc8>
 8001f80:	f000 fc1e 	bl	80027c0 <Error_Handler>
  if ((ADS_Read_Reg(0x00, 2) & 0x0F) != 0x0E) Error_Handler();
 8001f84:	2102      	movs	r1, #2
 8001f86:	2000      	movs	r0, #0
 8001f88:	f7fe fd26 	bl	80009d8 <ADS_Read_Reg>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	2b0e      	cmp	r3, #14
 8001f94:	d001      	beq.n	8001f9a <main+0xde>
 8001f96:	f000 fc13 	bl	80027c0 <Error_Handler>


  device_setting.linked_ear = 'n';
 8001f9a:	4b31      	ldr	r3, [pc, #196]	; (8002060 <main+0x1a4>)
 8001f9c:	226e      	movs	r2, #110	; 0x6e
 8001f9e:	749a      	strb	r2, [r3, #18]
  device_setting.TestSignal = 'T'; // test signal
 8001fa0:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <main+0x1a4>)
 8001fa2:	2254      	movs	r2, #84	; 0x54
 8001fa4:	701a      	strb	r2, [r3, #0]
  device_setting.SamplingRate = '8'; //2000 sps
 8001fa6:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <main+0x1a4>)
 8001fa8:	2238      	movs	r2, #56	; 0x38
 8001faa:	705a      	strb	r2, [r3, #1]
  device_setting.SRBConnection = 'C';  //
 8001fac:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <main+0x1a4>)
 8001fae:	2243      	movs	r2, #67	; 0x43
 8001fb0:	745a      	strb	r2, [r3, #17]
  device_setting.Gain = 24;
 8001fb2:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <main+0x1a4>)
 8001fb4:	2218      	movs	r2, #24
 8001fb6:	721a      	strb	r2, [r3, #8]
  device_setting.ExtraGain = 1;
 8001fb8:	4b29      	ldr	r3, [pc, #164]	; (8002060 <main+0x1a4>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	60da      	str	r2, [r3, #12]
  device_setting.Channels = 0xFFFF;  //
 8001fbe:	4b28      	ldr	r3, [pc, #160]	; (8002060 <main+0x1a4>)
 8001fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fc4:	605a      	str	r2, [r3, #4]
  device_setting.ExtraChannels = 0x00;  //extra channels off
 8001fc6:	4b26      	ldr	r3, [pc, #152]	; (8002060 <main+0x1a4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	725a      	strb	r2, [r3, #9]
  device_setting.derivation = 0xFF; //all derivation connected
 8001fcc:	4b24      	ldr	r3, [pc, #144]	; (8002060 <main+0x1a4>)
 8001fce:	22ff      	movs	r2, #255	; 0xff
 8001fd0:	74da      	strb	r2, [r3, #19]

  analog_setting(device_setting);  // write setting
 8001fd2:	4b23      	ldr	r3, [pc, #140]	; (8002060 <main+0x1a4>)
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	9200      	str	r2, [sp, #0]
 8001fd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fda:	f7fe ff31 	bl	8000e40 <analog_setting>

  if ((ADS_Read_Reg(0x00, 0) & 0x0F) != 0x0E) Error_Handler();
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7fe fcf9 	bl	80009d8 <ADS_Read_Reg>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	2b0e      	cmp	r3, #14
 8001fee:	d001      	beq.n	8001ff4 <main+0x138>
 8001ff0:	f000 fbe6 	bl	80027c0 <Error_Handler>
  if ((ADS_Read_Reg(0x00, 1) & 0x0F) != 0x0E) Error_Handler();
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7fe fcee 	bl	80009d8 <ADS_Read_Reg>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	2b0e      	cmp	r3, #14
 8002004:	d001      	beq.n	800200a <main+0x14e>
 8002006:	f000 fbdb 	bl	80027c0 <Error_Handler>
  if ((ADS_Read_Reg(0x00, 2) & 0x0F) != 0x0E) Error_Handler();
 800200a:	2102      	movs	r1, #2
 800200c:	2000      	movs	r0, #0
 800200e:	f7fe fce3 	bl	80009d8 <ADS_Read_Reg>
 8002012:	4603      	mov	r3, r0
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	2b0e      	cmp	r3, #14
 800201a:	d001      	beq.n	8002020 <main+0x164>
 800201c:	f000 fbd0 	bl	80027c0 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(CSdelay);
 8002020:	2001      	movs	r0, #1
 8002022:	f001 f813 	bl	800304c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim3);
 8002026:	480c      	ldr	r0, [pc, #48]	; (8002058 <main+0x19c>)
 8002028:	f006 fd27 	bl	8008a7a <HAL_TIM_Base_Start_IT>
  light_pattern(1);
 800202c:	2001      	movs	r0, #1
 800202e:	f000 faed 	bl	800260c <light_pattern>

  //HAL_ADC_Start_DMA(&hadc1, ADCvals, 4);
  HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, 1);
 8002032:	2201      	movs	r2, #1
 8002034:	2104      	movs	r1, #4
 8002036:	4807      	ldr	r0, [pc, #28]	; (8002054 <main+0x198>)
 8002038:	f002 fa7c 	bl	8004534 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, 1);
 800203c:	2201      	movs	r2, #1
 800203e:	2108      	movs	r1, #8
 8002040:	4804      	ldr	r0, [pc, #16]	; (8002054 <main+0x198>)
 8002042:	f002 fa77 	bl	8004534 <HAL_GPIO_WritePin>

  //float V25 = 0.76;
  //float Avg_Slope = 2.5;
  //float Temp_ADVal = 0;
  HAL_Delay(200);
 8002046:	20c8      	movs	r0, #200	; 0xc8
 8002048:	f001 f800 	bl	800304c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SystemResponseUSB();
 800204c:	f000 f89c 	bl	8002188 <SystemResponseUSB>
 8002050:	e7fc      	b.n	800204c <main+0x190>
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	200004e8 	.word	0x200004e8
 800205c:	40020800 	.word	0x40020800
 8002060:	2000038c 	.word	0x2000038c

08002064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b094      	sub	sp, #80	; 0x50
 8002068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800206a:	f107 0320 	add.w	r3, r7, #32
 800206e:	2230      	movs	r2, #48	; 0x30
 8002070:	2100      	movs	r1, #0
 8002072:	4618      	mov	r0, r3
 8002074:	f00a fdba 	bl	800cbec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	4b28      	ldr	r3, [pc, #160]	; (8002130 <SystemClock_Config+0xcc>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	4a27      	ldr	r2, [pc, #156]	; (8002130 <SystemClock_Config+0xcc>)
 8002092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002096:	6413      	str	r3, [r2, #64]	; 0x40
 8002098:	4b25      	ldr	r3, [pc, #148]	; (8002130 <SystemClock_Config+0xcc>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020a4:	2300      	movs	r3, #0
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	4b22      	ldr	r3, [pc, #136]	; (8002134 <SystemClock_Config+0xd0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a21      	ldr	r2, [pc, #132]	; (8002134 <SystemClock_Config+0xd0>)
 80020ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <SystemClock_Config+0xd0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020c0:	2301      	movs	r3, #1
 80020c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80020c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ca:	2302      	movs	r3, #2
 80020cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80020d4:	2319      	movs	r3, #25
 80020d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80020d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80020dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020de:	2302      	movs	r3, #2
 80020e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80020e2:	2307      	movs	r3, #7
 80020e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020e6:	f107 0320 	add.w	r3, r7, #32
 80020ea:	4618      	mov	r0, r3
 80020ec:	f005 fb6e 	bl	80077cc <HAL_RCC_OscConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80020f6:	f000 fb63 	bl	80027c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020fa:	230f      	movs	r3, #15
 80020fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020fe:	2302      	movs	r3, #2
 8002100:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002106:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800210a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800210c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002110:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	2105      	movs	r1, #5
 8002118:	4618      	mov	r0, r3
 800211a:	f005 fdc7 	bl	8007cac <HAL_RCC_ClockConfig>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002124:	f000 fb4c 	bl	80027c0 <Error_Handler>
  }
}
 8002128:	bf00      	nop
 800212a:	3750      	adds	r7, #80	; 0x50
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40023800 	.word	0x40023800
 8002134:	40007000 	.word	0x40007000

08002138 <CDC_ReceiveCallBack>:

/* USER CODE BEGIN 4 */
void CDC_ReceiveCallBack(uint8_t *buf, uint32_t len)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
	int i;
	for (i=0; i<32; i++)
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	e00b      	b.n	8002160 <CDC_ReceiveCallBack+0x28>
			recivBuff[i] = buf[i];
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	7819      	ldrb	r1, [r3, #0]
 8002150:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <CDC_ReceiveCallBack+0x48>)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4413      	add	r3, r2
 8002156:	460a      	mov	r2, r1
 8002158:	701a      	strb	r2, [r3, #0]
	for (i=0; i<32; i++)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	3301      	adds	r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b1f      	cmp	r3, #31
 8002164:	ddf0      	ble.n	8002148 <CDC_ReceiveCallBack+0x10>
	SetLED(3,3,1,3);
 8002166:	2303      	movs	r3, #3
 8002168:	2201      	movs	r2, #1
 800216a:	2103      	movs	r1, #3
 800216c:	2003      	movs	r0, #3
 800216e:	f7ff fcfd 	bl	8001b6c <SetLED>
	new_data_flag_usb = 1;
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <CDC_ReceiveCallBack+0x4c>)
 8002174:	2201      	movs	r2, #1
 8002176:	601a      	str	r2, [r3, #0]
}
 8002178:	bf00      	nop
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000344 	.word	0x20000344
 8002184:	2000021c 	.word	0x2000021c

08002188 <SystemResponseUSB>:


void SystemResponseUSB(void)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b085      	sub	sp, #20
 800218c:	af02      	add	r7, sp, #8

	if (new_data_flag_usb == 1 )
 800218e:	4b97      	ldr	r3, [pc, #604]	; (80023ec <SystemResponseUSB+0x264>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b01      	cmp	r3, #1
 8002194:	f040 819c 	bne.w	80024d0 <SystemResponseUSB+0x348>
		{

			if (recivBuff[0]=='U' && recivBuff[1]=='8' && recivBuff[2]=='_')
 8002198:	4b95      	ldr	r3, [pc, #596]	; (80023f0 <SystemResponseUSB+0x268>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b55      	cmp	r3, #85	; 0x55
 800219e:	f040 818e 	bne.w	80024be <SystemResponseUSB+0x336>
 80021a2:	4b93      	ldr	r3, [pc, #588]	; (80023f0 <SystemResponseUSB+0x268>)
 80021a4:	785b      	ldrb	r3, [r3, #1]
 80021a6:	2b38      	cmp	r3, #56	; 0x38
 80021a8:	f040 8189 	bne.w	80024be <SystemResponseUSB+0x336>
 80021ac:	4b90      	ldr	r3, [pc, #576]	; (80023f0 <SystemResponseUSB+0x268>)
 80021ae:	789b      	ldrb	r3, [r3, #2]
 80021b0:	2b5f      	cmp	r3, #95	; 0x5f
 80021b2:	f040 8184 	bne.w	80024be <SystemResponseUSB+0x336>
				{
					if ( recivBuff[3]=='R') HAL_NVIC_SystemReset();
 80021b6:	4b8e      	ldr	r3, [pc, #568]	; (80023f0 <SystemResponseUSB+0x268>)
 80021b8:	78db      	ldrb	r3, [r3, #3]
 80021ba:	2b52      	cmp	r3, #82	; 0x52
 80021bc:	d102      	bne.n	80021c4 <SystemResponseUSB+0x3c>
 80021be:	f001 fae2 	bl	8003786 <HAL_NVIC_SystemReset>
 80021c2:	e17c      	b.n	80024be <SystemResponseUSB+0x336>
					else if ( recivBuff[3]=='B' && RDATACflag==0)   //System Begin
 80021c4:	4b8a      	ldr	r3, [pc, #552]	; (80023f0 <SystemResponseUSB+0x268>)
 80021c6:	78db      	ldrb	r3, [r3, #3]
 80021c8:	2b42      	cmp	r3, #66	; 0x42
 80021ca:	d122      	bne.n	8002212 <SystemResponseUSB+0x8a>
 80021cc:	4b89      	ldr	r3, [pc, #548]	; (80023f4 <SystemResponseUSB+0x26c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d11e      	bne.n	8002212 <SystemResponseUSB+0x8a>
									{
										device_stat = 1;
 80021d4:	4b88      	ldr	r3, [pc, #544]	; (80023f8 <SystemResponseUSB+0x270>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
										HAL_TIM_Base_Stop_IT(&htim3);
 80021da:	4888      	ldr	r0, [pc, #544]	; (80023fc <SystemResponseUSB+0x274>)
 80021dc:	f006 fc71 	bl	8008ac2 <HAL_TIM_Base_Stop_IT>
										HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, 0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2104      	movs	r1, #4
 80021e4:	4886      	ldr	r0, [pc, #536]	; (8002400 <SystemResponseUSB+0x278>)
 80021e6:	f002 f9a5 	bl	8004534 <HAL_GPIO_WritePin>
										HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2108      	movs	r1, #8
 80021ee:	4884      	ldr	r0, [pc, #528]	; (8002400 <SystemResponseUSB+0x278>)
 80021f0:	f002 f9a0 	bl	8004534 <HAL_GPIO_WritePin>
										//if (HAL_I2C_IsDeviceReady(&hi2c3, 0x10, 1, 100) == HAL_OK) start_i2c_data();
										if (huge_stat) start_i2c_data();
 80021f4:	4b83      	ldr	r3, [pc, #524]	; (8002404 <SystemResponseUSB+0x27c>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <SystemResponseUSB+0x78>
 80021fc:	f7ff fe1e 	bl	8001e3c <start_i2c_data>
										sample_number = 0;
 8002200:	4b81      	ldr	r3, [pc, #516]	; (8002408 <SystemResponseUSB+0x280>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
										light_pattern(2);
 8002206:	2002      	movs	r0, #2
 8002208:	f000 fa00 	bl	800260c <light_pattern>
										ADS_Start_data_full();
 800220c:	f7ff faee 	bl	80017ec <ADS_Start_data_full>
 8002210:	e155      	b.n	80024be <SystemResponseUSB+0x336>
									}

					else if ( recivBuff[3]=='E' && RDATACflag==1)
 8002212:	4b77      	ldr	r3, [pc, #476]	; (80023f0 <SystemResponseUSB+0x268>)
 8002214:	78db      	ldrb	r3, [r3, #3]
 8002216:	2b45      	cmp	r3, #69	; 0x45
 8002218:	d128      	bne.n	800226c <SystemResponseUSB+0xe4>
 800221a:	4b76      	ldr	r3, [pc, #472]	; (80023f4 <SystemResponseUSB+0x26c>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d124      	bne.n	800226c <SystemResponseUSB+0xe4>
									{
						  HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, 1);
 8002222:	2201      	movs	r2, #1
 8002224:	2104      	movs	r1, #4
 8002226:	4876      	ldr	r0, [pc, #472]	; (8002400 <SystemResponseUSB+0x278>)
 8002228:	f002 f984 	bl	8004534 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, 1);
 800222c:	2201      	movs	r2, #1
 800222e:	2108      	movs	r1, #8
 8002230:	4873      	ldr	r0, [pc, #460]	; (8002400 <SystemResponseUSB+0x278>)
 8002232:	f002 f97f 	bl	8004534 <HAL_GPIO_WritePin>
										 device_stat = 0;
 8002236:	4b70      	ldr	r3, [pc, #448]	; (80023f8 <SystemResponseUSB+0x270>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
										 light_pattern(1);
 800223c:	2001      	movs	r0, #1
 800223e:	f000 f9e5 	bl	800260c <light_pattern>
										 SetLED(3,0,3,3);
 8002242:	2303      	movs	r3, #3
 8002244:	2203      	movs	r2, #3
 8002246:	2100      	movs	r1, #0
 8002248:	2003      	movs	r0, #3
 800224a:	f7ff fc8f 	bl	8001b6c <SetLED>
										 ADS_Stop_data_Full();
 800224e:	f7ff fb05 	bl	800185c <ADS_Stop_data_Full>
										 Write_Flash(flash_address, Read_Flash(flash_address)+1);
 8002252:	486e      	ldr	r0, [pc, #440]	; (800240c <SystemResponseUSB+0x284>)
 8002254:	f000 f966 	bl	8002524 <Read_Flash>
 8002258:	4603      	mov	r3, r0
 800225a:	3301      	adds	r3, #1
 800225c:	4619      	mov	r1, r3
 800225e:	486b      	ldr	r0, [pc, #428]	; (800240c <SystemResponseUSB+0x284>)
 8002260:	f000 f940 	bl	80024e4 <Write_Flash>
										 HAL_TIM_Base_Start_IT(&htim3);
 8002264:	4865      	ldr	r0, [pc, #404]	; (80023fc <SystemResponseUSB+0x274>)
 8002266:	f006 fc08 	bl	8008a7a <HAL_TIM_Base_Start_IT>
 800226a:	e128      	b.n	80024be <SystemResponseUSB+0x336>
//
//							CDC_Transmit_FS(transBuff, 32);
//							HAL_Delay(50);
//							light_pattern(1);
//						}
						else if ( recivBuff[3]=='s' && RDATACflag==0  ) // 's' for new setting format
 800226c:	4b60      	ldr	r3, [pc, #384]	; (80023f0 <SystemResponseUSB+0x268>)
 800226e:	78db      	ldrb	r3, [r3, #3]
 8002270:	2b73      	cmp	r3, #115	; 0x73
 8002272:	f040 8124 	bne.w	80024be <SystemResponseUSB+0x336>
 8002276:	4b5f      	ldr	r3, [pc, #380]	; (80023f4 <SystemResponseUSB+0x26c>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 811f 	bne.w	80024be <SystemResponseUSB+0x336>
						{
							app_version = 1;
 8002280:	4b63      	ldr	r3, [pc, #396]	; (8002410 <SystemResponseUSB+0x288>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]
							light_pattern(3);
 8002286:	2003      	movs	r0, #3
 8002288:	f000 f9c0 	bl	800260c <light_pattern>

							device_setting.TestSignal = recivBuff[4];
 800228c:	4b58      	ldr	r3, [pc, #352]	; (80023f0 <SystemResponseUSB+0x268>)
 800228e:	791a      	ldrb	r2, [r3, #4]
 8002290:	4b60      	ldr	r3, [pc, #384]	; (8002414 <SystemResponseUSB+0x28c>)
 8002292:	701a      	strb	r2, [r3, #0]
							device_setting.SamplingRate = recivBuff[5];
 8002294:	4b56      	ldr	r3, [pc, #344]	; (80023f0 <SystemResponseUSB+0x268>)
 8002296:	795a      	ldrb	r2, [r3, #5]
 8002298:	4b5e      	ldr	r3, [pc, #376]	; (8002414 <SystemResponseUSB+0x28c>)
 800229a:	705a      	strb	r2, [r3, #1]
							device_setting.LeadoffMode = recivBuff[6];
 800229c:	4b54      	ldr	r3, [pc, #336]	; (80023f0 <SystemResponseUSB+0x268>)
 800229e:	799a      	ldrb	r2, [r3, #6]
 80022a0:	4b5c      	ldr	r3, [pc, #368]	; (8002414 <SystemResponseUSB+0x28c>)
 80022a2:	741a      	strb	r2, [r3, #16]
							device_setting.SRBConnection = recivBuff[7];
 80022a4:	4b52      	ldr	r3, [pc, #328]	; (80023f0 <SystemResponseUSB+0x268>)
 80022a6:	79da      	ldrb	r2, [r3, #7]
 80022a8:	4b5a      	ldr	r3, [pc, #360]	; (8002414 <SystemResponseUSB+0x28c>)
 80022aa:	745a      	strb	r2, [r3, #17]
							device_setting.Gain = recivBuff[8];
 80022ac:	4b50      	ldr	r3, [pc, #320]	; (80023f0 <SystemResponseUSB+0x268>)
 80022ae:	7a1a      	ldrb	r2, [r3, #8]
 80022b0:	4b58      	ldr	r3, [pc, #352]	; (8002414 <SystemResponseUSB+0x28c>)
 80022b2:	721a      	strb	r2, [r3, #8]
							device_setting.ExtraGain = recivBuff[9];
 80022b4:	4b4e      	ldr	r3, [pc, #312]	; (80023f0 <SystemResponseUSB+0x268>)
 80022b6:	7a5b      	ldrb	r3, [r3, #9]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b56      	ldr	r3, [pc, #344]	; (8002414 <SystemResponseUSB+0x28c>)
 80022bc:	60da      	str	r2, [r3, #12]

							device_setting.linked_ear = recivBuff[10];
 80022be:	4b4c      	ldr	r3, [pc, #304]	; (80023f0 <SystemResponseUSB+0x268>)
 80022c0:	7a9a      	ldrb	r2, [r3, #10]
 80022c2:	4b54      	ldr	r3, [pc, #336]	; (8002414 <SystemResponseUSB+0x28c>)
 80022c4:	749a      	strb	r2, [r3, #18]

							device_setting.Channels = 65536 * recivBuff[17] + 256 * recivBuff[16] + recivBuff[15];
 80022c6:	4b4a      	ldr	r3, [pc, #296]	; (80023f0 <SystemResponseUSB+0x268>)
 80022c8:	7c5b      	ldrb	r3, [r3, #17]
 80022ca:	021b      	lsls	r3, r3, #8
 80022cc:	4a48      	ldr	r2, [pc, #288]	; (80023f0 <SystemResponseUSB+0x268>)
 80022ce:	7c12      	ldrb	r2, [r2, #16]
 80022d0:	4413      	add	r3, r2
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	4a46      	ldr	r2, [pc, #280]	; (80023f0 <SystemResponseUSB+0x268>)
 80022d6:	7bd2      	ldrb	r2, [r2, #15]
 80022d8:	4413      	add	r3, r2
 80022da:	461a      	mov	r2, r3
 80022dc:	4b4d      	ldr	r3, [pc, #308]	; (8002414 <SystemResponseUSB+0x28c>)
 80022de:	605a      	str	r2, [r3, #4]
							device_setting.ExtraChannels = recivBuff[18];
 80022e0:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <SystemResponseUSB+0x268>)
 80022e2:	7c9a      	ldrb	r2, [r3, #18]
 80022e4:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <SystemResponseUSB+0x28c>)
 80022e6:	725a      	strb	r2, [r3, #9]
							//device_setting.derivation = recivBuff[19];
							device_setting.derivation = 0x00;
 80022e8:	4b4a      	ldr	r3, [pc, #296]	; (8002414 <SystemResponseUSB+0x28c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	74da      	strb	r2, [r3, #19]

							analog_setting(device_setting);  // write setting
 80022ee:	4b49      	ldr	r3, [pc, #292]	; (8002414 <SystemResponseUSB+0x28c>)
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	9200      	str	r2, [sp, #0]
 80022f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022f6:	f7fe fda3 	bl	8000e40 <analog_setting>

							huge_colors[0]= recivBuff[20];
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <SystemResponseUSB+0x268>)
 80022fc:	7d1a      	ldrb	r2, [r3, #20]
 80022fe:	4b46      	ldr	r3, [pc, #280]	; (8002418 <SystemResponseUSB+0x290>)
 8002300:	701a      	strb	r2, [r3, #0]
							huge_colors[1]= recivBuff[21];
 8002302:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <SystemResponseUSB+0x268>)
 8002304:	7d5a      	ldrb	r2, [r3, #21]
 8002306:	4b44      	ldr	r3, [pc, #272]	; (8002418 <SystemResponseUSB+0x290>)
 8002308:	705a      	strb	r2, [r3, #1]
							huge_colors[2]= recivBuff[22];
 800230a:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <SystemResponseUSB+0x268>)
 800230c:	7d9a      	ldrb	r2, [r3, #22]
 800230e:	4b42      	ldr	r3, [pc, #264]	; (8002418 <SystemResponseUSB+0x290>)
 8002310:	709a      	strb	r2, [r3, #2]
							huge_colors[3]= recivBuff[23];
 8002312:	4b37      	ldr	r3, [pc, #220]	; (80023f0 <SystemResponseUSB+0x268>)
 8002314:	7dda      	ldrb	r2, [r3, #23]
 8002316:	4b40      	ldr	r3, [pc, #256]	; (8002418 <SystemResponseUSB+0x290>)
 8002318:	70da      	strb	r2, [r3, #3]

							for (unsigned char i = 0; i < 24; i++)   // read back written setting
 800231a:	2300      	movs	r3, #0
 800231c:	71fb      	strb	r3, [r7, #7]
 800231e:	e00c      	b.n	800233a <SystemResponseUSB+0x1b2>
									transBuff[i] = ADS_Read_Reg(i, 2);
 8002320:	79fc      	ldrb	r4, [r7, #7]
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	2102      	movs	r1, #2
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe fb56 	bl	80009d8 <ADS_Read_Reg>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	4b3a      	ldr	r3, [pc, #232]	; (800241c <SystemResponseUSB+0x294>)
 8002332:	551a      	strb	r2, [r3, r4]
							for (unsigned char i = 0; i < 24; i++)   // read back written setting
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	3301      	adds	r3, #1
 8002338:	71fb      	strb	r3, [r7, #7]
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	2b17      	cmp	r3, #23
 800233e:	d9ef      	bls.n	8002320 <SystemResponseUSB+0x198>


							transBuff[22] = device_setting.derivation;
 8002340:	4b34      	ldr	r3, [pc, #208]	; (8002414 <SystemResponseUSB+0x28c>)
 8002342:	7cda      	ldrb	r2, [r3, #19]
 8002344:	4b35      	ldr	r3, [pc, #212]	; (800241c <SystemResponseUSB+0x294>)
 8002346:	759a      	strb	r2, [r3, #22]
							transBuff[23] = num_of_huges;
 8002348:	4b35      	ldr	r3, [pc, #212]	; (8002420 <SystemResponseUSB+0x298>)
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	4b33      	ldr	r3, [pc, #204]	; (800241c <SystemResponseUSB+0x294>)
 800234e:	75da      	strb	r2, [r3, #23]

							transBuff[24] = firmware_version;     //program version
 8002350:	4b32      	ldr	r3, [pc, #200]	; (800241c <SystemResponseUSB+0x294>)
 8002352:	221a      	movs	r2, #26
 8002354:	761a      	strb	r2, [r3, #24]
							transBuff[25] = device_uniqeID >> 8;
 8002356:	4b31      	ldr	r3, [pc, #196]	; (800241c <SystemResponseUSB+0x294>)
 8002358:	22a4      	movs	r2, #164	; 0xa4
 800235a:	765a      	strb	r2, [r3, #25]
							transBuff[26] = (uint8_t)device_uniqeID + W1 + 2*W2 + 4*W3 + 8*W4 + 16*W5 + 32*W6;
 800235c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002360:	4830      	ldr	r0, [pc, #192]	; (8002424 <SystemResponseUSB+0x29c>)
 8002362:	f002 f8cf 	bl	8004504 <HAL_GPIO_ReadPin>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461c      	mov	r4, r3
 8002374:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002378:	482a      	ldr	r0, [pc, #168]	; (8002424 <SystemResponseUSB+0x29c>)
 800237a:	f002 f8c3 	bl	8004504 <HAL_GPIO_ReadPin>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <SystemResponseUSB+0x200>
 8002384:	2302      	movs	r3, #2
 8002386:	e000      	b.n	800238a <SystemResponseUSB+0x202>
 8002388:	2300      	movs	r3, #0
 800238a:	4423      	add	r3, r4
 800238c:	b2dc      	uxtb	r4, r3
 800238e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002392:	4824      	ldr	r0, [pc, #144]	; (8002424 <SystemResponseUSB+0x29c>)
 8002394:	f002 f8b6 	bl	8004504 <HAL_GPIO_ReadPin>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <SystemResponseUSB+0x21a>
 800239e:	2304      	movs	r3, #4
 80023a0:	e000      	b.n	80023a4 <SystemResponseUSB+0x21c>
 80023a2:	2300      	movs	r3, #0
 80023a4:	4423      	add	r3, r4
 80023a6:	b2dc      	uxtb	r4, r3
 80023a8:	2140      	movs	r1, #64	; 0x40
 80023aa:	4815      	ldr	r0, [pc, #84]	; (8002400 <SystemResponseUSB+0x278>)
 80023ac:	f002 f8aa 	bl	8004504 <HAL_GPIO_ReadPin>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <SystemResponseUSB+0x232>
 80023b6:	2308      	movs	r3, #8
 80023b8:	e000      	b.n	80023bc <SystemResponseUSB+0x234>
 80023ba:	2300      	movs	r3, #0
 80023bc:	4423      	add	r3, r4
 80023be:	b2dc      	uxtb	r4, r3
 80023c0:	2120      	movs	r1, #32
 80023c2:	480f      	ldr	r0, [pc, #60]	; (8002400 <SystemResponseUSB+0x278>)
 80023c4:	f002 f89e 	bl	8004504 <HAL_GPIO_ReadPin>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <SystemResponseUSB+0x24a>
 80023ce:	2310      	movs	r3, #16
 80023d0:	e000      	b.n	80023d4 <SystemResponseUSB+0x24c>
 80023d2:	2300      	movs	r3, #0
 80023d4:	4423      	add	r3, r4
 80023d6:	b2dc      	uxtb	r4, r3
 80023d8:	2110      	movs	r1, #16
 80023da:	4809      	ldr	r0, [pc, #36]	; (8002400 <SystemResponseUSB+0x278>)
 80023dc:	f002 f892 	bl	8004504 <HAL_GPIO_ReadPin>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d120      	bne.n	8002428 <SystemResponseUSB+0x2a0>
 80023e6:	2320      	movs	r3, #32
 80023e8:	e01f      	b.n	800242a <SystemResponseUSB+0x2a2>
 80023ea:	bf00      	nop
 80023ec:	2000021c 	.word	0x2000021c
 80023f0:	20000344 	.word	0x20000344
 80023f4:	2000036c 	.word	0x2000036c
 80023f8:	20000220 	.word	0x20000220
 80023fc:	200004e8 	.word	0x200004e8
 8002400:	40021000 	.word	0x40021000
 8002404:	20000225 	.word	0x20000225
 8002408:	20000340 	.word	0x20000340
 800240c:	080e0000 	.word	0x080e0000
 8002410:	20000000 	.word	0x20000000
 8002414:	2000038c 	.word	0x2000038c
 8002418:	20000008 	.word	0x20000008
 800241c:	200003bc 	.word	0x200003bc
 8002420:	20000364 	.word	0x20000364
 8002424:	40020800 	.word	0x40020800
 8002428:	2300      	movs	r3, #0
 800242a:	4423      	add	r3, r4
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <SystemResponseUSB+0x350>)
 8002430:	769a      	strb	r2, [r3, #26]
							transBuff[27] = device_series_ID;
 8002432:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <SystemResponseUSB+0x350>)
 8002434:	2230      	movs	r2, #48	; 0x30
 8002436:	76da      	strb	r2, [r3, #27]
							uint32_t flashdata = Read_Flash(flash_address);  //flash data (number of 'stop' used)
 8002438:	4828      	ldr	r0, [pc, #160]	; (80024dc <SystemResponseUSB+0x354>)
 800243a:	f000 f873 	bl	8002524 <Read_Flash>
 800243e:	6038      	str	r0, [r7, #0]
							transBuff[28] = flashdata >> 16 ;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	0c1b      	lsrs	r3, r3, #16
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <SystemResponseUSB+0x350>)
 8002448:	771a      	strb	r2, [r3, #28]
							transBuff[29] = flashdata >> 8 ;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <SystemResponseUSB+0x350>)
 8002452:	775a      	strb	r2, [r3, #29]
							transBuff[30] = flashdata;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <SystemResponseUSB+0x350>)
 800245a:	779a      	strb	r2, [r3, #30]
							transBuff[31] = company_ID;
 800245c:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <SystemResponseUSB+0x350>)
 800245e:	2290      	movs	r2, #144	; 0x90
 8002460:	77da      	strb	r2, [r3, #31]
							HAL_Delay(50);
 8002462:	2032      	movs	r0, #50	; 0x32
 8002464:	f000 fdf2 	bl	800304c <HAL_Delay>
							CDC_Transmit_FS(transBuff, 32);
 8002468:	2120      	movs	r1, #32
 800246a:	481b      	ldr	r0, [pc, #108]	; (80024d8 <SystemResponseUSB+0x350>)
 800246c:	f009 ff34 	bl	800c2d8 <CDC_Transmit_FS>
							HAL_Delay(50);
 8002470:	2032      	movs	r0, #50	; 0x32
 8002472:	f000 fdeb 	bl	800304c <HAL_Delay>
							light_pattern(1);
 8002476:	2001      	movs	r0, #1
 8002478:	f000 f8c8 	bl	800260c <light_pattern>

						   if ((ADS_Read_Reg(0x00, 0) & 0x0F) != 0x0E) Error_Handler();
 800247c:	2100      	movs	r1, #0
 800247e:	2000      	movs	r0, #0
 8002480:	f7fe faaa 	bl	80009d8 <ADS_Read_Reg>
 8002484:	4603      	mov	r3, r0
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	2b0e      	cmp	r3, #14
 800248c:	d001      	beq.n	8002492 <SystemResponseUSB+0x30a>
 800248e:	f000 f997 	bl	80027c0 <Error_Handler>
						  if ((ADS_Read_Reg(0x00, 1) & 0x0F) != 0x0E) Error_Handler();
 8002492:	2101      	movs	r1, #1
 8002494:	2000      	movs	r0, #0
 8002496:	f7fe fa9f 	bl	80009d8 <ADS_Read_Reg>
 800249a:	4603      	mov	r3, r0
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	2b0e      	cmp	r3, #14
 80024a2:	d001      	beq.n	80024a8 <SystemResponseUSB+0x320>
 80024a4:	f000 f98c 	bl	80027c0 <Error_Handler>
						   if ((ADS_Read_Reg(0x00, 2) & 0x0F) != 0x0E) Error_Handler();
 80024a8:	2102      	movs	r1, #2
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7fe fa94 	bl	80009d8 <ADS_Read_Reg>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	2b0e      	cmp	r3, #14
 80024b8:	d001      	beq.n	80024be <SystemResponseUSB+0x336>
 80024ba:	f000 f981 	bl	80027c0 <Error_Handler>

						}
				}
	     new_data_flag_usb = 0;
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <SystemResponseUSB+0x358>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
			 SetLED(3,3,0,3);
 80024c4:	2303      	movs	r3, #3
 80024c6:	2200      	movs	r2, #0
 80024c8:	2103      	movs	r1, #3
 80024ca:	2003      	movs	r0, #3
 80024cc:	f7ff fb4e 	bl	8001b6c <SetLED>
    }
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	200003bc 	.word	0x200003bc
 80024dc:	080e0000 	.word	0x080e0000
 80024e0:	2000021c 	.word	0x2000021c

080024e4 <Write_Flash>:

void Write_Flash(uint32_t address, uint32_t data)
{
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
     HAL_FLASH_Unlock();
 80024ee:	f001 fcc7 	bl	8003e80 <HAL_FLASH_Unlock>
     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <Write_Flash+0x3c>)
 80024f4:	22b3      	movs	r2, #179	; 0xb3
 80024f6:	60da      	str	r2, [r3, #12]
     FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 80024f8:	2102      	movs	r1, #2
 80024fa:	200b      	movs	r0, #11
 80024fc:	f001 fe20 	bl	8004140 <FLASH_Erase_Sector>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address, data);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f04f 0400 	mov.w	r4, #0
 8002506:	461a      	mov	r2, r3
 8002508:	4623      	mov	r3, r4
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	2002      	movs	r0, #2
 800250e:	f001 fc63 	bl	8003dd8 <HAL_FLASH_Program>
     HAL_FLASH_Lock();
 8002512:	f001 fcd7 	bl	8003ec4 <HAL_FLASH_Lock>
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	bd90      	pop	{r4, r7, pc}
 800251e:	bf00      	nop
 8002520:	40023c00 	.word	0x40023c00

08002524 <Read_Flash>:

uint32_t Read_Flash(uint32_t address)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
		uint32_t Flash_data;
		Flash_data = *(uint32_t*) address;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	60fb      	str	r3, [r7, #12]
		return Flash_data;
 8002532:	68fb      	ldr	r3, [r7, #12]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <Variable_Defults>:

void Variable_Defults(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
	 /* Variables Initialize Values */
		for (unsigned char i = 0; i < 28; i++)	transBuff[i] = i + 20;
 8002546:	2300      	movs	r3, #0
 8002548:	71fb      	strb	r3, [r7, #7]
 800254a:	e008      	b.n	800255e <Variable_Defults+0x1e>
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	79fa      	ldrb	r2, [r7, #7]
 8002550:	3214      	adds	r2, #20
 8002552:	b2d1      	uxtb	r1, r2
 8002554:	4a2a      	ldr	r2, [pc, #168]	; (8002600 <Variable_Defults+0xc0>)
 8002556:	54d1      	strb	r1, [r2, r3]
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	3301      	adds	r3, #1
 800255c:	71fb      	strb	r3, [r7, #7]
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	2b1b      	cmp	r3, #27
 8002562:	d9f3      	bls.n	800254c <Variable_Defults+0xc>
		transBuff[24] = 11;
 8002564:	4b26      	ldr	r3, [pc, #152]	; (8002600 <Variable_Defults+0xc0>)
 8002566:	220b      	movs	r2, #11
 8002568:	761a      	strb	r2, [r3, #24]
		transBuff[25] = 0;
 800256a:	4b25      	ldr	r3, [pc, #148]	; (8002600 <Variable_Defults+0xc0>)
 800256c:	2200      	movs	r2, #0
 800256e:	765a      	strb	r2, [r3, #25]

		for (unsigned char i = 0; i < 27; i++)	dummyclk[i] = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	71bb      	strb	r3, [r7, #6]
 8002574:	e006      	b.n	8002584 <Variable_Defults+0x44>
 8002576:	79bb      	ldrb	r3, [r7, #6]
 8002578:	4a22      	ldr	r2, [pc, #136]	; (8002604 <Variable_Defults+0xc4>)
 800257a:	2100      	movs	r1, #0
 800257c:	54d1      	strb	r1, [r2, r3]
 800257e:	79bb      	ldrb	r3, [r7, #6]
 8002580:	3301      	adds	r3, #1
 8002582:	71bb      	strb	r3, [r7, #6]
 8002584:	79bb      	ldrb	r3, [r7, #6]
 8002586:	2b1a      	cmp	r3, #26
 8002588:	d9f5      	bls.n	8002576 <Variable_Defults+0x36>
		RDATACflag = 0;
 800258a:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <Variable_Defults+0xc8>)
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]

		// Complite SetUp Notification
		SetLED(1,1,1,1); HAL_Delay(500);
 8002590:	2301      	movs	r3, #1
 8002592:	2201      	movs	r2, #1
 8002594:	2101      	movs	r1, #1
 8002596:	2001      	movs	r0, #1
 8002598:	f7ff fae8 	bl	8001b6c <SetLED>
 800259c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025a0:	f000 fd54 	bl	800304c <HAL_Delay>
		SetLED(1,0,0,0); HAL_Delay(100);
 80025a4:	2300      	movs	r3, #0
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	2001      	movs	r0, #1
 80025ac:	f7ff fade 	bl	8001b6c <SetLED>
 80025b0:	2064      	movs	r0, #100	; 0x64
 80025b2:	f000 fd4b 	bl	800304c <HAL_Delay>
		SetLED(0,1,0,0); HAL_Delay(100);
 80025b6:	2300      	movs	r3, #0
 80025b8:	2200      	movs	r2, #0
 80025ba:	2101      	movs	r1, #1
 80025bc:	2000      	movs	r0, #0
 80025be:	f7ff fad5 	bl	8001b6c <SetLED>
 80025c2:	2064      	movs	r0, #100	; 0x64
 80025c4:	f000 fd42 	bl	800304c <HAL_Delay>
		SetLED(0,0,1,0); HAL_Delay(100);
 80025c8:	2300      	movs	r3, #0
 80025ca:	2201      	movs	r2, #1
 80025cc:	2100      	movs	r1, #0
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7ff facc 	bl	8001b6c <SetLED>
 80025d4:	2064      	movs	r0, #100	; 0x64
 80025d6:	f000 fd39 	bl	800304c <HAL_Delay>
		SetLED(0,0,0,1); HAL_Delay(100);
 80025da:	2301      	movs	r3, #1
 80025dc:	2200      	movs	r2, #0
 80025de:	2100      	movs	r1, #0
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7ff fac3 	bl	8001b6c <SetLED>
 80025e6:	2064      	movs	r0, #100	; 0x64
 80025e8:	f000 fd30 	bl	800304c <HAL_Delay>
		SetLED(0,0,0,0);
 80025ec:	2300      	movs	r3, #0
 80025ee:	2200      	movs	r2, #0
 80025f0:	2100      	movs	r1, #0
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7ff faba 	bl	8001b6c <SetLED>
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	200003bc 	.word	0x200003bc
 8002604:	200003a0 	.word	0x200003a0
 8002608:	2000036c 	.word	0x2000036c

0800260c <light_pattern>:



void light_pattern(int8_t patt)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
	if (patt == 0)  // off
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d112      	bne.n	8002644 <light_pattern+0x38>
		{
			HAL_GPIO_WritePin(STAT1_GPIO_Port, STAT1_Pin, GPIO_PIN_RESET);
 800261e:	2200      	movs	r2, #0
 8002620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002624:	4840      	ldr	r0, [pc, #256]	; (8002728 <light_pattern+0x11c>)
 8002626:	f001 ff85 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT2_GPIO_Port, STAT2_Pin, GPIO_PIN_RESET);
 800262a:	2200      	movs	r2, #0
 800262c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002630:	483d      	ldr	r0, [pc, #244]	; (8002728 <light_pattern+0x11c>)
 8002632:	f001 ff7f 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT3_GPIO_Port, STAT3_Pin, GPIO_PIN_RESET);
 8002636:	2200      	movs	r2, #0
 8002638:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800263c:	483a      	ldr	r0, [pc, #232]	; (8002728 <light_pattern+0x11c>)
 800263e:	f001 ff79 	bl	8004534 <HAL_GPIO_WritePin>
		{
			HAL_GPIO_WritePin(STAT1_GPIO_Port, STAT1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(STAT2_GPIO_Port, STAT2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(STAT3_GPIO_Port, STAT3_Pin, GPIO_PIN_SET);
		}
}
 8002642:	e06d      	b.n	8002720 <light_pattern+0x114>
	else if (patt == 1)  // white simple (idle)
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d112      	bne.n	8002672 <light_pattern+0x66>
		HAL_GPIO_WritePin(STAT1_GPIO_Port, STAT1_Pin, GPIO_PIN_SET);
 800264c:	2201      	movs	r2, #1
 800264e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002652:	4835      	ldr	r0, [pc, #212]	; (8002728 <light_pattern+0x11c>)
 8002654:	f001 ff6e 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT2_GPIO_Port, STAT2_Pin, GPIO_PIN_RESET);
 8002658:	2200      	movs	r2, #0
 800265a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800265e:	4832      	ldr	r0, [pc, #200]	; (8002728 <light_pattern+0x11c>)
 8002660:	f001 ff68 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT3_GPIO_Port, STAT3_Pin, GPIO_PIN_RESET);
 8002664:	2200      	movs	r2, #0
 8002666:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800266a:	482f      	ldr	r0, [pc, #188]	; (8002728 <light_pattern+0x11c>)
 800266c:	f001 ff62 	bl	8004534 <HAL_GPIO_WritePin>
}
 8002670:	e056      	b.n	8002720 <light_pattern+0x114>
	else if (patt == 2)  // White pattern (data gathering)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d112      	bne.n	80026a0 <light_pattern+0x94>
			HAL_GPIO_WritePin(STAT1_GPIO_Port, STAT1_Pin, GPIO_PIN_RESET);
 800267a:	2200      	movs	r2, #0
 800267c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002680:	4829      	ldr	r0, [pc, #164]	; (8002728 <light_pattern+0x11c>)
 8002682:	f001 ff57 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT2_GPIO_Port, STAT2_Pin, GPIO_PIN_SET);
 8002686:	2201      	movs	r2, #1
 8002688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800268c:	4826      	ldr	r0, [pc, #152]	; (8002728 <light_pattern+0x11c>)
 800268e:	f001 ff51 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT3_GPIO_Port, STAT3_Pin, GPIO_PIN_RESET);
 8002692:	2200      	movs	r2, #0
 8002694:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002698:	4823      	ldr	r0, [pc, #140]	; (8002728 <light_pattern+0x11c>)
 800269a:	f001 ff4b 	bl	8004534 <HAL_GPIO_WritePin>
}
 800269e:	e03f      	b.n	8002720 <light_pattern+0x114>
	else if (patt == 3)  // blink blue (setting)
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d112      	bne.n	80026ce <light_pattern+0xc2>
			HAL_GPIO_WritePin(STAT1_GPIO_Port, STAT1_Pin, GPIO_PIN_SET);
 80026a8:	2201      	movs	r2, #1
 80026aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026ae:	481e      	ldr	r0, [pc, #120]	; (8002728 <light_pattern+0x11c>)
 80026b0:	f001 ff40 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT2_GPIO_Port, STAT2_Pin, GPIO_PIN_SET);
 80026b4:	2201      	movs	r2, #1
 80026b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026ba:	481b      	ldr	r0, [pc, #108]	; (8002728 <light_pattern+0x11c>)
 80026bc:	f001 ff3a 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT3_GPIO_Port, STAT3_Pin, GPIO_PIN_RESET);
 80026c0:	2200      	movs	r2, #0
 80026c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026c6:	4818      	ldr	r0, [pc, #96]	; (8002728 <light_pattern+0x11c>)
 80026c8:	f001 ff34 	bl	8004534 <HAL_GPIO_WritePin>
}
 80026cc:	e028      	b.n	8002720 <light_pattern+0x114>
	else if (patt == 4)  // blink blue (setting)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d112      	bne.n	80026fc <light_pattern+0xf0>
			HAL_GPIO_WritePin(STAT1_GPIO_Port, STAT1_Pin, GPIO_PIN_RESET);
 80026d6:	2200      	movs	r2, #0
 80026d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026dc:	4812      	ldr	r0, [pc, #72]	; (8002728 <light_pattern+0x11c>)
 80026de:	f001 ff29 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT2_GPIO_Port, STAT2_Pin, GPIO_PIN_RESET);
 80026e2:	2200      	movs	r2, #0
 80026e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026e8:	480f      	ldr	r0, [pc, #60]	; (8002728 <light_pattern+0x11c>)
 80026ea:	f001 ff23 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT3_GPIO_Port, STAT3_Pin, GPIO_PIN_SET);
 80026ee:	2201      	movs	r2, #1
 80026f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026f4:	480c      	ldr	r0, [pc, #48]	; (8002728 <light_pattern+0x11c>)
 80026f6:	f001 ff1d 	bl	8004534 <HAL_GPIO_WritePin>
}
 80026fa:	e011      	b.n	8002720 <light_pattern+0x114>
			HAL_GPIO_WritePin(STAT1_GPIO_Port, STAT1_Pin, GPIO_PIN_SET);
 80026fc:	2201      	movs	r2, #1
 80026fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002702:	4809      	ldr	r0, [pc, #36]	; (8002728 <light_pattern+0x11c>)
 8002704:	f001 ff16 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT2_GPIO_Port, STAT2_Pin, GPIO_PIN_SET);
 8002708:	2201      	movs	r2, #1
 800270a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800270e:	4806      	ldr	r0, [pc, #24]	; (8002728 <light_pattern+0x11c>)
 8002710:	f001 ff10 	bl	8004534 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT3_GPIO_Port, STAT3_Pin, GPIO_PIN_SET);
 8002714:	2201      	movs	r2, #1
 8002716:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800271a:	4803      	ldr	r0, [pc, #12]	; (8002728 <light_pattern+0x11c>)
 800271c:	f001 ff0a 	bl	8004534 <HAL_GPIO_WritePin>
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40020400 	.word	0x40020400

0800272c <HAL_I2C_MasterTxCpltCallback>:
/* ************************************** */
/* ************************************** */
/* ************************************** */

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
			HAL_I2C_Master_Receive_IT(&hi2c3, 0x10, i2cIN, 4);
 8002734:	2304      	movs	r3, #4
 8002736:	4a04      	ldr	r2, [pc, #16]	; (8002748 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 8002738:	2110      	movs	r1, #16
 800273a:	4804      	ldr	r0, [pc, #16]	; (800274c <HAL_I2C_MasterTxCpltCallback+0x20>)
 800273c:	f002 f930 	bl	80049a0 <HAL_I2C_Master_Receive_IT>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000010 	.word	0x20000010
 800274c:	200002ec 	.word	0x200002ec

08002750 <HAL_I2C_MasterRxCpltCallback>:


void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

		if (i2cIN[0] == 'S')
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_I2C_MasterRxCpltCallback+0x44>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b53      	cmp	r3, #83	; 0x53
 800275e:	d108      	bne.n	8002772 <HAL_I2C_MasterRxCpltCallback+0x22>
		{
			__NOP();
 8002760:	bf00      	nop
			huge_stat = 1;
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <HAL_I2C_MasterRxCpltCallback+0x48>)
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]
			num_of_huges = i2cIN[2];
 8002768:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_I2C_MasterRxCpltCallback+0x44>)
 800276a:	789a      	ldrb	r2, [r3, #2]
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_I2C_MasterRxCpltCallback+0x4c>)
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	e007      	b.n	8002782 <HAL_I2C_MasterRxCpltCallback+0x32>
		}
		else if (i2cIN[0] == 'D')
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_I2C_MasterRxCpltCallback+0x44>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b44      	cmp	r3, #68	; 0x44
 8002778:	d103      	bne.n	8002782 <HAL_I2C_MasterRxCpltCallback+0x32>
		{
			user_huge_values = i2cIN[3];
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_I2C_MasterRxCpltCallback+0x44>)
 800277c:	78da      	ldrb	r2, [r3, #3]
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <HAL_I2C_MasterRxCpltCallback+0x50>)
 8002780:	701a      	strb	r2, [r3, #0]
		}

		huge_updated = 1;
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <HAL_I2C_MasterRxCpltCallback+0x54>)
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]

}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	20000010 	.word	0x20000010
 8002798:	20000225 	.word	0x20000225
 800279c:	20000364 	.word	0x20000364
 80027a0:	20000224 	.word	0x20000224
 80027a4:	20000004 	.word	0x20000004

080027a8 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
//	if (i2cIN[3] != 0xfa)
//		SetLED (2,2,2,2);
	__NOP();
 80027b0:	bf00      	nop
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	light_pattern(4);
 80027c4:	2004      	movs	r0, #4
 80027c6:	f7ff ff21 	bl	800260c <light_pattern>
	SetLED(0,0,0,0);
 80027ca:	2300      	movs	r3, #0
 80027cc:	2200      	movs	r2, #0
 80027ce:	2100      	movs	r1, #0
 80027d0:	2000      	movs	r0, #0
 80027d2:	f7ff f9cb 	bl	8001b6c <SetLED>
	HAL_TIM_Base_Stop_IT(&htim3);
 80027d6:	480b      	ldr	r0, [pc, #44]	; (8002804 <Error_Handler+0x44>)
 80027d8:	f006 f973 	bl	8008ac2 <HAL_TIM_Base_Stop_IT>
	while(1)
	{
		SetLED(1,1,1,1);
 80027dc:	2301      	movs	r3, #1
 80027de:	2201      	movs	r2, #1
 80027e0:	2101      	movs	r1, #1
 80027e2:	2001      	movs	r0, #1
 80027e4:	f7ff f9c2 	bl	8001b6c <SetLED>
		HAL_Delay(150);
 80027e8:	2096      	movs	r0, #150	; 0x96
 80027ea:	f000 fc2f 	bl	800304c <HAL_Delay>
		SetLED(0,0,0,0);
 80027ee:	2300      	movs	r3, #0
 80027f0:	2200      	movs	r2, #0
 80027f2:	2100      	movs	r1, #0
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7ff f9b9 	bl	8001b6c <SetLED>
		HAL_Delay(150);
 80027fa:	2096      	movs	r0, #150	; 0x96
 80027fc:	f000 fc26 	bl	800304c <HAL_Delay>
		SetLED(1,1,1,1);
 8002800:	e7ec      	b.n	80027dc <Error_Handler+0x1c>
 8002802:	bf00      	nop
 8002804:	200004e8 	.word	0x200004e8

08002808 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800280c:	4b17      	ldr	r3, [pc, #92]	; (800286c <MX_SPI1_Init+0x64>)
 800280e:	4a18      	ldr	r2, [pc, #96]	; (8002870 <MX_SPI1_Init+0x68>)
 8002810:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002812:	4b16      	ldr	r3, [pc, #88]	; (800286c <MX_SPI1_Init+0x64>)
 8002814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002818:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <MX_SPI1_Init+0x64>)
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <MX_SPI1_Init+0x64>)
 8002822:	2200      	movs	r2, #0
 8002824:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <MX_SPI1_Init+0x64>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <MX_SPI1_Init+0x64>)
 800282e:	2201      	movs	r2, #1
 8002830:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002832:	4b0e      	ldr	r3, [pc, #56]	; (800286c <MX_SPI1_Init+0x64>)
 8002834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002838:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800283a:	4b0c      	ldr	r3, [pc, #48]	; (800286c <MX_SPI1_Init+0x64>)
 800283c:	2218      	movs	r2, #24
 800283e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002840:	4b0a      	ldr	r3, [pc, #40]	; (800286c <MX_SPI1_Init+0x64>)
 8002842:	2200      	movs	r2, #0
 8002844:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <MX_SPI1_Init+0x64>)
 8002848:	2200      	movs	r2, #0
 800284a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800284c:	4b07      	ldr	r3, [pc, #28]	; (800286c <MX_SPI1_Init+0x64>)
 800284e:	2200      	movs	r2, #0
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <MX_SPI1_Init+0x64>)
 8002854:	220a      	movs	r2, #10
 8002856:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002858:	4804      	ldr	r0, [pc, #16]	; (800286c <MX_SPI1_Init+0x64>)
 800285a:	f005 fbdf 	bl	800801c <HAL_SPI_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002864:	f7ff ffac 	bl	80027c0 <Error_Handler>
  }

}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}
 800286c:	2000043c 	.word	0x2000043c
 8002870:	40013000 	.word	0x40013000

08002874 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <HAL_SPI_MspInit+0x94>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d133      	bne.n	80028fe <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <HAL_SPI_MspInit+0x98>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	4a1b      	ldr	r2, [pc, #108]	; (800290c <HAL_SPI_MspInit+0x98>)
 80028a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028a4:	6453      	str	r3, [r2, #68]	; 0x44
 80028a6:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_SPI_MspInit+0x98>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <HAL_SPI_MspInit+0x98>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a14      	ldr	r2, [pc, #80]	; (800290c <HAL_SPI_MspInit+0x98>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b12      	ldr	r3, [pc, #72]	; (800290c <HAL_SPI_MspInit+0x98>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028ce:	23e0      	movs	r3, #224	; 0xe0
 80028d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028da:	2303      	movs	r3, #3
 80028dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028de:	2305      	movs	r3, #5
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e2:	f107 0314 	add.w	r3, r7, #20
 80028e6:	4619      	mov	r1, r3
 80028e8:	4809      	ldr	r0, [pc, #36]	; (8002910 <HAL_SPI_MspInit+0x9c>)
 80028ea:	f001 fc71 	bl	80041d0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2100      	movs	r1, #0
 80028f2:	2023      	movs	r0, #35	; 0x23
 80028f4:	f000 ff1d 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80028f8:	2023      	movs	r0, #35	; 0x23
 80028fa:	f000 ff36 	bl	800376a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80028fe:	bf00      	nop
 8002900:	3728      	adds	r7, #40	; 0x28
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40013000 	.word	0x40013000
 800290c:	40023800 	.word	0x40023800
 8002910:	40020000 	.word	0x40020000

08002914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <HAL_MspInit+0x4c>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	4a0f      	ldr	r2, [pc, #60]	; (8002960 <HAL_MspInit+0x4c>)
 8002924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002928:	6453      	str	r3, [r2, #68]	; 0x44
 800292a:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <HAL_MspInit+0x4c>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_MspInit+0x4c>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a08      	ldr	r2, [pc, #32]	; (8002960 <HAL_MspInit+0x4c>)
 8002940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_MspInit+0x4c>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800

08002964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002976:	e7fe      	b.n	8002976 <HardFault_Handler+0x4>

08002978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800297c:	e7fe      	b.n	800297c <MemManage_Handler+0x4>

0800297e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002982:	e7fe      	b.n	8002982 <BusFault_Handler+0x4>

08002984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002988:	e7fe      	b.n	8002988 <UsageFault_Handler+0x4>

0800298a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b8:	f000 fb28 	bl	800300c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}

080029c0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	 int i =0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	607b      	str	r3, [r7, #4]

			if (DRDY == 0 && RDATACflag == 1)  // new data arrival & be in data gathering
 80029ca:	2102      	movs	r1, #2
 80029cc:	4888      	ldr	r0, [pc, #544]	; (8002bf0 <EXTI1_IRQHandler+0x230>)
 80029ce:	f001 fd99 	bl	8004504 <HAL_GPIO_ReadPin>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f040 8103 	bne.w	8002be0 <EXTI1_IRQHandler+0x220>
 80029da:	4b86      	ldr	r3, [pc, #536]	; (8002bf4 <EXTI1_IRQHandler+0x234>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	f040 80fe 	bne.w	8002be0 <EXTI1_IRQHandler+0x220>
			{
					HAL_GPIO_WritePin(CS1,GPIO_PIN_RESET);  //ADS SPI turn on
 80029e4:	2200      	movs	r2, #0
 80029e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029ea:	4883      	ldr	r0, [pc, #524]	; (8002bf8 <EXTI1_IRQHandler+0x238>)
 80029ec:	f001 fda2 	bl	8004534 <HAL_GPIO_WritePin>
					HAL_SPI_TransmitReceive(&hspi1,dummyclk,chdata1,27, 1);
 80029f0:	2301      	movs	r3, #1
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	231b      	movs	r3, #27
 80029f6:	4a81      	ldr	r2, [pc, #516]	; (8002bfc <EXTI1_IRQHandler+0x23c>)
 80029f8:	4981      	ldr	r1, [pc, #516]	; (8002c00 <EXTI1_IRQHandler+0x240>)
 80029fa:	4882      	ldr	r0, [pc, #520]	; (8002c04 <EXTI1_IRQHandler+0x244>)
 80029fc:	f005 fca6 	bl	800834c <HAL_SPI_TransmitReceive>
					HAL_GPIO_WritePin(CS1,GPIO_PIN_SET);  //ADS SPI turn off
 8002a00:	2201      	movs	r2, #1
 8002a02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a06:	487c      	ldr	r0, [pc, #496]	; (8002bf8 <EXTI1_IRQHandler+0x238>)
 8002a08:	f001 fd94 	bl	8004534 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(CS0,GPIO_PIN_RESET);  //ADS SPI turn on
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2108      	movs	r1, #8
 8002a10:	487d      	ldr	r0, [pc, #500]	; (8002c08 <EXTI1_IRQHandler+0x248>)
 8002a12:	f001 fd8f 	bl	8004534 <HAL_GPIO_WritePin>
					HAL_SPI_TransmitReceive(&hspi1,dummyclk,chdata0,27, 1);
 8002a16:	2301      	movs	r3, #1
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	231b      	movs	r3, #27
 8002a1c:	4a7b      	ldr	r2, [pc, #492]	; (8002c0c <EXTI1_IRQHandler+0x24c>)
 8002a1e:	4978      	ldr	r1, [pc, #480]	; (8002c00 <EXTI1_IRQHandler+0x240>)
 8002a20:	4878      	ldr	r0, [pc, #480]	; (8002c04 <EXTI1_IRQHandler+0x244>)
 8002a22:	f005 fc93 	bl	800834c <HAL_SPI_TransmitReceive>
					HAL_GPIO_WritePin(CS0,GPIO_PIN_SET);  //ADS SPI turn off
 8002a26:	2201      	movs	r2, #1
 8002a28:	2108      	movs	r1, #8
 8002a2a:	4877      	ldr	r0, [pc, #476]	; (8002c08 <EXTI1_IRQHandler+0x248>)
 8002a2c:	f001 fd82 	bl	8004534 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(CS2,GPIO_PIN_RESET);  //ADS SPI turn on
 8002a30:	2200      	movs	r2, #0
 8002a32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a36:	4870      	ldr	r0, [pc, #448]	; (8002bf8 <EXTI1_IRQHandler+0x238>)
 8002a38:	f001 fd7c 	bl	8004534 <HAL_GPIO_WritePin>
					HAL_SPI_TransmitReceive(&hspi1,dummyclk,chdata2,27, 1);
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	231b      	movs	r3, #27
 8002a42:	4a73      	ldr	r2, [pc, #460]	; (8002c10 <EXTI1_IRQHandler+0x250>)
 8002a44:	496e      	ldr	r1, [pc, #440]	; (8002c00 <EXTI1_IRQHandler+0x240>)
 8002a46:	486f      	ldr	r0, [pc, #444]	; (8002c04 <EXTI1_IRQHandler+0x244>)
 8002a48:	f005 fc80 	bl	800834c <HAL_SPI_TransmitReceive>
					HAL_GPIO_WritePin(CS2,GPIO_PIN_SET);  //ADS SPI turn off
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a52:	4869      	ldr	r0, [pc, #420]	; (8002bf8 <EXTI1_IRQHandler+0x238>)
 8002a54:	f001 fd6e 	bl	8004534 <HAL_GPIO_WritePin>





				  if (app_version)
 8002a58:	4b6e      	ldr	r3, [pc, #440]	; (8002c14 <EXTI1_IRQHandler+0x254>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d05a      	beq.n	8002b16 <EXTI1_IRQHandler+0x156>
					{
						transBuff[0] = sample_number >> 16;
 8002a60:	4b6d      	ldr	r3, [pc, #436]	; (8002c18 <EXTI1_IRQHandler+0x258>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	141b      	asrs	r3, r3, #16
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	4b6c      	ldr	r3, [pc, #432]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002a6a:	701a      	strb	r2, [r3, #0]
						transBuff[1] = sample_number >> 8;
 8002a6c:	4b6a      	ldr	r3, [pc, #424]	; (8002c18 <EXTI1_IRQHandler+0x258>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	121b      	asrs	r3, r3, #8
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	4b69      	ldr	r3, [pc, #420]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002a76:	705a      	strb	r2, [r3, #1]
						transBuff[2] = sample_number >> 0;
 8002a78:	4b67      	ldr	r3, [pc, #412]	; (8002c18 <EXTI1_IRQHandler+0x258>)
 8002a7a:	781a      	ldrb	r2, [r3, #0]
 8002a7c:	4b67      	ldr	r3, [pc, #412]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002a7e:	709a      	strb	r2, [r3, #2]
						transBuff[3] = device_series_ID;
 8002a80:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002a82:	2230      	movs	r2, #48	; 0x30
 8002a84:	70da      	strb	r2, [r3, #3]
						transBuff[4] = user_huge_values;
 8002a86:	4b66      	ldr	r3, [pc, #408]	; (8002c20 <EXTI1_IRQHandler+0x260>)
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	4b64      	ldr	r3, [pc, #400]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002a8c:	711a      	strb	r2, [r3, #4]
						transBuff[5] = 0;
 8002a8e:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	715a      	strb	r2, [r3, #5]
						transBuff[6] = 0;
 8002a94:	4b61      	ldr	r3, [pc, #388]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	719a      	strb	r2, [r3, #6]
						transBuff[7] = 0;
 8002a9a:	4b60      	ldr	r3, [pc, #384]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	71da      	strb	r2, [r3, #7]
						for (i=8;i<32;i++)	transBuff[i] = chdata2[i-5];
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	e00b      	b.n	8002abe <EXTI1_IRQHandler+0xfe>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3b05      	subs	r3, #5
 8002aaa:	4a59      	ldr	r2, [pc, #356]	; (8002c10 <EXTI1_IRQHandler+0x250>)
 8002aac:	5cd1      	ldrb	r1, [r2, r3]
 8002aae:	4a5b      	ldr	r2, [pc, #364]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	460a      	mov	r2, r1
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3301      	adds	r3, #1
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b1f      	cmp	r3, #31
 8002ac2:	ddf0      	ble.n	8002aa6 <EXTI1_IRQHandler+0xe6>
						for (i=32;i<56;i++)	transBuff[i] = chdata1[i-29];
 8002ac4:	2320      	movs	r3, #32
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	e00b      	b.n	8002ae2 <EXTI1_IRQHandler+0x122>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3b1d      	subs	r3, #29
 8002ace:	4a4b      	ldr	r2, [pc, #300]	; (8002bfc <EXTI1_IRQHandler+0x23c>)
 8002ad0:	5cd1      	ldrb	r1, [r2, r3]
 8002ad2:	4a52      	ldr	r2, [pc, #328]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	460a      	mov	r2, r1
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b37      	cmp	r3, #55	; 0x37
 8002ae6:	ddf0      	ble.n	8002aca <EXTI1_IRQHandler+0x10a>
						for (i=56;i<80;i++)	transBuff[i] = chdata0[i-53];
 8002ae8:	2338      	movs	r3, #56	; 0x38
 8002aea:	607b      	str	r3, [r7, #4]
 8002aec:	e00b      	b.n	8002b06 <EXTI1_IRQHandler+0x146>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3b35      	subs	r3, #53	; 0x35
 8002af2:	4a46      	ldr	r2, [pc, #280]	; (8002c0c <EXTI1_IRQHandler+0x24c>)
 8002af4:	5cd1      	ldrb	r1, [r2, r3]
 8002af6:	4a49      	ldr	r2, [pc, #292]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4413      	add	r3, r2
 8002afc:	460a      	mov	r2, r1
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3301      	adds	r3, #1
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b4f      	cmp	r3, #79	; 0x4f
 8002b0a:	ddf0      	ble.n	8002aee <EXTI1_IRQHandler+0x12e>
						CDC_Transmit_FS(transBuff, 80);
 8002b0c:	2150      	movs	r1, #80	; 0x50
 8002b0e:	4843      	ldr	r0, [pc, #268]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002b10:	f009 fbe2 	bl	800c2d8 <CDC_Transmit_FS>
 8002b14:	e040      	b.n	8002b98 <EXTI1_IRQHandler+0x1d8>
					}
					else
					{
						for (i=0;i<24;i++)	transBuff[i] = chdata1[i+3];
 8002b16:	2300      	movs	r3, #0
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	e00b      	b.n	8002b34 <EXTI1_IRQHandler+0x174>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3303      	adds	r3, #3
 8002b20:	4a36      	ldr	r2, [pc, #216]	; (8002bfc <EXTI1_IRQHandler+0x23c>)
 8002b22:	5cd1      	ldrb	r1, [r2, r3]
 8002b24:	4a3d      	ldr	r2, [pc, #244]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	460a      	mov	r2, r1
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3301      	adds	r3, #1
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b17      	cmp	r3, #23
 8002b38:	ddf0      	ble.n	8002b1c <EXTI1_IRQHandler+0x15c>
						transBuff[24] = user_huge_values;
 8002b3a:	4b39      	ldr	r3, [pc, #228]	; (8002c20 <EXTI1_IRQHandler+0x260>)
 8002b3c:	781a      	ldrb	r2, [r3, #0]
 8002b3e:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002b40:	761a      	strb	r2, [r3, #24]
						transBuff[25] = device_series_ID;
 8002b42:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002b44:	2230      	movs	r2, #48	; 0x30
 8002b46:	765a      	strb	r2, [r3, #25]
						for (i=26;i<50;i++)	transBuff[i] = chdata0[i-23];
 8002b48:	231a      	movs	r3, #26
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	e00b      	b.n	8002b66 <EXTI1_IRQHandler+0x1a6>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3b17      	subs	r3, #23
 8002b52:	4a2e      	ldr	r2, [pc, #184]	; (8002c0c <EXTI1_IRQHandler+0x24c>)
 8002b54:	5cd1      	ldrb	r1, [r2, r3]
 8002b56:	4a31      	ldr	r2, [pc, #196]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	460a      	mov	r2, r1
 8002b5e:	701a      	strb	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3301      	adds	r3, #1
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b31      	cmp	r3, #49	; 0x31
 8002b6a:	ddf0      	ble.n	8002b4e <EXTI1_IRQHandler+0x18e>
						for (i=50;i<74;i++)	transBuff[i] = chdata2[i-47];
 8002b6c:	2332      	movs	r3, #50	; 0x32
 8002b6e:	607b      	str	r3, [r7, #4]
 8002b70:	e00b      	b.n	8002b8a <EXTI1_IRQHandler+0x1ca>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3b2f      	subs	r3, #47	; 0x2f
 8002b76:	4a26      	ldr	r2, [pc, #152]	; (8002c10 <EXTI1_IRQHandler+0x250>)
 8002b78:	5cd1      	ldrb	r1, [r2, r3]
 8002b7a:	4a28      	ldr	r2, [pc, #160]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4413      	add	r3, r2
 8002b80:	460a      	mov	r2, r1
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3301      	adds	r3, #1
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b49      	cmp	r3, #73	; 0x49
 8002b8e:	ddf0      	ble.n	8002b72 <EXTI1_IRQHandler+0x1b2>
						CDC_Transmit_FS(transBuff, 74);
 8002b90:	214a      	movs	r1, #74	; 0x4a
 8002b92:	4822      	ldr	r0, [pc, #136]	; (8002c1c <EXTI1_IRQHandler+0x25c>)
 8002b94:	f009 fba0 	bl	800c2d8 <CDC_Transmit_FS>
					}

			    sample_number++;
 8002b98:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <EXTI1_IRQHandler+0x258>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <EXTI1_IRQHandler+0x258>)
 8002ba2:	701a      	strb	r2, [r3, #0]
					//user_huge_values =
					get_i2c_data();
 8002ba4:	f7ff f972 	bl	8001e8c <get_i2c_data>



				 //indoor LED blink
					 if (++countalarm > (10 * (device_setting.SamplingRate - 48)))
 8002ba8:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <EXTI1_IRQHandler+0x264>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	3301      	adds	r3, #1
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <EXTI1_IRQHandler+0x264>)
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <EXTI1_IRQHandler+0x264>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <EXTI1_IRQHandler+0x268>)
 8002bbc:	785b      	ldrb	r3, [r3, #1]
 8002bbe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4299      	cmp	r1, r3
 8002bcc:	dd08      	ble.n	8002be0 <EXTI1_IRQHandler+0x220>
						{
							countalarm=0;
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <EXTI1_IRQHandler+0x264>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
							SetLED(3,2,3,3);
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	2102      	movs	r1, #2
 8002bda:	2003      	movs	r0, #3
 8002bdc:	f7fe ffc6 	bl	8001b6c <SetLED>
						}
			}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002be0:	2002      	movs	r0, #2
 8002be2:	f001 fcdb 	bl	800459c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40020000 	.word	0x40020000
 8002bf4:	2000036c 	.word	0x2000036c
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	200004cc 	.word	0x200004cc
 8002c00:	200003a0 	.word	0x200003a0
 8002c04:	2000043c 	.word	0x2000043c
 8002c08:	40020800 	.word	0x40020800
 8002c0c:	200004b0 	.word	0x200004b0
 8002c10:	20000494 	.word	0x20000494
 8002c14:	20000000 	.word	0x20000000
 8002c18:	20000340 	.word	0x20000340
 8002c1c:	200003bc 	.word	0x200003bc
 8002c20:	20000224 	.word	0x20000224
 8002c24:	200004e7 	.word	0x200004e7
 8002c28:	2000038c 	.word	0x2000038c

08002c2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	check_i2c_slaves_IT();
 8002c30:	f7ff f8ba 	bl	8001da8 <check_i2c_slaves_IT>
	SetLED (2,3,3,3);
 8002c34:	2303      	movs	r3, #3
 8002c36:	2203      	movs	r2, #3
 8002c38:	2103      	movs	r1, #3
 8002c3a:	2002      	movs	r0, #2
 8002c3c:	f7fe ff96 	bl	8001b6c <SetLED>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <TIM3_IRQHandler+0x20>)
 8002c42:	f005 ff69 	bl	8008b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200004e8 	.word	0x200004e8

08002c50 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <SPI1_IRQHandler+0x10>)
 8002c56:	f005 fd1b 	bl	8008690 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	2000043c 	.word	0x2000043c

08002c64 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <DMA2_Stream0_IRQHandler+0x10>)
 8002c6a:	f000 fe6d 	bl	8003948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000280 	.word	0x20000280

08002c78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <OTG_FS_IRQHandler+0x10>)
 8002c7e:	f003 fd72 	bl	8006766 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20001024 	.word	0x20001024

08002c8c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002c90:	4802      	ldr	r0, [pc, #8]	; (8002c9c <I2C3_EV_IRQHandler+0x10>)
 8002c92:	f001 ff82 	bl	8004b9a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200002ec 	.word	0x200002ec

08002ca0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002ca4:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <I2C3_ER_IRQHandler+0x10>)
 8002ca6:	f002 f8e5 	bl	8004e74 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200002ec 	.word	0x200002ec

08002cb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	e00a      	b.n	8002cdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cc6:	f3af 8000 	nop.w
 8002cca:	4601      	mov	r1, r0
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	60ba      	str	r2, [r7, #8]
 8002cd2:	b2ca      	uxtb	r2, r1
 8002cd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	dbf0      	blt.n	8002cc6 <_read+0x12>
	}

return len;
 8002ce4:	687b      	ldr	r3, [r7, #4]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b086      	sub	sp, #24
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	e009      	b.n	8002d14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	60ba      	str	r2, [r7, #8]
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	3301      	adds	r3, #1
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	dbf1      	blt.n	8002d00 <_write+0x12>
	}
	return len;
 8002d1c:	687b      	ldr	r3, [r7, #4]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <_close>:

int _close(int file)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
	return -1;
 8002d2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d4e:	605a      	str	r2, [r3, #4]
	return 0;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <_isatty>:

int _isatty(int file)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
	return 1;
 8002d66:	2301      	movs	r3, #1
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
	return 0;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d98:	4a14      	ldr	r2, [pc, #80]	; (8002dec <_sbrk+0x5c>)
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <_sbrk+0x60>)
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <_sbrk+0x64>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <_sbrk+0x64>)
 8002dae:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <_sbrk+0x68>)
 8002db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <_sbrk+0x64>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d207      	bcs.n	8002dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc0:	f009 feda 	bl	800cb78 <__errno>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	230c      	movs	r3, #12
 8002dc8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295
 8002dce:	e009      	b.n	8002de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd0:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <_sbrk+0x64>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dd6:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <_sbrk+0x64>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <_sbrk+0x64>)
 8002de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002de2:	68fb      	ldr	r3, [r7, #12]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20020000 	.word	0x20020000
 8002df0:	00006000 	.word	0x00006000
 8002df4:	20000228 	.word	0x20000228
 8002df8:	20001430 	.word	0x20001430

08002dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <SystemInit+0x28>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <SystemInit+0x28>)
 8002e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <SystemInit+0x28>)
 8002e12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e16:	609a      	str	r2, [r3, #8]
#endif
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e2e:	f107 0308 	add.w	r3, r7, #8
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e3c:	463b      	mov	r3, r7
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002e44:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002e46:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <MX_TIM3_Init+0x98>)
 8002e48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41999;
 8002e4a:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002e4c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002e50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e52:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 699;
 8002e58:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002e5a:	f240 22bb 	movw	r2, #699	; 0x2bb
 8002e5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e60:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e6c:	4813      	ldr	r0, [pc, #76]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002e6e:	f005 fdd9 	bl	8008a24 <HAL_TIM_Base_Init>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002e78:	f7ff fca2 	bl	80027c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e82:	f107 0308 	add.w	r3, r7, #8
 8002e86:	4619      	mov	r1, r3
 8002e88:	480c      	ldr	r0, [pc, #48]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002e8a:	f005 ff4d 	bl	8008d28 <HAL_TIM_ConfigClockSource>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002e94:	f7ff fc94 	bl	80027c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ea0:	463b      	mov	r3, r7
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4805      	ldr	r0, [pc, #20]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002ea6:	f006 f963 	bl	8009170 <HAL_TIMEx_MasterConfigSynchronization>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002eb0:	f7ff fc86 	bl	80027c0 <Error_Handler>
  }

}
 8002eb4:	bf00      	nop
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	200004e8 	.word	0x200004e8
 8002ec0:	40000400 	.word	0x40000400

08002ec4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <HAL_TIM_Base_MspInit+0x48>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d115      	bne.n	8002f02 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <HAL_TIM_Base_MspInit+0x4c>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	4a0c      	ldr	r2, [pc, #48]	; (8002f10 <HAL_TIM_Base_MspInit+0x4c>)
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_TIM_Base_MspInit+0x4c>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	201d      	movs	r0, #29
 8002ef8:	f000 fc1b 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002efc:	201d      	movs	r0, #29
 8002efe:	f000 fc34 	bl	800376a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40000400 	.word	0x40000400
 8002f10:	40023800 	.word	0x40023800

08002f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f1a:	e003      	b.n	8002f24 <LoopCopyDataInit>

08002f1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f22:	3104      	adds	r1, #4

08002f24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f24:	480b      	ldr	r0, [pc, #44]	; (8002f54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f2c:	d3f6      	bcc.n	8002f1c <CopyDataInit>
  ldr  r2, =_sbss
 8002f2e:	4a0b      	ldr	r2, [pc, #44]	; (8002f5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f30:	e002      	b.n	8002f38 <LoopFillZerobss>

08002f32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f34:	f842 3b04 	str.w	r3, [r2], #4

08002f38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f3c:	d3f9      	bcc.n	8002f32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f3e:	f7ff ff5d 	bl	8002dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f42:	f009 fe1f 	bl	800cb84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f46:	f7fe ffb9 	bl	8001ebc <main>
  bx  lr    
 8002f4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f50:	0800dbb8 	.word	0x0800dbb8
  ldr  r0, =_sdata
 8002f54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f58:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8002f5c:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8002f60:	20001430 	.word	0x20001430

08002f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f64:	e7fe      	b.n	8002f64 <ADC_IRQHandler>
	...

08002f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_Init+0x40>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0d      	ldr	r2, [pc, #52]	; (8002fa8 <HAL_Init+0x40>)
 8002f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_Init+0x40>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <HAL_Init+0x40>)
 8002f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_Init+0x40>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <HAL_Init+0x40>)
 8002f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f90:	2003      	movs	r0, #3
 8002f92:	f000 fbc3 	bl	800371c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f96:	2000      	movs	r0, #0
 8002f98:	f000 f808 	bl	8002fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f9c:	f7ff fcba 	bl	8002914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40023c00 	.word	0x40023c00

08002fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_InitTick+0x54>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4b12      	ldr	r3, [pc, #72]	; (8003004 <HAL_InitTick+0x58>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fbdf 	bl	800378e <HAL_SYSTICK_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e00e      	b.n	8002ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b0f      	cmp	r3, #15
 8002fde:	d80a      	bhi.n	8002ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe8:	f000 fba3 	bl	8003732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fec:	4a06      	ldr	r2, [pc, #24]	; (8003008 <HAL_InitTick+0x5c>)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e000      	b.n	8002ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20000014 	.word	0x20000014
 8003004:	2000001c 	.word	0x2000001c
 8003008:	20000018 	.word	0x20000018

0800300c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_IncTick+0x20>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_IncTick+0x24>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4413      	add	r3, r2
 800301c:	4a04      	ldr	r2, [pc, #16]	; (8003030 <HAL_IncTick+0x24>)
 800301e:	6013      	str	r3, [r2, #0]
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	2000001c 	.word	0x2000001c
 8003030:	20000528 	.word	0x20000528

08003034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return uwTick;
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <HAL_GetTick+0x14>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000528 	.word	0x20000528

0800304c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003054:	f7ff ffee 	bl	8003034 <HAL_GetTick>
 8003058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d005      	beq.n	8003072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <HAL_Delay+0x40>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4413      	add	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003072:	bf00      	nop
 8003074:	f7ff ffde 	bl	8003034 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	429a      	cmp	r2, r3
 8003082:	d8f7      	bhi.n	8003074 <HAL_Delay+0x28>
  {
  }
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	2000001c 	.word	0x2000001c

08003090 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e033      	b.n	800310e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fd fadc 	bl	800066c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f003 0310 	and.w	r3, r3, #16
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d118      	bne.n	8003100 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030d6:	f023 0302 	bic.w	r3, r3, #2
 80030da:	f043 0202 	orr.w	r2, r3, #2
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f93a 	bl	800335c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	f043 0201 	orr.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
 80030fe:	e001      	b.n	8003104 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x1c>
 8003130:	2302      	movs	r3, #2
 8003132:	e105      	b.n	8003340 <HAL_ADC_ConfigChannel+0x228>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b09      	cmp	r3, #9
 8003142:	d925      	bls.n	8003190 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68d9      	ldr	r1, [r3, #12]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	3b1e      	subs	r3, #30
 800315a:	2207      	movs	r2, #7
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43da      	mvns	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	400a      	ands	r2, r1
 8003168:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68d9      	ldr	r1, [r3, #12]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	b29b      	uxth	r3, r3
 800317a:	4618      	mov	r0, r3
 800317c:	4603      	mov	r3, r0
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4403      	add	r3, r0
 8003182:	3b1e      	subs	r3, #30
 8003184:	409a      	lsls	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	e022      	b.n	80031d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6919      	ldr	r1, [r3, #16]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	b29b      	uxth	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	2207      	movs	r2, #7
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43da      	mvns	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	400a      	ands	r2, r1
 80031b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6919      	ldr	r1, [r3, #16]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	4618      	mov	r0, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4403      	add	r3, r0
 80031cc:	409a      	lsls	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b06      	cmp	r3, #6
 80031dc:	d824      	bhi.n	8003228 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	3b05      	subs	r3, #5
 80031f0:	221f      	movs	r2, #31
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43da      	mvns	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	400a      	ands	r2, r1
 80031fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	4618      	mov	r0, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	3b05      	subs	r3, #5
 800321a:	fa00 f203 	lsl.w	r2, r0, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	635a      	str	r2, [r3, #52]	; 0x34
 8003226:	e04c      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b0c      	cmp	r3, #12
 800322e:	d824      	bhi.n	800327a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	3b23      	subs	r3, #35	; 0x23
 8003242:	221f      	movs	r2, #31
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43da      	mvns	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	400a      	ands	r2, r1
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	b29b      	uxth	r3, r3
 800325e:	4618      	mov	r0, r3
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	3b23      	subs	r3, #35	; 0x23
 800326c:	fa00 f203 	lsl.w	r2, r0, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
 8003278:	e023      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	3b41      	subs	r3, #65	; 0x41
 800328c:	221f      	movs	r2, #31
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43da      	mvns	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	400a      	ands	r2, r1
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	4618      	mov	r0, r3
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	3b41      	subs	r3, #65	; 0x41
 80032b6:	fa00 f203 	lsl.w	r2, r0, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032c2:	4b22      	ldr	r3, [pc, #136]	; (800334c <HAL_ADC_ConfigChannel+0x234>)
 80032c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a21      	ldr	r2, [pc, #132]	; (8003350 <HAL_ADC_ConfigChannel+0x238>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d109      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x1cc>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b12      	cmp	r3, #18
 80032d6:	d105      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a19      	ldr	r2, [pc, #100]	; (8003350 <HAL_ADC_ConfigChannel+0x238>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d123      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x21e>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b10      	cmp	r3, #16
 80032f4:	d003      	beq.n	80032fe <HAL_ADC_ConfigChannel+0x1e6>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b11      	cmp	r3, #17
 80032fc:	d11b      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b10      	cmp	r3, #16
 8003310:	d111      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003312:	4b10      	ldr	r3, [pc, #64]	; (8003354 <HAL_ADC_ConfigChannel+0x23c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a10      	ldr	r2, [pc, #64]	; (8003358 <HAL_ADC_ConfigChannel+0x240>)
 8003318:	fba2 2303 	umull	r2, r3, r2, r3
 800331c:	0c9a      	lsrs	r2, r3, #18
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003328:	e002      	b.n	8003330 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	3b01      	subs	r3, #1
 800332e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f9      	bne.n	800332a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	40012300 	.word	0x40012300
 8003350:	40012000 	.word	0x40012000
 8003354:	20000014 	.word	0x20000014
 8003358:	431bde83 	.word	0x431bde83

0800335c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003364:	4b79      	ldr	r3, [pc, #484]	; (800354c <ADC_Init+0x1f0>)
 8003366:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	431a      	orrs	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	021a      	lsls	r2, r3, #8
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6899      	ldr	r1, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	4a58      	ldr	r2, [pc, #352]	; (8003550 <ADC_Init+0x1f4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d022      	beq.n	800343a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003402:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6899      	ldr	r1, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6899      	ldr	r1, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	e00f      	b.n	800345a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003448:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003458:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0202 	bic.w	r2, r2, #2
 8003468:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6899      	ldr	r1, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	7e1b      	ldrb	r3, [r3, #24]
 8003474:	005a      	lsls	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01b      	beq.n	80034c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003496:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	3b01      	subs	r3, #1
 80034b4:	035a      	lsls	r2, r3, #13
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	e007      	b.n	80034d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	051a      	lsls	r2, r3, #20
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003504:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6899      	ldr	r1, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003512:	025a      	lsls	r2, r3, #9
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6899      	ldr	r1, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	029a      	lsls	r2, r3, #10
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	609a      	str	r2, [r3, #8]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	40012300 	.word	0x40012300
 8003550:	0f000001 	.word	0x0f000001

08003554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <__NVIC_SetPriorityGrouping+0x44>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003570:	4013      	ands	r3, r2
 8003572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800357c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003586:	4a04      	ldr	r2, [pc, #16]	; (8003598 <__NVIC_SetPriorityGrouping+0x44>)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	60d3      	str	r3, [r2, #12]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <__NVIC_GetPriorityGrouping+0x18>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	0a1b      	lsrs	r3, r3, #8
 80035a6:	f003 0307 	and.w	r3, r3, #7
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	db0b      	blt.n	80035e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	f003 021f 	and.w	r2, r3, #31
 80035d0:	4907      	ldr	r1, [pc, #28]	; (80035f0 <__NVIC_EnableIRQ+0x38>)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	2001      	movs	r0, #1
 80035da:	fa00 f202 	lsl.w	r2, r0, r2
 80035de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	e000e100 	.word	0xe000e100

080035f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	6039      	str	r1, [r7, #0]
 80035fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003604:	2b00      	cmp	r3, #0
 8003606:	db0a      	blt.n	800361e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	b2da      	uxtb	r2, r3
 800360c:	490c      	ldr	r1, [pc, #48]	; (8003640 <__NVIC_SetPriority+0x4c>)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	0112      	lsls	r2, r2, #4
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	440b      	add	r3, r1
 8003618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800361c:	e00a      	b.n	8003634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4908      	ldr	r1, [pc, #32]	; (8003644 <__NVIC_SetPriority+0x50>)
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	3b04      	subs	r3, #4
 800362c:	0112      	lsls	r2, r2, #4
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	440b      	add	r3, r1
 8003632:	761a      	strb	r2, [r3, #24]
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	e000e100 	.word	0xe000e100
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003648:	b480      	push	{r7}
 800364a:	b089      	sub	sp, #36	; 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f1c3 0307 	rsb	r3, r3, #7
 8003662:	2b04      	cmp	r3, #4
 8003664:	bf28      	it	cs
 8003666:	2304      	movcs	r3, #4
 8003668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3304      	adds	r3, #4
 800366e:	2b06      	cmp	r3, #6
 8003670:	d902      	bls.n	8003678 <NVIC_EncodePriority+0x30>
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3b03      	subs	r3, #3
 8003676:	e000      	b.n	800367a <NVIC_EncodePriority+0x32>
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800367c:	f04f 32ff 	mov.w	r2, #4294967295
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43da      	mvns	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	401a      	ands	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003690:	f04f 31ff 	mov.w	r1, #4294967295
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	fa01 f303 	lsl.w	r3, r1, r3
 800369a:	43d9      	mvns	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a0:	4313      	orrs	r3, r2
         );
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3724      	adds	r7, #36	; 0x24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036b4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <__NVIC_SystemReset+0x20>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80036c0:	4903      	ldr	r1, [pc, #12]	; (80036d0 <__NVIC_SystemReset+0x20>)
 80036c2:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <__NVIC_SystemReset+0x24>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60cb      	str	r3, [r1, #12]
 80036c8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80036cc:	bf00      	nop
 80036ce:	e7fd      	b.n	80036cc <__NVIC_SystemReset+0x1c>
 80036d0:	e000ed00 	.word	0xe000ed00
 80036d4:	05fa0004 	.word	0x05fa0004

080036d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e8:	d301      	bcc.n	80036ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ea:	2301      	movs	r3, #1
 80036ec:	e00f      	b.n	800370e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ee:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <SysTick_Config+0x40>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036f6:	210f      	movs	r1, #15
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	f7ff ff7a 	bl	80035f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <SysTick_Config+0x40>)
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003706:	4b04      	ldr	r3, [pc, #16]	; (8003718 <SysTick_Config+0x40>)
 8003708:	2207      	movs	r2, #7
 800370a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	e000e010 	.word	0xe000e010

0800371c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ff15 	bl	8003554 <__NVIC_SetPriorityGrouping>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003732:	b580      	push	{r7, lr}
 8003734:	b086      	sub	sp, #24
 8003736:	af00      	add	r7, sp, #0
 8003738:	4603      	mov	r3, r0
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003744:	f7ff ff2a 	bl	800359c <__NVIC_GetPriorityGrouping>
 8003748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	6978      	ldr	r0, [r7, #20]
 8003750:	f7ff ff7a 	bl	8003648 <NVIC_EncodePriority>
 8003754:	4602      	mov	r2, r0
 8003756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff ff49 	bl	80035f4 <__NVIC_SetPriority>
}
 8003762:	bf00      	nop
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	4603      	mov	r3, r0
 8003772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff ff1d 	bl	80035b8 <__NVIC_EnableIRQ>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800378a:	f7ff ff91 	bl	80036b0 <__NVIC_SystemReset>

0800378e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff ff9e 	bl	80036d8 <SysTick_Config>
 800379c:	4603      	mov	r3, r0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037b4:	f7ff fc3e 	bl	8003034 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e099      	b.n	80038f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e4:	e00f      	b.n	8003806 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037e6:	f7ff fc25 	bl	8003034 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b05      	cmp	r3, #5
 80037f2:	d908      	bls.n	8003806 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2203      	movs	r2, #3
 80037fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e078      	b.n	80038f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e8      	bne.n	80037e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4b38      	ldr	r3, [pc, #224]	; (8003900 <HAL_DMA_Init+0x158>)
 8003820:	4013      	ands	r3, r2
 8003822:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003832:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800384a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	2b04      	cmp	r3, #4
 800385e:	d107      	bne.n	8003870 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	4313      	orrs	r3, r2
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f023 0307 	bic.w	r3, r3, #7
 8003886:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	2b04      	cmp	r3, #4
 8003898:	d117      	bne.n	80038ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00e      	beq.n	80038ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fa19 	bl	8003ce4 <DMA_CheckFifoParam>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2240      	movs	r2, #64	; 0x40
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038c6:	2301      	movs	r3, #1
 80038c8:	e016      	b.n	80038f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f9d0 	bl	8003c78 <DMA_CalcBaseAndBitshift>
 80038d8:	4603      	mov	r3, r0
 80038da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e0:	223f      	movs	r2, #63	; 0x3f
 80038e2:	409a      	lsls	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	f010803f 	.word	0xf010803f

08003904 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d004      	beq.n	8003922 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2280      	movs	r2, #128	; 0x80
 800391c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e00c      	b.n	800393c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2205      	movs	r2, #5
 8003926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003954:	4b92      	ldr	r3, [pc, #584]	; (8003ba0 <HAL_DMA_IRQHandler+0x258>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a92      	ldr	r2, [pc, #584]	; (8003ba4 <HAL_DMA_IRQHandler+0x25c>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	0a9b      	lsrs	r3, r3, #10
 8003960:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003966:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003972:	2208      	movs	r2, #8
 8003974:	409a      	lsls	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01a      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d013      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0204 	bic.w	r2, r2, #4
 800399a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	2208      	movs	r2, #8
 80039a2:	409a      	lsls	r2, r3
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	f043 0201 	orr.w	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	2201      	movs	r2, #1
 80039ba:	409a      	lsls	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d012      	beq.n	80039ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d6:	2201      	movs	r2, #1
 80039d8:	409a      	lsls	r2, r3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	f043 0202 	orr.w	r2, r3, #2
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ee:	2204      	movs	r2, #4
 80039f0:	409a      	lsls	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d012      	beq.n	8003a20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00b      	beq.n	8003a20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	f043 0204 	orr.w	r2, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a24:	2210      	movs	r2, #16
 8003a26:	409a      	lsls	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d043      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d03c      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a42:	2210      	movs	r2, #16
 8003a44:	409a      	lsls	r2, r3
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d018      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d108      	bne.n	8003a78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d024      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	4798      	blx	r3
 8003a76:	e01f      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01b      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4798      	blx	r3
 8003a88:	e016      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0208 	bic.w	r2, r2, #8
 8003aa6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abc:	2220      	movs	r2, #32
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 808e 	beq.w	8003be6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8086 	beq.w	8003be6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ade:	2220      	movs	r2, #32
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	d136      	bne.n	8003b60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0216 	bic.w	r2, r2, #22
 8003b00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d103      	bne.n	8003b22 <HAL_DMA_IRQHandler+0x1da>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0208 	bic.w	r2, r2, #8
 8003b30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b36:	223f      	movs	r2, #63	; 0x3f
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d07d      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
        }
        return;
 8003b5e:	e078      	b.n	8003c52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01c      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d108      	bne.n	8003b8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d030      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
 8003b8c:	e02b      	b.n	8003be6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d027      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
 8003b9e:	e022      	b.n	8003be6 <HAL_DMA_IRQHandler+0x29e>
 8003ba0:	20000014 	.word	0x20000014
 8003ba4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10f      	bne.n	8003bd6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0210 	bic.w	r2, r2, #16
 8003bc4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d032      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d022      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2205      	movs	r2, #5
 8003bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0201 	bic.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	3301      	adds	r3, #1
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d307      	bcc.n	8003c2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f2      	bne.n	8003c12 <HAL_DMA_IRQHandler+0x2ca>
 8003c2c:	e000      	b.n	8003c30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c2e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
 8003c50:	e000      	b.n	8003c54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c52:	bf00      	nop
    }
  }
}
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop

08003c5c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c6a:	b2db      	uxtb	r3, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	3b10      	subs	r3, #16
 8003c88:	4a14      	ldr	r2, [pc, #80]	; (8003cdc <DMA_CalcBaseAndBitshift+0x64>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	091b      	lsrs	r3, r3, #4
 8003c90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c92:	4a13      	ldr	r2, [pc, #76]	; (8003ce0 <DMA_CalcBaseAndBitshift+0x68>)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d909      	bls.n	8003cba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cae:	f023 0303 	bic.w	r3, r3, #3
 8003cb2:	1d1a      	adds	r2, r3, #4
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	659a      	str	r2, [r3, #88]	; 0x58
 8003cb8:	e007      	b.n	8003cca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cc2:	f023 0303 	bic.w	r3, r3, #3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	aaaaaaab 	.word	0xaaaaaaab
 8003ce0:	0800db08 	.word	0x0800db08

08003ce4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d11f      	bne.n	8003d3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d855      	bhi.n	8003db0 <DMA_CheckFifoParam+0xcc>
 8003d04:	a201      	add	r2, pc, #4	; (adr r2, 8003d0c <DMA_CheckFifoParam+0x28>)
 8003d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0a:	bf00      	nop
 8003d0c:	08003d1d 	.word	0x08003d1d
 8003d10:	08003d2f 	.word	0x08003d2f
 8003d14:	08003d1d 	.word	0x08003d1d
 8003d18:	08003db1 	.word	0x08003db1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d045      	beq.n	8003db4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d2c:	e042      	b.n	8003db4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d36:	d13f      	bne.n	8003db8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d3c:	e03c      	b.n	8003db8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d46:	d121      	bne.n	8003d8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d836      	bhi.n	8003dbc <DMA_CheckFifoParam+0xd8>
 8003d4e:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <DMA_CheckFifoParam+0x70>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003d65 	.word	0x08003d65
 8003d58:	08003d6b 	.word	0x08003d6b
 8003d5c:	08003d65 	.word	0x08003d65
 8003d60:	08003d7d 	.word	0x08003d7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
      break;
 8003d68:	e02f      	b.n	8003dca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d024      	beq.n	8003dc0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d7a:	e021      	b.n	8003dc0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d84:	d11e      	bne.n	8003dc4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d8a:	e01b      	b.n	8003dc4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d902      	bls.n	8003d98 <DMA_CheckFifoParam+0xb4>
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d003      	beq.n	8003d9e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d96:	e018      	b.n	8003dca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d9c:	e015      	b.n	8003dca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00e      	beq.n	8003dc8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
      break;
 8003dae:	e00b      	b.n	8003dc8 <DMA_CheckFifoParam+0xe4>
      break;
 8003db0:	bf00      	nop
 8003db2:	e00a      	b.n	8003dca <DMA_CheckFifoParam+0xe6>
      break;
 8003db4:	bf00      	nop
 8003db6:	e008      	b.n	8003dca <DMA_CheckFifoParam+0xe6>
      break;
 8003db8:	bf00      	nop
 8003dba:	e006      	b.n	8003dca <DMA_CheckFifoParam+0xe6>
      break;
 8003dbc:	bf00      	nop
 8003dbe:	e004      	b.n	8003dca <DMA_CheckFifoParam+0xe6>
      break;
 8003dc0:	bf00      	nop
 8003dc2:	e002      	b.n	8003dca <DMA_CheckFifoParam+0xe6>
      break;   
 8003dc4:	bf00      	nop
 8003dc6:	e000      	b.n	8003dca <DMA_CheckFifoParam+0xe6>
      break;
 8003dc8:	bf00      	nop
    }
  } 
  
  return status; 
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003dea:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <HAL_FLASH_Program+0xa0>)
 8003dec:	7e1b      	ldrb	r3, [r3, #24]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_FLASH_Program+0x1e>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e03b      	b.n	8003e6e <HAL_FLASH_Program+0x96>
 8003df6:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <HAL_FLASH_Program+0xa0>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003dfc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e00:	f000 f870 	bl	8003ee4 <FLASH_WaitForLastOperation>
 8003e04:	4603      	mov	r3, r0
 8003e06:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d12b      	bne.n	8003e66 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003e14:	783b      	ldrb	r3, [r7, #0]
 8003e16:	4619      	mov	r1, r3
 8003e18:	68b8      	ldr	r0, [r7, #8]
 8003e1a:	f000 f919 	bl	8004050 <FLASH_Program_Byte>
 8003e1e:	e016      	b.n	8003e4e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d105      	bne.n	8003e32 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003e26:	883b      	ldrh	r3, [r7, #0]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	68b8      	ldr	r0, [r7, #8]
 8003e2c:	f000 f8ec 	bl	8004008 <FLASH_Program_HalfWord>
 8003e30:	e00d      	b.n	8003e4e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d105      	bne.n	8003e44 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	68b8      	ldr	r0, [r7, #8]
 8003e3e:	f000 f8c1 	bl	8003fc4 <FLASH_Program_Word>
 8003e42:	e004      	b.n	8003e4e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e48:	68b8      	ldr	r0, [r7, #8]
 8003e4a:	f000 f88b 	bl	8003f64 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e52:	f000 f847 	bl	8003ee4 <FLASH_WaitForLastOperation>
 8003e56:	4603      	mov	r3, r0
 8003e58:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003e5a:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <HAL_FLASH_Program+0xa4>)
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	4a07      	ldr	r2, [pc, #28]	; (8003e7c <HAL_FLASH_Program+0xa4>)
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e66:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <HAL_FLASH_Program+0xa0>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	2000052c 	.word	0x2000052c
 8003e7c:	40023c00 	.word	0x40023c00

08003e80 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <HAL_FLASH_Unlock+0x38>)
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	da0b      	bge.n	8003eaa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_FLASH_Unlock+0x38>)
 8003e94:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <HAL_FLASH_Unlock+0x3c>)
 8003e96:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003e98:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <HAL_FLASH_Unlock+0x38>)
 8003e9a:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <HAL_FLASH_Unlock+0x40>)
 8003e9c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003e9e:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_FLASH_Unlock+0x38>)
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	da01      	bge.n	8003eaa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	40023c00 	.word	0x40023c00
 8003ebc:	45670123 	.word	0x45670123
 8003ec0:	cdef89ab 	.word	0xcdef89ab

08003ec4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_FLASH_Lock+0x1c>)
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <HAL_FLASH_Lock+0x1c>)
 8003ece:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ed2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40023c00 	.word	0x40023c00

08003ee4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <FLASH_WaitForLastOperation+0x78>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003ef6:	f7ff f89d 	bl	8003034 <HAL_GetTick>
 8003efa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003efc:	e010      	b.n	8003f20 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d00c      	beq.n	8003f20 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <FLASH_WaitForLastOperation+0x38>
 8003f0c:	f7ff f892 	bl	8003034 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d201      	bcs.n	8003f20 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e019      	b.n	8003f54 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003f20:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <FLASH_WaitForLastOperation+0x7c>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e8      	bne.n	8003efe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <FLASH_WaitForLastOperation+0x7c>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <FLASH_WaitForLastOperation+0x7c>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003f3e:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <FLASH_WaitForLastOperation+0x7c>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003f4a:	f000 f8a3 	bl	8004094 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
  
}  
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	2000052c 	.word	0x2000052c
 8003f60:	40023c00 	.word	0x40023c00

08003f64 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003f64:	b490      	push	{r4, r7}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f70:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <FLASH_Program_DoubleWord+0x5c>)
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	4a12      	ldr	r2, [pc, #72]	; (8003fc0 <FLASH_Program_DoubleWord+0x5c>)
 8003f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003f7c:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <FLASH_Program_DoubleWord+0x5c>)
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	4a0f      	ldr	r2, [pc, #60]	; (8003fc0 <FLASH_Program_DoubleWord+0x5c>)
 8003f82:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003f86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <FLASH_Program_DoubleWord+0x5c>)
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	4a0c      	ldr	r2, [pc, #48]	; (8003fc0 <FLASH_Program_DoubleWord+0x5c>)
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003f9a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003f9e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	f04f 0400 	mov.w	r4, #0
 8003faa:	0013      	movs	r3, r2
 8003fac:	2400      	movs	r4, #0
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	3204      	adds	r2, #4
 8003fb2:	6013      	str	r3, [r2, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc90      	pop	{r4, r7}
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40023c00 	.word	0x40023c00

08003fc4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <FLASH_Program_Word+0x40>)
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	4a0c      	ldr	r2, [pc, #48]	; (8004004 <FLASH_Program_Word+0x40>)
 8003fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003fda:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <FLASH_Program_Word+0x40>)
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	4a09      	ldr	r2, [pc, #36]	; (8004004 <FLASH_Program_Word+0x40>)
 8003fe0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fe4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003fe6:	4b07      	ldr	r3, [pc, #28]	; (8004004 <FLASH_Program_Word+0x40>)
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	4a06      	ldr	r2, [pc, #24]	; (8004004 <FLASH_Program_Word+0x40>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	601a      	str	r2, [r3, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	40023c00 	.word	0x40023c00

08004008 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004014:	4b0d      	ldr	r3, [pc, #52]	; (800404c <FLASH_Program_HalfWord+0x44>)
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	4a0c      	ldr	r2, [pc, #48]	; (800404c <FLASH_Program_HalfWord+0x44>)
 800401a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004020:	4b0a      	ldr	r3, [pc, #40]	; (800404c <FLASH_Program_HalfWord+0x44>)
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	4a09      	ldr	r2, [pc, #36]	; (800404c <FLASH_Program_HalfWord+0x44>)
 8004026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800402c:	4b07      	ldr	r3, [pc, #28]	; (800404c <FLASH_Program_HalfWord+0x44>)
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	4a06      	ldr	r2, [pc, #24]	; (800404c <FLASH_Program_HalfWord+0x44>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	887a      	ldrh	r2, [r7, #2]
 800403c:	801a      	strh	r2, [r3, #0]
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40023c00 	.word	0x40023c00

08004050 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800405c:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <FLASH_Program_Byte+0x40>)
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	4a0b      	ldr	r2, [pc, #44]	; (8004090 <FLASH_Program_Byte+0x40>)
 8004062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004066:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004068:	4b09      	ldr	r3, [pc, #36]	; (8004090 <FLASH_Program_Byte+0x40>)
 800406a:	4a09      	ldr	r2, [pc, #36]	; (8004090 <FLASH_Program_Byte+0x40>)
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004070:	4b07      	ldr	r3, [pc, #28]	; (8004090 <FLASH_Program_Byte+0x40>)
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	4a06      	ldr	r2, [pc, #24]	; (8004090 <FLASH_Program_Byte+0x40>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	701a      	strb	r2, [r3, #0]
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40023c00 	.word	0x40023c00

08004094 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004098:	4b27      	ldr	r3, [pc, #156]	; (8004138 <FLASH_SetErrorCode+0xa4>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80040a4:	4b25      	ldr	r3, [pc, #148]	; (800413c <FLASH_SetErrorCode+0xa8>)
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	f043 0310 	orr.w	r3, r3, #16
 80040ac:	4a23      	ldr	r2, [pc, #140]	; (800413c <FLASH_SetErrorCode+0xa8>)
 80040ae:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80040b0:	4b21      	ldr	r3, [pc, #132]	; (8004138 <FLASH_SetErrorCode+0xa4>)
 80040b2:	2210      	movs	r2, #16
 80040b4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80040b6:	4b20      	ldr	r3, [pc, #128]	; (8004138 <FLASH_SetErrorCode+0xa4>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d008      	beq.n	80040d4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80040c2:	4b1e      	ldr	r3, [pc, #120]	; (800413c <FLASH_SetErrorCode+0xa8>)
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f043 0308 	orr.w	r3, r3, #8
 80040ca:	4a1c      	ldr	r2, [pc, #112]	; (800413c <FLASH_SetErrorCode+0xa8>)
 80040cc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80040ce:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <FLASH_SetErrorCode+0xa4>)
 80040d0:	2220      	movs	r2, #32
 80040d2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80040d4:	4b18      	ldr	r3, [pc, #96]	; (8004138 <FLASH_SetErrorCode+0xa4>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80040e0:	4b16      	ldr	r3, [pc, #88]	; (800413c <FLASH_SetErrorCode+0xa8>)
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f043 0304 	orr.w	r3, r3, #4
 80040e8:	4a14      	ldr	r2, [pc, #80]	; (800413c <FLASH_SetErrorCode+0xa8>)
 80040ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80040ec:	4b12      	ldr	r3, [pc, #72]	; (8004138 <FLASH_SetErrorCode+0xa4>)
 80040ee:	2240      	movs	r2, #64	; 0x40
 80040f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80040f2:	4b11      	ldr	r3, [pc, #68]	; (8004138 <FLASH_SetErrorCode+0xa4>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d008      	beq.n	8004110 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <FLASH_SetErrorCode+0xa8>)
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f043 0302 	orr.w	r3, r3, #2
 8004106:	4a0d      	ldr	r2, [pc, #52]	; (800413c <FLASH_SetErrorCode+0xa8>)
 8004108:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800410a:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <FLASH_SetErrorCode+0xa4>)
 800410c:	2280      	movs	r2, #128	; 0x80
 800410e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004110:	4b09      	ldr	r3, [pc, #36]	; (8004138 <FLASH_SetErrorCode+0xa4>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800411c:	4b07      	ldr	r3, [pc, #28]	; (800413c <FLASH_SetErrorCode+0xa8>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f043 0320 	orr.w	r3, r3, #32
 8004124:	4a05      	ldr	r2, [pc, #20]	; (800413c <FLASH_SetErrorCode+0xa8>)
 8004126:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <FLASH_SetErrorCode+0xa4>)
 800412a:	2202      	movs	r2, #2
 800412c:	60da      	str	r2, [r3, #12]
  }
}
 800412e:	bf00      	nop
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	40023c00 	.word	0x40023c00
 800413c:	2000052c 	.word	0x2000052c

08004140 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d102      	bne.n	800415c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e010      	b.n	800417e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d103      	bne.n	800416a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e009      	b.n	800417e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d103      	bne.n	8004178 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	e002      	b.n	800417e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004178:	f44f 7340 	mov.w	r3, #768	; 0x300
 800417c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800417e:	4b13      	ldr	r3, [pc, #76]	; (80041cc <FLASH_Erase_Sector+0x8c>)
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	4a12      	ldr	r2, [pc, #72]	; (80041cc <FLASH_Erase_Sector+0x8c>)
 8004184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004188:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800418a:	4b10      	ldr	r3, [pc, #64]	; (80041cc <FLASH_Erase_Sector+0x8c>)
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	490f      	ldr	r1, [pc, #60]	; (80041cc <FLASH_Erase_Sector+0x8c>)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004196:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <FLASH_Erase_Sector+0x8c>)
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	4a0c      	ldr	r2, [pc, #48]	; (80041cc <FLASH_Erase_Sector+0x8c>)
 800419c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80041a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80041a2:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <FLASH_Erase_Sector+0x8c>)
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4313      	orrs	r3, r2
 80041ac:	4a07      	ldr	r2, [pc, #28]	; (80041cc <FLASH_Erase_Sector+0x8c>)
 80041ae:	f043 0302 	orr.w	r3, r3, #2
 80041b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <FLASH_Erase_Sector+0x8c>)
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	4a04      	ldr	r2, [pc, #16]	; (80041cc <FLASH_Erase_Sector+0x8c>)
 80041ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041be:	6113      	str	r3, [r2, #16]
}
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40023c00 	.word	0x40023c00

080041d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b089      	sub	sp, #36	; 0x24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	e16b      	b.n	80044c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041ec:	2201      	movs	r2, #1
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4013      	ands	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	429a      	cmp	r2, r3
 8004206:	f040 815a 	bne.w	80044be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d00b      	beq.n	800422a <HAL_GPIO_Init+0x5a>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d007      	beq.n	800422a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800421e:	2b11      	cmp	r3, #17
 8004220:	d003      	beq.n	800422a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b12      	cmp	r3, #18
 8004228:	d130      	bne.n	800428c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	2203      	movs	r2, #3
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4313      	orrs	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004260:	2201      	movs	r2, #1
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 0201 	and.w	r2, r3, #1
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4313      	orrs	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	2203      	movs	r2, #3
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d003      	beq.n	80042cc <HAL_GPIO_Init+0xfc>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b12      	cmp	r3, #18
 80042ca:	d123      	bne.n	8004314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	08da      	lsrs	r2, r3, #3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3208      	adds	r2, #8
 80042d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	220f      	movs	r2, #15
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	4313      	orrs	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	08da      	lsrs	r2, r3, #3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3208      	adds	r2, #8
 800430e:	69b9      	ldr	r1, [r7, #24]
 8004310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	2203      	movs	r2, #3
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 0203 	and.w	r2, r3, #3
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4313      	orrs	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80b4 	beq.w	80044be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	4b5f      	ldr	r3, [pc, #380]	; (80044d8 <HAL_GPIO_Init+0x308>)
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	4a5e      	ldr	r2, [pc, #376]	; (80044d8 <HAL_GPIO_Init+0x308>)
 8004360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004364:	6453      	str	r3, [r2, #68]	; 0x44
 8004366:	4b5c      	ldr	r3, [pc, #368]	; (80044d8 <HAL_GPIO_Init+0x308>)
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004372:	4a5a      	ldr	r2, [pc, #360]	; (80044dc <HAL_GPIO_Init+0x30c>)
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	089b      	lsrs	r3, r3, #2
 8004378:	3302      	adds	r3, #2
 800437a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	220f      	movs	r2, #15
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	43db      	mvns	r3, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4013      	ands	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a51      	ldr	r2, [pc, #324]	; (80044e0 <HAL_GPIO_Init+0x310>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d02b      	beq.n	80043f6 <HAL_GPIO_Init+0x226>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a50      	ldr	r2, [pc, #320]	; (80044e4 <HAL_GPIO_Init+0x314>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d025      	beq.n	80043f2 <HAL_GPIO_Init+0x222>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a4f      	ldr	r2, [pc, #316]	; (80044e8 <HAL_GPIO_Init+0x318>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01f      	beq.n	80043ee <HAL_GPIO_Init+0x21e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a4e      	ldr	r2, [pc, #312]	; (80044ec <HAL_GPIO_Init+0x31c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d019      	beq.n	80043ea <HAL_GPIO_Init+0x21a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a4d      	ldr	r2, [pc, #308]	; (80044f0 <HAL_GPIO_Init+0x320>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <HAL_GPIO_Init+0x216>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a4c      	ldr	r2, [pc, #304]	; (80044f4 <HAL_GPIO_Init+0x324>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00d      	beq.n	80043e2 <HAL_GPIO_Init+0x212>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a4b      	ldr	r2, [pc, #300]	; (80044f8 <HAL_GPIO_Init+0x328>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d007      	beq.n	80043de <HAL_GPIO_Init+0x20e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a4a      	ldr	r2, [pc, #296]	; (80044fc <HAL_GPIO_Init+0x32c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d101      	bne.n	80043da <HAL_GPIO_Init+0x20a>
 80043d6:	2307      	movs	r3, #7
 80043d8:	e00e      	b.n	80043f8 <HAL_GPIO_Init+0x228>
 80043da:	2308      	movs	r3, #8
 80043dc:	e00c      	b.n	80043f8 <HAL_GPIO_Init+0x228>
 80043de:	2306      	movs	r3, #6
 80043e0:	e00a      	b.n	80043f8 <HAL_GPIO_Init+0x228>
 80043e2:	2305      	movs	r3, #5
 80043e4:	e008      	b.n	80043f8 <HAL_GPIO_Init+0x228>
 80043e6:	2304      	movs	r3, #4
 80043e8:	e006      	b.n	80043f8 <HAL_GPIO_Init+0x228>
 80043ea:	2303      	movs	r3, #3
 80043ec:	e004      	b.n	80043f8 <HAL_GPIO_Init+0x228>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e002      	b.n	80043f8 <HAL_GPIO_Init+0x228>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <HAL_GPIO_Init+0x228>
 80043f6:	2300      	movs	r3, #0
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	f002 0203 	and.w	r2, r2, #3
 80043fe:	0092      	lsls	r2, r2, #2
 8004400:	4093      	lsls	r3, r2
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4313      	orrs	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004408:	4934      	ldr	r1, [pc, #208]	; (80044dc <HAL_GPIO_Init+0x30c>)
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	089b      	lsrs	r3, r3, #2
 800440e:	3302      	adds	r3, #2
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004416:	4b3a      	ldr	r3, [pc, #232]	; (8004500 <HAL_GPIO_Init+0x330>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	43db      	mvns	r3, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4013      	ands	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800443a:	4a31      	ldr	r2, [pc, #196]	; (8004500 <HAL_GPIO_Init+0x330>)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004440:	4b2f      	ldr	r3, [pc, #188]	; (8004500 <HAL_GPIO_Init+0x330>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	43db      	mvns	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004464:	4a26      	ldr	r2, [pc, #152]	; (8004500 <HAL_GPIO_Init+0x330>)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800446a:	4b25      	ldr	r3, [pc, #148]	; (8004500 <HAL_GPIO_Init+0x330>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	43db      	mvns	r3, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4013      	ands	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800448e:	4a1c      	ldr	r2, [pc, #112]	; (8004500 <HAL_GPIO_Init+0x330>)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004494:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <HAL_GPIO_Init+0x330>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	43db      	mvns	r3, r3
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4013      	ands	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044b8:	4a11      	ldr	r2, [pc, #68]	; (8004500 <HAL_GPIO_Init+0x330>)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	3301      	adds	r3, #1
 80044c2:	61fb      	str	r3, [r7, #28]
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	2b0f      	cmp	r3, #15
 80044c8:	f67f ae90 	bls.w	80041ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044cc:	bf00      	nop
 80044ce:	3724      	adds	r7, #36	; 0x24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	40023800 	.word	0x40023800
 80044dc:	40013800 	.word	0x40013800
 80044e0:	40020000 	.word	0x40020000
 80044e4:	40020400 	.word	0x40020400
 80044e8:	40020800 	.word	0x40020800
 80044ec:	40020c00 	.word	0x40020c00
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40021400 	.word	0x40021400
 80044f8:	40021800 	.word	0x40021800
 80044fc:	40021c00 	.word	0x40021c00
 8004500:	40013c00 	.word	0x40013c00

08004504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	887b      	ldrh	r3, [r7, #2]
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800451c:	2301      	movs	r3, #1
 800451e:	73fb      	strb	r3, [r7, #15]
 8004520:	e001      	b.n	8004526 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004522:	2300      	movs	r3, #0
 8004524:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004526:	7bfb      	ldrb	r3, [r7, #15]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	807b      	strh	r3, [r7, #2]
 8004540:	4613      	mov	r3, r2
 8004542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004544:	787b      	ldrb	r3, [r7, #1]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800454a:	887a      	ldrh	r2, [r7, #2]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004550:	e003      	b.n	800455a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004552:	887b      	ldrh	r3, [r7, #2]
 8004554:	041a      	lsls	r2, r3, #16
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	619a      	str	r2, [r3, #24]
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	460b      	mov	r3, r1
 8004570:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	887b      	ldrh	r3, [r7, #2]
 8004578:	401a      	ands	r2, r3
 800457a:	887b      	ldrh	r3, [r7, #2]
 800457c:	429a      	cmp	r2, r3
 800457e:	d104      	bne.n	800458a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004580:	887b      	ldrh	r3, [r7, #2]
 8004582:	041a      	lsls	r2, r3, #16
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004588:	e002      	b.n	8004590 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800458a:	887a      	ldrh	r2, [r7, #2]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	619a      	str	r2, [r3, #24]
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045a6:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	4013      	ands	r3, r2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d006      	beq.n	80045c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045b2:	4a05      	ldr	r2, [pc, #20]	; (80045c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045b4:	88fb      	ldrh	r3, [r7, #6]
 80045b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045b8:	88fb      	ldrh	r3, [r7, #6]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f806 	bl	80045cc <HAL_GPIO_EXTI_Callback>
  }
}
 80045c0:	bf00      	nop
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40013c00 	.word	0x40013c00

080045cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e11f      	b.n	8004836 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fd fb52 	bl	8001cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2224      	movs	r2, #36	; 0x24
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004636:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004646:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004648:	f003 fcd4 	bl	8007ff4 <HAL_RCC_GetPCLK1Freq>
 800464c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4a7b      	ldr	r2, [pc, #492]	; (8004840 <HAL_I2C_Init+0x25c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d807      	bhi.n	8004668 <HAL_I2C_Init+0x84>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4a7a      	ldr	r2, [pc, #488]	; (8004844 <HAL_I2C_Init+0x260>)
 800465c:	4293      	cmp	r3, r2
 800465e:	bf94      	ite	ls
 8004660:	2301      	movls	r3, #1
 8004662:	2300      	movhi	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e006      	b.n	8004676 <HAL_I2C_Init+0x92>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4a77      	ldr	r2, [pc, #476]	; (8004848 <HAL_I2C_Init+0x264>)
 800466c:	4293      	cmp	r3, r2
 800466e:	bf94      	ite	ls
 8004670:	2301      	movls	r3, #1
 8004672:	2300      	movhi	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e0db      	b.n	8004836 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4a72      	ldr	r2, [pc, #456]	; (800484c <HAL_I2C_Init+0x268>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	0c9b      	lsrs	r3, r3, #18
 8004688:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4a64      	ldr	r2, [pc, #400]	; (8004840 <HAL_I2C_Init+0x25c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d802      	bhi.n	80046b8 <HAL_I2C_Init+0xd4>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	3301      	adds	r3, #1
 80046b6:	e009      	b.n	80046cc <HAL_I2C_Init+0xe8>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	4a63      	ldr	r2, [pc, #396]	; (8004850 <HAL_I2C_Init+0x26c>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	099b      	lsrs	r3, r3, #6
 80046ca:	3301      	adds	r3, #1
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4956      	ldr	r1, [pc, #344]	; (8004840 <HAL_I2C_Init+0x25c>)
 80046e8:	428b      	cmp	r3, r1
 80046ea:	d80d      	bhi.n	8004708 <HAL_I2C_Init+0x124>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	1e59      	subs	r1, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80046fa:	3301      	adds	r3, #1
 80046fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004700:	2b04      	cmp	r3, #4
 8004702:	bf38      	it	cc
 8004704:	2304      	movcc	r3, #4
 8004706:	e04f      	b.n	80047a8 <HAL_I2C_Init+0x1c4>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d111      	bne.n	8004734 <HAL_I2C_Init+0x150>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	1e58      	subs	r0, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6859      	ldr	r1, [r3, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	440b      	add	r3, r1
 800471e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004722:	3301      	adds	r3, #1
 8004724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004728:	2b00      	cmp	r3, #0
 800472a:	bf0c      	ite	eq
 800472c:	2301      	moveq	r3, #1
 800472e:	2300      	movne	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e012      	b.n	800475a <HAL_I2C_Init+0x176>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	1e58      	subs	r0, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6859      	ldr	r1, [r3, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	0099      	lsls	r1, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	fbb0 f3f3 	udiv	r3, r0, r3
 800474a:	3301      	adds	r3, #1
 800474c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004750:	2b00      	cmp	r3, #0
 8004752:	bf0c      	ite	eq
 8004754:	2301      	moveq	r3, #1
 8004756:	2300      	movne	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_I2C_Init+0x17e>
 800475e:	2301      	movs	r3, #1
 8004760:	e022      	b.n	80047a8 <HAL_I2C_Init+0x1c4>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10e      	bne.n	8004788 <HAL_I2C_Init+0x1a4>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	1e58      	subs	r0, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6859      	ldr	r1, [r3, #4]
 8004772:	460b      	mov	r3, r1
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	440b      	add	r3, r1
 8004778:	fbb0 f3f3 	udiv	r3, r0, r3
 800477c:	3301      	adds	r3, #1
 800477e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004786:	e00f      	b.n	80047a8 <HAL_I2C_Init+0x1c4>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	1e58      	subs	r0, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6859      	ldr	r1, [r3, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	0099      	lsls	r1, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	fbb0 f3f3 	udiv	r3, r0, r3
 800479e:	3301      	adds	r3, #1
 80047a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	6809      	ldr	r1, [r1, #0]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69da      	ldr	r2, [r3, #28]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6911      	ldr	r1, [r2, #16]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68d2      	ldr	r2, [r2, #12]
 80047e2:	4311      	orrs	r1, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	430b      	orrs	r3, r1
 80047ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	000186a0 	.word	0x000186a0
 8004844:	001e847f 	.word	0x001e847f
 8004848:	003d08ff 	.word	0x003d08ff
 800484c:	431bde83 	.word	0x431bde83
 8004850:	10624dd3 	.word	0x10624dd3

08004854 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	461a      	mov	r2, r3
 8004860:	460b      	mov	r3, r1
 8004862:	817b      	strh	r3, [r7, #10]
 8004864:	4613      	mov	r3, r2
 8004866:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b20      	cmp	r3, #32
 8004876:	f040 8085 	bne.w	8004984 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800487a:	4b46      	ldr	r3, [pc, #280]	; (8004994 <HAL_I2C_Master_Transmit_IT+0x140>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	08db      	lsrs	r3, r3, #3
 8004880:	4a45      	ldr	r2, [pc, #276]	; (8004998 <HAL_I2C_Master_Transmit_IT+0x144>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	0a1a      	lsrs	r2, r3, #8
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	009a      	lsls	r2, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	3b01      	subs	r3, #1
 8004898:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d116      	bne.n	80048ce <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f043 0220 	orr.w	r2, r3, #32
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e05b      	b.n	8004986 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d0db      	beq.n	8004894 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_I2C_Master_Transmit_IT+0x96>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e04d      	b.n	8004986 <HAL_I2C_Master_Transmit_IT+0x132>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d007      	beq.n	8004910 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800491e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2221      	movs	r2, #33	; 0x21
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2210      	movs	r2, #16
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	893a      	ldrh	r2, [r7, #8]
 8004940:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4a13      	ldr	r2, [pc, #76]	; (800499c <HAL_I2C_Master_Transmit_IT+0x148>)
 8004950:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004952:	897a      	ldrh	r2, [r7, #10]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004966:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800497e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	e000      	b.n	8004986 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8004984:	2302      	movs	r3, #2
  }
}
 8004986:	4618      	mov	r0, r3
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000014 	.word	0x20000014
 8004998:	14f8b589 	.word	0x14f8b589
 800499c:	ffff0000 	.word	0xffff0000

080049a0 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	461a      	mov	r2, r3
 80049ac:	460b      	mov	r3, r1
 80049ae:	817b      	strh	r3, [r7, #10]
 80049b0:	4613      	mov	r3, r2
 80049b2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	f040 808d 	bne.w	8004ae0 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80049c6:	4b4a      	ldr	r3, [pc, #296]	; (8004af0 <HAL_I2C_Master_Receive_IT+0x150>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	08db      	lsrs	r3, r3, #3
 80049cc:	4a49      	ldr	r2, [pc, #292]	; (8004af4 <HAL_I2C_Master_Receive_IT+0x154>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	0a1a      	lsrs	r2, r3, #8
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	009a      	lsls	r2, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d116      	bne.n	8004a1a <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f043 0220 	orr.w	r2, r3, #32
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e063      	b.n	8004ae2 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d0db      	beq.n	80049e0 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_I2C_Master_Receive_IT+0x96>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e055      	b.n	8004ae2 <HAL_I2C_Master_Receive_IT+0x142>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d007      	beq.n	8004a5c <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2222      	movs	r2, #34	; 0x22
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2210      	movs	r2, #16
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	893a      	ldrh	r2, [r7, #8]
 8004a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <HAL_I2C_Master_Receive_IT+0x158>)
 8004a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004a9e:	897a      	ldrh	r2, [r7, #10]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ab2:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004ada:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	e000      	b.n	8004ae2 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8004ae0:	2302      	movs	r3, #2
  }
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000014 	.word	0x20000014
 8004af4:	14f8b589 	.word	0x14f8b589
 8004af8:	ffff0000 	.word	0xffff0000

08004afc <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b0e:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d138      	bne.n	8004b90 <HAL_I2C_Master_Abort_IT+0x94>
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	2b10      	cmp	r3, #16
 8004b22:	d135      	bne.n	8004b90 <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_I2C_Master_Abort_IT+0x36>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e02f      	b.n	8004b92 <HAL_I2C_Master_Abort_IT+0x96>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2260      	movs	r2, #96	; 0x60
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b56:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b66:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b7c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f001 fa76 	bl	8006078 <I2C_ITError>

    return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	e000      	b.n	8004b92 <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
  }
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b088      	sub	sp, #32
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc2:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d003      	beq.n	8004bd2 <HAL_I2C_EV_IRQHandler+0x38>
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	2b40      	cmp	r3, #64	; 0x40
 8004bce:	f040 80bd 	bne.w	8004d4c <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10d      	bne.n	8004c08 <HAL_I2C_EV_IRQHandler+0x6e>
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004bf2:	d003      	beq.n	8004bfc <HAL_I2C_EV_IRQHandler+0x62>
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004bfa:	d101      	bne.n	8004c00 <HAL_I2C_EV_IRQHandler+0x66>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <HAL_I2C_EV_IRQHandler+0x68>
 8004c00:	2300      	movs	r3, #0
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	f000 812e 	beq.w	8004e64 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00c      	beq.n	8004c2c <HAL_I2C_EV_IRQHandler+0x92>
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	0a5b      	lsrs	r3, r3, #9
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d006      	beq.n	8004c2c <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f001 fc36 	bl	8006490 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fd44 	bl	80056b2 <I2C_Master_SB>
 8004c2a:	e08e      	b.n	8004d4a <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	08db      	lsrs	r3, r3, #3
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d009      	beq.n	8004c4c <HAL_I2C_EV_IRQHandler+0xb2>
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	0a5b      	lsrs	r3, r3, #9
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fdba 	bl	80057be <I2C_Master_ADD10>
 8004c4a:	e07e      	b.n	8004d4a <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d009      	beq.n	8004c6c <HAL_I2C_EV_IRQHandler+0xd2>
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	0a5b      	lsrs	r3, r3, #9
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fdd4 	bl	8005812 <I2C_Master_ADDR>
 8004c6a:	e06e      	b.n	8004d4a <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	089b      	lsrs	r3, r3, #2
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d037      	beq.n	8004ce8 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c86:	f000 80ef 	beq.w	8004e68 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	09db      	lsrs	r3, r3, #7
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00f      	beq.n	8004cb6 <HAL_I2C_EV_IRQHandler+0x11c>
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	0a9b      	lsrs	r3, r3, #10
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <HAL_I2C_EV_IRQHandler+0x11c>
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	089b      	lsrs	r3, r3, #2
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d103      	bne.n	8004cb6 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f9d1 	bl	8005056 <I2C_MasterTransmit_TXE>
 8004cb4:	e049      	b.n	8004d4a <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	089b      	lsrs	r3, r3, #2
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 80d2 	beq.w	8004e68 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	0a5b      	lsrs	r3, r3, #9
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 80cb 	beq.w	8004e68 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b10      	cmp	r3, #16
 8004cd6:	d103      	bne.n	8004ce0 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fa58 	bl	800518e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cde:	e0c3      	b.n	8004e68 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fabc 	bl	800525e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ce6:	e0bf      	b.n	8004e68 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf6:	f000 80b7 	beq.w	8004e68 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	099b      	lsrs	r3, r3, #6
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00f      	beq.n	8004d26 <HAL_I2C_EV_IRQHandler+0x18c>
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	0a9b      	lsrs	r3, r3, #10
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <HAL_I2C_EV_IRQHandler+0x18c>
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	089b      	lsrs	r3, r3, #2
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d103      	bne.n	8004d26 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fb2c 	bl	800537c <I2C_MasterReceive_RXNE>
 8004d24:	e011      	b.n	8004d4a <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	089b      	lsrs	r3, r3, #2
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 809a 	beq.w	8004e68 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	0a5b      	lsrs	r3, r3, #9
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8093 	beq.w	8004e68 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fbcb 	bl	80054de <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d48:	e08e      	b.n	8004e68 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004d4a:	e08d      	b.n	8004e68 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	e007      	b.n	8004d6e <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	085b      	lsrs	r3, r3, #1
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d012      	beq.n	8004da0 <HAL_I2C_EV_IRQHandler+0x206>
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	0a5b      	lsrs	r3, r3, #9
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00c      	beq.n	8004da0 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004d96:	69b9      	ldr	r1, [r7, #24]
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 ff89 	bl	8005cb0 <I2C_Slave_ADDR>
 8004d9e:	e066      	b.n	8004e6e <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	091b      	lsrs	r3, r3, #4
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d009      	beq.n	8004dc0 <HAL_I2C_EV_IRQHandler+0x226>
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	0a5b      	lsrs	r3, r3, #9
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 ffbd 	bl	8005d38 <I2C_Slave_STOPF>
 8004dbe:	e056      	b.n	8004e6e <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004dc0:	7bbb      	ldrb	r3, [r7, #14]
 8004dc2:	2b21      	cmp	r3, #33	; 0x21
 8004dc4:	d002      	beq.n	8004dcc <HAL_I2C_EV_IRQHandler+0x232>
 8004dc6:	7bbb      	ldrb	r3, [r7, #14]
 8004dc8:	2b29      	cmp	r3, #41	; 0x29
 8004dca:	d125      	bne.n	8004e18 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	09db      	lsrs	r3, r3, #7
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00f      	beq.n	8004df8 <HAL_I2C_EV_IRQHandler+0x25e>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	0a9b      	lsrs	r3, r3, #10
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d009      	beq.n	8004df8 <HAL_I2C_EV_IRQHandler+0x25e>
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	089b      	lsrs	r3, r3, #2
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d103      	bne.n	8004df8 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fe9f 	bl	8005b34 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004df6:	e039      	b.n	8004e6c <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	089b      	lsrs	r3, r3, #2
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d033      	beq.n	8004e6c <HAL_I2C_EV_IRQHandler+0x2d2>
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	0a5b      	lsrs	r3, r3, #9
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d02d      	beq.n	8004e6c <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fecc 	bl	8005bae <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e16:	e029      	b.n	8004e6c <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	099b      	lsrs	r3, r3, #6
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00f      	beq.n	8004e44 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	0a9b      	lsrs	r3, r3, #10
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	089b      	lsrs	r3, r3, #2
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d103      	bne.n	8004e44 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fed7 	bl	8005bf0 <I2C_SlaveReceive_RXNE>
 8004e42:	e014      	b.n	8004e6e <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	089b      	lsrs	r3, r3, #2
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00e      	beq.n	8004e6e <HAL_I2C_EV_IRQHandler+0x2d4>
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	0a5b      	lsrs	r3, r3, #9
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 ff05 	bl	8005c6c <I2C_SlaveReceive_BTF>
 8004e62:	e004      	b.n	8004e6e <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8004e64:	bf00      	nop
 8004e66:	e002      	b.n	8004e6e <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e68:	bf00      	nop
 8004e6a:	e000      	b.n	8004e6e <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e6c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004e6e:	3720      	adds	r7, #32
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	; 0x28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e96:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	0a1b      	lsrs	r3, r3, #8
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00e      	beq.n	8004ec2 <HAL_I2C_ER_IRQHandler+0x4e>
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	0a1b      	lsrs	r3, r3, #8
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	f043 0301 	orr.w	r3, r3, #1
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ec0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	0a5b      	lsrs	r3, r3, #9
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00e      	beq.n	8004eec <HAL_I2C_ER_IRQHandler+0x78>
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	0a1b      	lsrs	r3, r3, #8
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d008      	beq.n	8004eec <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	f043 0302 	orr.w	r3, r3, #2
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004eea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	0a9b      	lsrs	r3, r3, #10
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d03f      	beq.n	8004f78 <HAL_I2C_ER_IRQHandler+0x104>
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	0a1b      	lsrs	r3, r3, #8
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d039      	beq.n	8004f78 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004f04:	7efb      	ldrb	r3, [r7, #27]
 8004f06:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f16:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004f1e:	7ebb      	ldrb	r3, [r7, #26]
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d112      	bne.n	8004f4a <HAL_I2C_ER_IRQHandler+0xd6>
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10f      	bne.n	8004f4a <HAL_I2C_ER_IRQHandler+0xd6>
 8004f2a:	7cfb      	ldrb	r3, [r7, #19]
 8004f2c:	2b21      	cmp	r3, #33	; 0x21
 8004f2e:	d008      	beq.n	8004f42 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004f30:	7cfb      	ldrb	r3, [r7, #19]
 8004f32:	2b29      	cmp	r3, #41	; 0x29
 8004f34:	d005      	beq.n	8004f42 <HAL_I2C_ER_IRQHandler+0xce>
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	2b28      	cmp	r3, #40	; 0x28
 8004f3a:	d106      	bne.n	8004f4a <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b21      	cmp	r3, #33	; 0x21
 8004f40:	d103      	bne.n	8004f4a <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f001 f828 	bl	8005f98 <I2C_Slave_AF>
 8004f48:	e016      	b.n	8004f78 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f52:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	f043 0304 	orr.w	r3, r3, #4
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004f5c:	7efb      	ldrb	r3, [r7, #27]
 8004f5e:	2b10      	cmp	r3, #16
 8004f60:	d002      	beq.n	8004f68 <HAL_I2C_ER_IRQHandler+0xf4>
 8004f62:	7efb      	ldrb	r3, [r7, #27]
 8004f64:	2b40      	cmp	r3, #64	; 0x40
 8004f66:	d107      	bne.n	8004f78 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f76:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	0adb      	lsrs	r3, r3, #11
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00e      	beq.n	8004fa2 <HAL_I2C_ER_IRQHandler+0x12e>
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	0a1b      	lsrs	r3, r3, #8
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	f043 0308 	orr.w	r3, r3, #8
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004fa0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d008      	beq.n	8004fba <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f001 f85f 	bl	8006078 <I2C_ITError>
  }
}
 8004fba:	bf00      	nop
 8004fbc:	3728      	adds	r7, #40	; 0x28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	70fb      	strb	r3, [r7, #3]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005064:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800506c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005078:	2b00      	cmp	r3, #0
 800507a:	d150      	bne.n	800511e <I2C_MasterTransmit_TXE+0xc8>
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	2b21      	cmp	r3, #33	; 0x21
 8005080:	d14d      	bne.n	800511e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b08      	cmp	r3, #8
 8005086:	d01d      	beq.n	80050c4 <I2C_MasterTransmit_TXE+0x6e>
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b20      	cmp	r3, #32
 800508c:	d01a      	beq.n	80050c4 <I2C_MasterTransmit_TXE+0x6e>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005094:	d016      	beq.n	80050c4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050a4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2211      	movs	r2, #17
 80050aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7fd fb35 	bl	800272c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050c2:	e060      	b.n	8005186 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050d2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b40      	cmp	r3, #64	; 0x40
 80050fc:	d107      	bne.n	800510e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff ff7d 	bl	8005006 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800510c:	e03b      	b.n	8005186 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fd fb08 	bl	800272c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800511c:	e033      	b.n	8005186 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	2b21      	cmp	r3, #33	; 0x21
 8005122:	d005      	beq.n	8005130 <I2C_MasterTransmit_TXE+0xda>
 8005124:	7bbb      	ldrb	r3, [r7, #14]
 8005126:	2b40      	cmp	r3, #64	; 0x40
 8005128:	d12d      	bne.n	8005186 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	2b22      	cmp	r3, #34	; 0x22
 800512e:	d12a      	bne.n	8005186 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d108      	bne.n	800514c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005148:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800514a:	e01c      	b.n	8005186 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d103      	bne.n	8005160 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f880 	bl	800525e <I2C_MemoryTransmit_TXE_BTF>
}
 800515e:	e012      	b.n	8005186 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	781a      	ldrb	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005184:	e7ff      	b.n	8005186 <I2C_MasterTransmit_TXE+0x130>
 8005186:	bf00      	nop
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b21      	cmp	r3, #33	; 0x21
 80051a6:	d156      	bne.n	8005256 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d012      	beq.n	80051d8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	781a      	ldrb	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80051d6:	e03e      	b.n	8005256 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d01d      	beq.n	800521a <I2C_MasterTransmit_BTF+0x8c>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d01a      	beq.n	800521a <I2C_MasterTransmit_BTF+0x8c>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051ea:	d016      	beq.n	800521a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051fa:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2211      	movs	r2, #17
 8005200:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fd fa8a 	bl	800272c <HAL_I2C_MasterTxCpltCallback>
}
 8005218:	e01d      	b.n	8005256 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005228:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005238:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7fd fa6b 	bl	800272c <HAL_I2C_MasterTxCpltCallback>
}
 8005256:	bf00      	nop
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005272:	2b00      	cmp	r3, #0
 8005274:	d11d      	bne.n	80052b2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527a:	2b01      	cmp	r3, #1
 800527c:	d10b      	bne.n	8005296 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005282:	b2da      	uxtb	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528e:	1c9a      	adds	r2, r3, #2
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005294:	e06e      	b.n	8005374 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800529a:	b29b      	uxth	r3, r3
 800529c:	121b      	asrs	r3, r3, #8
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052b0:	e060      	b.n	8005374 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d10b      	bne.n	80052d2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052d0:	e050      	b.n	8005374 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d14c      	bne.n	8005374 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	2b22      	cmp	r3, #34	; 0x22
 80052de:	d108      	bne.n	80052f2 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ee:	601a      	str	r2, [r3, #0]
}
 80052f0:	e040      	b.n	8005374 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d015      	beq.n	8005328 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
 80052fe:	2b21      	cmp	r3, #33	; 0x21
 8005300:	d112      	bne.n	8005328 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	781a      	ldrb	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005326:	e025      	b.n	8005374 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d120      	bne.n	8005374 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	2b21      	cmp	r3, #33	; 0x21
 8005336:	d11d      	bne.n	8005374 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005346:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005356:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff fe49 	bl	8005006 <HAL_I2C_MemTxCpltCallback>
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b22      	cmp	r3, #34	; 0x22
 800538e:	f040 80a2 	bne.w	80054d6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005396:	b29b      	uxth	r3, r3
 8005398:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b03      	cmp	r3, #3
 800539e:	d921      	bls.n	80053e4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691a      	ldr	r2, [r3, #16]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	f040 8082 	bne.w	80054d6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80053e2:	e078      	b.n	80054d6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d074      	beq.n	80054d6 <I2C_MasterReceive_RXNE+0x15a>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d002      	beq.n	80053f8 <I2C_MasterReceive_RXNE+0x7c>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d16e      	bne.n	80054d6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f001 f817 	bl	800642c <I2C_WaitOnSTOPRequestThroughIT>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d142      	bne.n	800548a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005412:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005422:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005440:	b29b      	uxth	r3, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d10a      	bne.n	8005474 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff fdd4 	bl	800501a <HAL_I2C_MemRxCpltCallback>
}
 8005472:	e030      	b.n	80054d6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2212      	movs	r2, #18
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fd f964 	bl	8002750 <HAL_I2C_MasterRxCpltCallback>
}
 8005488:	e025      	b.n	80054d6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005498:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7ff fdac 	bl	800502e <HAL_I2C_ErrorCallback>
}
 80054d6:	bf00      	nop
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ea:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d11b      	bne.n	800552e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005504:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800552c:	e0bd      	b.n	80056aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005532:	b29b      	uxth	r3, r3
 8005534:	2b03      	cmp	r3, #3
 8005536:	d129      	bne.n	800558c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005546:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b04      	cmp	r3, #4
 800554c:	d00a      	beq.n	8005564 <I2C_MasterReceive_BTF+0x86>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b02      	cmp	r3, #2
 8005552:	d007      	beq.n	8005564 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005562:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	3b01      	subs	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800558a:	e08e      	b.n	80056aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d176      	bne.n	8005684 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d002      	beq.n	80055a2 <I2C_MasterReceive_BTF+0xc4>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d108      	bne.n	80055b4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	e019      	b.n	80055e8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d002      	beq.n	80055c0 <I2C_MasterReceive_BTF+0xe2>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d108      	bne.n	80055d2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	e00a      	b.n	80055e8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b10      	cmp	r3, #16
 80055d6:	d007      	beq.n	80055e8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005642:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b40      	cmp	r3, #64	; 0x40
 8005656:	d10a      	bne.n	800566e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff fcd7 	bl	800501a <HAL_I2C_MemRxCpltCallback>
}
 800566c:	e01d      	b.n	80056aa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2212      	movs	r2, #18
 800567a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7fd f867 	bl	8002750 <HAL_I2C_MasterRxCpltCallback>
}
 8005682:	e012      	b.n	80056aa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80056aa:	bf00      	nop
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b40      	cmp	r3, #64	; 0x40
 80056c4:	d117      	bne.n	80056f6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	461a      	mov	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056de:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80056e0:	e067      	b.n	80057b2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	611a      	str	r2, [r3, #16]
}
 80056f4:	e05d      	b.n	80057b2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056fe:	d133      	bne.n	8005768 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b21      	cmp	r3, #33	; 0x21
 800570a:	d109      	bne.n	8005720 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005710:	b2db      	uxtb	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800571c:	611a      	str	r2, [r3, #16]
 800571e:	e008      	b.n	8005732 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005724:	b2db      	uxtb	r3, r3
 8005726:	f043 0301 	orr.w	r3, r3, #1
 800572a:	b2da      	uxtb	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005736:	2b00      	cmp	r3, #0
 8005738:	d004      	beq.n	8005744 <I2C_Master_SB+0x92>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d108      	bne.n	8005756 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	2b00      	cmp	r3, #0
 800574a:	d032      	beq.n	80057b2 <I2C_Master_SB+0x100>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d02d      	beq.n	80057b2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005764:	605a      	str	r2, [r3, #4]
}
 8005766:	e024      	b.n	80057b2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10e      	bne.n	800578e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005774:	b29b      	uxth	r3, r3
 8005776:	11db      	asrs	r3, r3, #7
 8005778:	b2db      	uxtb	r3, r3
 800577a:	f003 0306 	and.w	r3, r3, #6
 800577e:	b2db      	uxtb	r3, r3
 8005780:	f063 030f 	orn	r3, r3, #15
 8005784:	b2da      	uxtb	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	611a      	str	r2, [r3, #16]
}
 800578c:	e011      	b.n	80057b2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005792:	2b01      	cmp	r3, #1
 8005794:	d10d      	bne.n	80057b2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579a:	b29b      	uxth	r3, r3
 800579c:	11db      	asrs	r3, r3, #7
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	f003 0306 	and.w	r3, r3, #6
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	f063 030e 	orn	r3, r3, #14
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	611a      	str	r2, [r3, #16]
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d103      	bne.n	80057e2 <I2C_Master_ADD10+0x24>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d011      	beq.n	8005806 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d104      	bne.n	80057f6 <I2C_Master_ADD10+0x38>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005804:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005812:	b480      	push	{r7}
 8005814:	b091      	sub	sp, #68	; 0x44
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005820:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b22      	cmp	r3, #34	; 0x22
 800583a:	f040 8169 	bne.w	8005b10 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10f      	bne.n	8005866 <I2C_Master_ADDR+0x54>
 8005846:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800584a:	2b40      	cmp	r3, #64	; 0x40
 800584c:	d10b      	bne.n	8005866 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800584e:	2300      	movs	r3, #0
 8005850:	633b      	str	r3, [r7, #48]	; 0x30
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	633b      	str	r3, [r7, #48]	; 0x30
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	633b      	str	r3, [r7, #48]	; 0x30
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	e160      	b.n	8005b28 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586a:	2b00      	cmp	r3, #0
 800586c:	d11d      	bne.n	80058aa <I2C_Master_ADDR+0x98>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005876:	d118      	bne.n	80058aa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005878:	2300      	movs	r3, #0
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800589c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	651a      	str	r2, [r3, #80]	; 0x50
 80058a8:	e13e      	b.n	8005b28 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d113      	bne.n	80058dc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058b4:	2300      	movs	r3, #0
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	e115      	b.n	8005b08 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	f040 808a 	bne.w	80059fc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058ee:	d137      	bne.n	8005960 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800590e:	d113      	bne.n	8005938 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005920:	2300      	movs	r3, #0
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	e0e7      	b.n	8005b08 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005938:	2300      	movs	r3, #0
 800593a:	623b      	str	r3, [r7, #32]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	623b      	str	r3, [r7, #32]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	623b      	str	r3, [r7, #32]
 800594c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	e0d3      	b.n	8005b08 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	2b08      	cmp	r3, #8
 8005964:	d02e      	beq.n	80059c4 <I2C_Master_ADDR+0x1b2>
 8005966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005968:	2b20      	cmp	r3, #32
 800596a:	d02b      	beq.n	80059c4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	2b12      	cmp	r3, #18
 8005970:	d102      	bne.n	8005978 <I2C_Master_ADDR+0x166>
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	2b01      	cmp	r3, #1
 8005976:	d125      	bne.n	80059c4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	2b04      	cmp	r3, #4
 800597c:	d00e      	beq.n	800599c <I2C_Master_ADDR+0x18a>
 800597e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005980:	2b02      	cmp	r3, #2
 8005982:	d00b      	beq.n	800599c <I2C_Master_ADDR+0x18a>
 8005984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005986:	2b10      	cmp	r3, #16
 8005988:	d008      	beq.n	800599c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	e007      	b.n	80059ac <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059aa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ac:	2300      	movs	r3, #0
 80059ae:	61fb      	str	r3, [r7, #28]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	61fb      	str	r3, [r7, #28]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	e0a1      	b.n	8005b08 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d4:	2300      	movs	r3, #0
 80059d6:	61bb      	str	r3, [r7, #24]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	e085      	b.n	8005b08 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d14d      	bne.n	8005aa2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d016      	beq.n	8005a3a <I2C_Master_ADDR+0x228>
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d013      	beq.n	8005a3a <I2C_Master_ADDR+0x228>
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	2b10      	cmp	r3, #16
 8005a16:	d010      	beq.n	8005a3a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a26:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	e007      	b.n	8005a4a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a48:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a58:	d117      	bne.n	8005a8a <I2C_Master_ADDR+0x278>
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a60:	d00b      	beq.n	8005a7a <I2C_Master_ADDR+0x268>
 8005a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d008      	beq.n	8005a7a <I2C_Master_ADDR+0x268>
 8005a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d005      	beq.n	8005a7a <I2C_Master_ADDR+0x268>
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a70:	2b10      	cmp	r3, #16
 8005a72:	d002      	beq.n	8005a7a <I2C_Master_ADDR+0x268>
 8005a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	d107      	bne.n	8005a8a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a88:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	617b      	str	r3, [r7, #20]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	e032      	b.n	8005b08 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ab0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac0:	d117      	bne.n	8005af2 <I2C_Master_ADDR+0x2e0>
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ac8:	d00b      	beq.n	8005ae2 <I2C_Master_ADDR+0x2d0>
 8005aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d008      	beq.n	8005ae2 <I2C_Master_ADDR+0x2d0>
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	2b08      	cmp	r3, #8
 8005ad4:	d005      	beq.n	8005ae2 <I2C_Master_ADDR+0x2d0>
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	d002      	beq.n	8005ae2 <I2C_Master_ADDR+0x2d0>
 8005adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ade:	2b20      	cmp	r3, #32
 8005ae0:	d107      	bne.n	8005af2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005af0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af2:	2300      	movs	r3, #0
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	613b      	str	r3, [r7, #16]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005b0e:	e00b      	b.n	8005b28 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
}
 8005b26:	e7ff      	b.n	8005b28 <I2C_Master_ADDR+0x316>
 8005b28:	bf00      	nop
 8005b2a:	3744      	adds	r7, #68	; 0x44
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d02b      	beq.n	8005ba6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	781a      	ldrb	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d114      	bne.n	8005ba6 <I2C_SlaveTransmit_TXE+0x72>
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	2b29      	cmp	r3, #41	; 0x29
 8005b80:	d111      	bne.n	8005ba6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b90:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2221      	movs	r2, #33	; 0x21
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2228      	movs	r2, #40	; 0x28
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7ff fa0e 	bl	8004fc2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ba6:	bf00      	nop
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d011      	beq.n	8005be4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	781a      	ldrb	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d02c      	beq.n	8005c64 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d114      	bne.n	8005c64 <I2C_SlaveReceive_RXNE+0x74>
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c3e:	d111      	bne.n	8005c64 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2222      	movs	r2, #34	; 0x22
 8005c54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2228      	movs	r2, #40	; 0x28
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fc fda2 	bl	80027a8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005c64:	bf00      	nop
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d012      	beq.n	8005ca4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cca:	2b28      	cmp	r3, #40	; 0x28
 8005ccc:	d127      	bne.n	8005d1e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cdc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	089b      	lsrs	r3, r3, #2
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005cea:	2301      	movs	r3, #1
 8005cec:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	09db      	lsrs	r3, r3, #7
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d103      	bne.n	8005d02 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	81bb      	strh	r3, [r7, #12]
 8005d00:	e002      	b.n	8005d08 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005d10:	89ba      	ldrh	r2, [r7, #12]
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff f95d 	bl	8004fd6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005d1c:	e008      	b.n	8005d30 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f06f 0202 	mvn.w	r2, #2
 8005d26:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d46:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d56:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60bb      	str	r3, [r7, #8]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	60bb      	str	r3, [r7, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0201 	orr.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d84:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d94:	d172      	bne.n	8005e7c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	2b22      	cmp	r3, #34	; 0x22
 8005d9a:	d002      	beq.n	8005da2 <I2C_Slave_STOPF+0x6a>
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8005da0:	d135      	bne.n	8005e0e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d005      	beq.n	8005dc6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	f043 0204 	orr.w	r2, r3, #4
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dd4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fd ff3e 	bl	8003c5c <HAL_DMA_GetState>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d049      	beq.n	8005e7a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dea:	4a69      	ldr	r2, [pc, #420]	; (8005f90 <I2C_Slave_STOPF+0x258>)
 8005dec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fd fd86 	bl	8003904 <HAL_DMA_Abort_IT>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d03d      	beq.n	8005e7a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e08:	4610      	mov	r0, r2
 8005e0a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e0c:	e035      	b.n	8005e7a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d005      	beq.n	8005e32 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f043 0204 	orr.w	r2, r3, #4
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fd ff08 	bl	8003c5c <HAL_DMA_GetState>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d014      	beq.n	8005e7c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e56:	4a4e      	ldr	r2, [pc, #312]	; (8005f90 <I2C_Slave_STOPF+0x258>)
 8005e58:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fd fd50 	bl	8003904 <HAL_DMA_Abort_IT>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d008      	beq.n	8005e7c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e74:	4610      	mov	r0, r2
 8005e76:	4798      	blx	r3
 8005e78:	e000      	b.n	8005e7c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e7a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d03e      	beq.n	8005f04 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d112      	bne.n	8005eba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec4:	2b40      	cmp	r3, #64	; 0x40
 8005ec6:	d112      	bne.n	8005eee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	f043 0204 	orr.w	r2, r3, #4
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f8b3 	bl	8006078 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005f12:	e039      	b.n	8005f88 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
 8005f16:	2b2a      	cmp	r3, #42	; 0x2a
 8005f18:	d109      	bne.n	8005f2e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2228      	movs	r2, #40	; 0x28
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7fc fc3d 	bl	80027a8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b28      	cmp	r3, #40	; 0x28
 8005f38:	d111      	bne.n	8005f5e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a15      	ldr	r2, [pc, #84]	; (8005f94 <I2C_Slave_STOPF+0x25c>)
 8005f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff f84b 	bl	8004ff2 <HAL_I2C_ListenCpltCallback>
}
 8005f5c:	e014      	b.n	8005f88 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	2b22      	cmp	r3, #34	; 0x22
 8005f64:	d002      	beq.n	8005f6c <I2C_Slave_STOPF+0x234>
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	2b22      	cmp	r3, #34	; 0x22
 8005f6a:	d10d      	bne.n	8005f88 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fc fc10 	bl	80027a8 <HAL_I2C_SlaveRxCpltCallback>
}
 8005f88:	bf00      	nop
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	080062dd 	.word	0x080062dd
 8005f94:	ffff0000 	.word	0xffff0000

08005f98 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d002      	beq.n	8005fba <I2C_Slave_AF+0x22>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d129      	bne.n	800600e <I2C_Slave_AF+0x76>
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
 8005fbc:	2b28      	cmp	r3, #40	; 0x28
 8005fbe:	d126      	bne.n	800600e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a2c      	ldr	r2, [pc, #176]	; (8006074 <I2C_Slave_AF+0xdc>)
 8005fc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fd4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fde:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fe fff3 	bl	8004ff2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800600c:	e02e      	b.n	800606c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	2b21      	cmp	r3, #33	; 0x21
 8006012:	d126      	bne.n	8006062 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a17      	ldr	r2, [pc, #92]	; (8006074 <I2C_Slave_AF+0xdc>)
 8006018:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2221      	movs	r2, #33	; 0x21
 800601e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800603e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006048:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006058:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fe ffb1 	bl	8004fc2 <HAL_I2C_SlaveTxCpltCallback>
}
 8006060:	e004      	b.n	800606c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800606a:	615a      	str	r2, [r3, #20]
}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	ffff0000 	.word	0xffff0000

08006078 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006086:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800608e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006090:	7bbb      	ldrb	r3, [r7, #14]
 8006092:	2b10      	cmp	r3, #16
 8006094:	d002      	beq.n	800609c <I2C_ITError+0x24>
 8006096:	7bbb      	ldrb	r3, [r7, #14]
 8006098:	2b40      	cmp	r3, #64	; 0x40
 800609a:	d10a      	bne.n	80060b2 <I2C_ITError+0x3a>
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b22      	cmp	r3, #34	; 0x22
 80060a0:	d107      	bne.n	80060b2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060b8:	2b28      	cmp	r3, #40	; 0x28
 80060ba:	d107      	bne.n	80060cc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2228      	movs	r2, #40	; 0x28
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80060ca:	e015      	b.n	80060f8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060da:	d00a      	beq.n	80060f2 <I2C_ITError+0x7a>
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	2b60      	cmp	r3, #96	; 0x60
 80060e0:	d007      	beq.n	80060f2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006106:	d162      	bne.n	80061ce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006116:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b01      	cmp	r3, #1
 8006124:	d020      	beq.n	8006168 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612a:	4a6a      	ldr	r2, [pc, #424]	; (80062d4 <I2C_ITError+0x25c>)
 800612c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006132:	4618      	mov	r0, r3
 8006134:	f7fd fbe6 	bl	8003904 <HAL_DMA_Abort_IT>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 8089 	beq.w	8006252 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0201 	bic.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006162:	4610      	mov	r0, r2
 8006164:	4798      	blx	r3
 8006166:	e074      	b.n	8006252 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	4a59      	ldr	r2, [pc, #356]	; (80062d4 <I2C_ITError+0x25c>)
 800616e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	4618      	mov	r0, r3
 8006176:	f7fd fbc5 	bl	8003904 <HAL_DMA_Abort_IT>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d068      	beq.n	8006252 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d10b      	bne.n	80061a6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	b2d2      	uxtb	r2, r2
 800619a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0201 	bic.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061c8:	4610      	mov	r0, r2
 80061ca:	4798      	blx	r3
 80061cc:	e041      	b.n	8006252 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b60      	cmp	r3, #96	; 0x60
 80061d8:	d125      	bne.n	8006226 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f2:	2b40      	cmp	r3, #64	; 0x40
 80061f4:	d10b      	bne.n	800620e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0201 	bic.w	r2, r2, #1
 800621c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fe ff0f 	bl	8005042 <HAL_I2C_AbortCpltCallback>
 8006224:	e015      	b.n	8006252 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006230:	2b40      	cmp	r3, #64	; 0x40
 8006232:	d10b      	bne.n	800624c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7fe feee 	bl	800502e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10e      	bne.n	8006280 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006268:	2b00      	cmp	r3, #0
 800626a:	d109      	bne.n	8006280 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006272:	2b00      	cmp	r3, #0
 8006274:	d104      	bne.n	8006280 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800628e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006296:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	d113      	bne.n	80062cc <I2C_ITError+0x254>
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	2b28      	cmp	r3, #40	; 0x28
 80062a8:	d110      	bne.n	80062cc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a0a      	ldr	r2, [pc, #40]	; (80062d8 <I2C_ITError+0x260>)
 80062ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fe fe93 	bl	8004ff2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062cc:	bf00      	nop
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	080062dd 	.word	0x080062dd
 80062d8:	ffff0000 	.word	0xffff0000

080062dc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80062f6:	4b4b      	ldr	r3, [pc, #300]	; (8006424 <I2C_DMAAbort+0x148>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	08db      	lsrs	r3, r3, #3
 80062fc:	4a4a      	ldr	r2, [pc, #296]	; (8006428 <I2C_DMAAbort+0x14c>)
 80062fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006302:	0a1a      	lsrs	r2, r3, #8
 8006304:	4613      	mov	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	00da      	lsls	r2, r3, #3
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d106      	bne.n	8006324 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	f043 0220 	orr.w	r2, r3, #32
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006322:	e00a      	b.n	800633a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3b01      	subs	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006338:	d0ea      	beq.n	8006310 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006346:	2200      	movs	r2, #0
 8006348:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006356:	2200      	movs	r2, #0
 8006358:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006368:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2200      	movs	r2, #0
 800636e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637c:	2200      	movs	r2, #0
 800637e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	2200      	movs	r2, #0
 800638e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0201 	bic.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b60      	cmp	r3, #96	; 0x60
 80063aa:	d10e      	bne.n	80063ca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2200      	movs	r2, #0
 80063c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80063c2:	6978      	ldr	r0, [r7, #20]
 80063c4:	f7fe fe3d 	bl	8005042 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063c8:	e027      	b.n	800641a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063ca:	7cfb      	ldrb	r3, [r7, #19]
 80063cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80063d0:	2b28      	cmp	r3, #40	; 0x28
 80063d2:	d117      	bne.n	8006404 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0201 	orr.w	r2, r2, #1
 80063e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2200      	movs	r2, #0
 80063f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2228      	movs	r2, #40	; 0x28
 80063fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006402:	e007      	b.n	8006414 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2220      	movs	r2, #32
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006414:	6978      	ldr	r0, [r7, #20]
 8006416:	f7fe fe0a 	bl	800502e <HAL_I2C_ErrorCallback>
}
 800641a:	bf00      	nop
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	20000014 	.word	0x20000014
 8006428:	14f8b589 	.word	0x14f8b589

0800642c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006438:	4b13      	ldr	r3, [pc, #76]	; (8006488 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	08db      	lsrs	r3, r3, #3
 800643e:	4a13      	ldr	r2, [pc, #76]	; (800648c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006440:	fba2 2303 	umull	r2, r3, r2, r3
 8006444:	0a1a      	lsrs	r2, r3, #8
 8006446:	4613      	mov	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3b01      	subs	r3, #1
 8006452:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d107      	bne.n	800646a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	f043 0220 	orr.w	r2, r3, #32
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e008      	b.n	800647c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006478:	d0e9      	beq.n	800644e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	20000014 	.word	0x20000014
 800648c:	14f8b589 	.word	0x14f8b589

08006490 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80064a0:	d103      	bne.n	80064aa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80064a8:	e007      	b.n	80064ba <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ae:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80064b2:	d102      	bne.n	80064ba <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2208      	movs	r2, #8
 80064b8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80064c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064c8:	b08f      	sub	sp, #60	; 0x3c
 80064ca:	af0a      	add	r7, sp, #40	; 0x28
 80064cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e10f      	b.n	80066f8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f006 f836 	bl	800c564 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2203      	movs	r2, #3
 80064fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4618      	mov	r0, r3
 8006518:	f002 ffcf 	bl	80094ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	603b      	str	r3, [r7, #0]
 8006522:	687e      	ldr	r6, [r7, #4]
 8006524:	466d      	mov	r5, sp
 8006526:	f106 0410 	add.w	r4, r6, #16
 800652a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800652c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800652e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006532:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006536:	e885 0003 	stmia.w	r5, {r0, r1}
 800653a:	1d33      	adds	r3, r6, #4
 800653c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800653e:	6838      	ldr	r0, [r7, #0]
 8006540:	f002 fea6 	bl	8009290 <USB_CoreInit>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2202      	movs	r2, #2
 800654e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e0d0      	b.n	80066f8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2100      	movs	r1, #0
 800655c:	4618      	mov	r0, r3
 800655e:	f002 ffbd 	bl	80094dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006562:	2300      	movs	r3, #0
 8006564:	73fb      	strb	r3, [r7, #15]
 8006566:	e04a      	b.n	80065fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006568:	7bfa      	ldrb	r2, [r7, #15]
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	4613      	mov	r3, r2
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	1a9b      	subs	r3, r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	440b      	add	r3, r1
 8006576:	333d      	adds	r3, #61	; 0x3d
 8006578:	2201      	movs	r2, #1
 800657a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800657c:	7bfa      	ldrb	r2, [r7, #15]
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	4613      	mov	r3, r2
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	1a9b      	subs	r3, r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	333c      	adds	r3, #60	; 0x3c
 800658c:	7bfa      	ldrb	r2, [r7, #15]
 800658e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006590:	7bfa      	ldrb	r2, [r7, #15]
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	b298      	uxth	r0, r3
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	4613      	mov	r3, r2
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	1a9b      	subs	r3, r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	440b      	add	r3, r1
 80065a2:	3342      	adds	r3, #66	; 0x42
 80065a4:	4602      	mov	r2, r0
 80065a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80065a8:	7bfa      	ldrb	r2, [r7, #15]
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	4613      	mov	r3, r2
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	1a9b      	subs	r3, r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	440b      	add	r3, r1
 80065b6:	333f      	adds	r3, #63	; 0x3f
 80065b8:	2200      	movs	r2, #0
 80065ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80065bc:	7bfa      	ldrb	r2, [r7, #15]
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	4613      	mov	r3, r2
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	1a9b      	subs	r3, r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	440b      	add	r3, r1
 80065ca:	3344      	adds	r3, #68	; 0x44
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80065d0:	7bfa      	ldrb	r2, [r7, #15]
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	4613      	mov	r3, r2
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	1a9b      	subs	r3, r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	440b      	add	r3, r1
 80065de:	3348      	adds	r3, #72	; 0x48
 80065e0:	2200      	movs	r2, #0
 80065e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80065e4:	7bfa      	ldrb	r2, [r7, #15]
 80065e6:	6879      	ldr	r1, [r7, #4]
 80065e8:	4613      	mov	r3, r2
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	1a9b      	subs	r3, r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	3350      	adds	r3, #80	; 0x50
 80065f4:	2200      	movs	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	3301      	adds	r3, #1
 80065fc:	73fb      	strb	r3, [r7, #15]
 80065fe:	7bfa      	ldrb	r2, [r7, #15]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	429a      	cmp	r2, r3
 8006606:	d3af      	bcc.n	8006568 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006608:	2300      	movs	r3, #0
 800660a:	73fb      	strb	r3, [r7, #15]
 800660c:	e044      	b.n	8006698 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800660e:	7bfa      	ldrb	r2, [r7, #15]
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	4613      	mov	r3, r2
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	1a9b      	subs	r3, r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	440b      	add	r3, r1
 800661c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006620:	2200      	movs	r2, #0
 8006622:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006624:	7bfa      	ldrb	r2, [r7, #15]
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	4613      	mov	r3, r2
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	1a9b      	subs	r3, r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	440b      	add	r3, r1
 8006632:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006636:	7bfa      	ldrb	r2, [r7, #15]
 8006638:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800663a:	7bfa      	ldrb	r2, [r7, #15]
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	4613      	mov	r3, r2
 8006640:	00db      	lsls	r3, r3, #3
 8006642:	1a9b      	subs	r3, r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	440b      	add	r3, r1
 8006648:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800664c:	2200      	movs	r2, #0
 800664e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006650:	7bfa      	ldrb	r2, [r7, #15]
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	4613      	mov	r3, r2
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	1a9b      	subs	r3, r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	440b      	add	r3, r1
 800665e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006666:	7bfa      	ldrb	r2, [r7, #15]
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	4613      	mov	r3, r2
 800666c:	00db      	lsls	r3, r3, #3
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	440b      	add	r3, r1
 8006674:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800667c:	7bfa      	ldrb	r2, [r7, #15]
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	4613      	mov	r3, r2
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	3301      	adds	r3, #1
 8006696:	73fb      	strb	r3, [r7, #15]
 8006698:	7bfa      	ldrb	r2, [r7, #15]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d3b5      	bcc.n	800660e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	687e      	ldr	r6, [r7, #4]
 80066aa:	466d      	mov	r5, sp
 80066ac:	f106 0410 	add.w	r4, r6, #16
 80066b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80066bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80066c0:	1d33      	adds	r3, r6, #4
 80066c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066c4:	6838      	ldr	r0, [r7, #0]
 80066c6:	f002 ff33 	bl	8009530 <USB_DevInit>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d005      	beq.n	80066dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e00d      	b.n	80066f8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f003 ff7b 	bl	800a5ec <USB_DevDisconnect>

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006700 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <HAL_PCD_Start+0x1c>
 8006718:	2302      	movs	r3, #2
 800671a:	e020      	b.n	800675e <HAL_PCD_Start+0x5e>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006728:	2b01      	cmp	r3, #1
 800672a:	d109      	bne.n	8006740 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006730:	2b01      	cmp	r3, #1
 8006732:	d005      	beq.n	8006740 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4618      	mov	r0, r3
 8006746:	f002 fea7 	bl	8009498 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4618      	mov	r0, r3
 8006750:	f003 ff2b 	bl	800a5aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006766:	b590      	push	{r4, r7, lr}
 8006768:	b08d      	sub	sp, #52	; 0x34
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4618      	mov	r0, r3
 800677e:	f003 ffe9 	bl	800a754 <USB_GetMode>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	f040 839d 	bne.w	8006ec4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4618      	mov	r0, r3
 8006790:	f003 ff4d 	bl	800a62e <USB_ReadInterrupts>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 8393 	beq.w	8006ec2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f003 ff44 	bl	800a62e <USB_ReadInterrupts>
 80067a6:	4603      	mov	r3, r0
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d107      	bne.n	80067c0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	695a      	ldr	r2, [r3, #20]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f002 0202 	and.w	r2, r2, #2
 80067be:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f003 ff32 	bl	800a62e <USB_ReadInterrupts>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f003 0310 	and.w	r3, r3, #16
 80067d0:	2b10      	cmp	r3, #16
 80067d2:	d161      	bne.n	8006898 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0210 	bic.w	r2, r2, #16
 80067e2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	f003 020f 	and.w	r2, r3, #15
 80067f0:	4613      	mov	r3, r2
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	1a9b      	subs	r3, r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	4413      	add	r3, r2
 8006800:	3304      	adds	r3, #4
 8006802:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	0c5b      	lsrs	r3, r3, #17
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	2b02      	cmp	r3, #2
 800680e:	d124      	bne.n	800685a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006816:	4013      	ands	r3, r2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d035      	beq.n	8006888 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	091b      	lsrs	r3, r3, #4
 8006824:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006826:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800682a:	b29b      	uxth	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	6a38      	ldr	r0, [r7, #32]
 8006830:	f003 fd98 	bl	800a364 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	091b      	lsrs	r3, r3, #4
 800683c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006840:	441a      	add	r2, r3
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	699a      	ldr	r2, [r3, #24]
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	091b      	lsrs	r3, r3, #4
 800684e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006852:	441a      	add	r2, r3
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	619a      	str	r2, [r3, #24]
 8006858:	e016      	b.n	8006888 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	0c5b      	lsrs	r3, r3, #17
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	2b06      	cmp	r3, #6
 8006864:	d110      	bne.n	8006888 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800686c:	2208      	movs	r2, #8
 800686e:	4619      	mov	r1, r3
 8006870:	6a38      	ldr	r0, [r7, #32]
 8006872:	f003 fd77 	bl	800a364 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	699a      	ldr	r2, [r3, #24]
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	091b      	lsrs	r3, r3, #4
 800687e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006882:	441a      	add	r2, r3
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699a      	ldr	r2, [r3, #24]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0210 	orr.w	r2, r2, #16
 8006896:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f003 fec6 	bl	800a62e <USB_ReadInterrupts>
 80068a2:	4603      	mov	r3, r0
 80068a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068ac:	d16e      	bne.n	800698c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f003 fecc 	bl	800a654 <USB_ReadDevAllOutEpInterrupt>
 80068bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80068be:	e062      	b.n	8006986 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d057      	beq.n	800697a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	4611      	mov	r1, r2
 80068d4:	4618      	mov	r0, r3
 80068d6:	f003 fef1 	bl	800a6bc <USB_ReadDevOutEPInterrupt>
 80068da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00c      	beq.n	8006900 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f2:	461a      	mov	r2, r3
 80068f4:	2301      	movs	r3, #1
 80068f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80068f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fdb0 	bl	8007460 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00c      	beq.n	8006924 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006916:	461a      	mov	r2, r3
 8006918:	2308      	movs	r3, #8
 800691a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800691c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 feaa 	bl	8007678 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f003 0310 	and.w	r3, r3, #16
 800692a:	2b00      	cmp	r3, #0
 800692c:	d008      	beq.n	8006940 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693a:	461a      	mov	r2, r3
 800693c:	2310      	movs	r3, #16
 800693e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d008      	beq.n	800695c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006956:	461a      	mov	r2, r3
 8006958:	2320      	movs	r3, #32
 800695a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d009      	beq.n	800697a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006972:	461a      	mov	r2, r3
 8006974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006978:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	3301      	adds	r3, #1
 800697e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	085b      	lsrs	r3, r3, #1
 8006984:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006988:	2b00      	cmp	r3, #0
 800698a:	d199      	bne.n	80068c0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4618      	mov	r0, r3
 8006992:	f003 fe4c 	bl	800a62e <USB_ReadInterrupts>
 8006996:	4603      	mov	r3, r0
 8006998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800699c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069a0:	f040 80c0 	bne.w	8006b24 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f003 fe6d 	bl	800a688 <USB_ReadDevAllInEpInterrupt>
 80069ae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80069b4:	e0b2      	b.n	8006b1c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 80a7 	beq.w	8006b10 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	4611      	mov	r1, r2
 80069cc:	4618      	mov	r0, r3
 80069ce:	f003 fe93 	bl	800a6f8 <USB_ReadDevInEPInterrupt>
 80069d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d057      	beq.n	8006a8e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	2201      	movs	r2, #1
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	43db      	mvns	r3, r3
 80069f8:	69f9      	ldr	r1, [r7, #28]
 80069fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069fe:	4013      	ands	r3, r2
 8006a00:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0e:	461a      	mov	r2, r3
 8006a10:	2301      	movs	r3, #1
 8006a12:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d132      	bne.n	8006a82 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a20:	4613      	mov	r3, r2
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	1a9b      	subs	r3, r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	3348      	adds	r3, #72	; 0x48
 8006a2c:	6819      	ldr	r1, [r3, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a32:	4613      	mov	r3, r2
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	1a9b      	subs	r3, r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4403      	add	r3, r0
 8006a3c:	3344      	adds	r3, #68	; 0x44
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4419      	add	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a46:	4613      	mov	r3, r2
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	1a9b      	subs	r3, r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4403      	add	r3, r0
 8006a50:	3348      	adds	r3, #72	; 0x48
 8006a52:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d113      	bne.n	8006a82 <HAL_PCD_IRQHandler+0x31c>
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a5e:	4613      	mov	r3, r2
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	1a9b      	subs	r3, r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	3350      	adds	r3, #80	; 0x50
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d108      	bne.n	8006a82 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	f003 fe9b 	bl	800a7b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f005 fdfa 	bl	800c682 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f003 0308 	and.w	r3, r3, #8
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d008      	beq.n	8006aaa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	2308      	movs	r3, #8
 8006aa8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f003 0310 	and.w	r3, r3, #16
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d008      	beq.n	8006ac6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	2310      	movs	r3, #16
 8006ac4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d008      	beq.n	8006ae2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006adc:	461a      	mov	r2, r3
 8006ade:	2340      	movs	r3, #64	; 0x40
 8006ae0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d008      	beq.n	8006afe <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af8:	461a      	mov	r2, r3
 8006afa:	2302      	movs	r3, #2
 8006afc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d003      	beq.n	8006b10 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fc1b 	bl	8007346 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	3301      	adds	r3, #1
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	085b      	lsrs	r3, r3, #1
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f47f af49 	bne.w	80069b6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f003 fd80 	bl	800a62e <USB_ReadInterrupts>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b38:	d122      	bne.n	8006b80 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	69fa      	ldr	r2, [r7, #28]
 8006b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b48:	f023 0301 	bic.w	r3, r3, #1
 8006b4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d108      	bne.n	8006b6a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006b60:	2100      	movs	r1, #0
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fe26 	bl	80077b4 <HAL_PCDEx_LPM_Callback>
 8006b68:	e002      	b.n	8006b70 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f005 fe00 	bl	800c770 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	695a      	ldr	r2, [r3, #20]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f003 fd52 	bl	800a62e <USB_ReadInterrupts>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b94:	d112      	bne.n	8006bbc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d102      	bne.n	8006bac <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f005 fdbc 	bl	800c724 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695a      	ldr	r2, [r3, #20]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006bba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f003 fd34 	bl	800a62e <USB_ReadInterrupts>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd0:	f040 80c7 	bne.w	8006d62 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	69fa      	ldr	r2, [r7, #28]
 8006bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006be2:	f023 0301 	bic.w	r3, r3, #1
 8006be6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2110      	movs	r1, #16
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f002 fe02 	bl	80097f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf8:	e056      	b.n	8006ca8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c06:	461a      	mov	r2, r3
 8006c08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c1e:	0151      	lsls	r1, r2, #5
 8006c20:	69fa      	ldr	r2, [r7, #28]
 8006c22:	440a      	add	r2, r1
 8006c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c2c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c72:	0151      	lsls	r1, r2, #5
 8006c74:	69fa      	ldr	r2, [r7, #28]
 8006c76:	440a      	add	r2, r1
 8006c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ca0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d3a3      	bcc.n	8006bfa <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cc0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006cc4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d016      	beq.n	8006cfc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cd8:	69fa      	ldr	r2, [r7, #28]
 8006cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cde:	f043 030b 	orr.w	r3, r3, #11
 8006ce2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cee:	69fa      	ldr	r2, [r7, #28]
 8006cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cf4:	f043 030b 	orr.w	r3, r3, #11
 8006cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8006cfa:	e015      	b.n	8006d28 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	69fa      	ldr	r2, [r7, #28]
 8006d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d0e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006d12:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	69fa      	ldr	r2, [r7, #28]
 8006d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d22:	f043 030b 	orr.w	r3, r3, #11
 8006d26:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d3a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f003 fd33 	bl	800a7b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	695a      	ldr	r2, [r3, #20]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006d60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f003 fc61 	bl	800a62e <USB_ReadInterrupts>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d76:	d124      	bne.n	8006dc2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f003 fcf7 	bl	800a770 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f002 fd97 	bl	80098ba <USB_GetDevSpeed>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	461a      	mov	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681c      	ldr	r4, [r3, #0]
 8006d98:	f001 f920 	bl	8007fdc <HAL_RCC_GetHCLKFreq>
 8006d9c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	461a      	mov	r2, r3
 8006da6:	4620      	mov	r0, r4
 8006da8:	f002 fad4 	bl	8009354 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f005 fc90 	bl	800c6d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	695a      	ldr	r2, [r3, #20]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006dc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f003 fc31 	bl	800a62e <USB_ReadInterrupts>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f003 0308 	and.w	r3, r3, #8
 8006dd2:	2b08      	cmp	r3, #8
 8006dd4:	d10a      	bne.n	8006dec <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f005 fc6d 	bl	800c6b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695a      	ldr	r2, [r3, #20]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f002 0208 	and.w	r2, r2, #8
 8006dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f003 fc1c 	bl	800a62e <USB_ReadInterrupts>
 8006df6:	4603      	mov	r3, r0
 8006df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e00:	d10f      	bne.n	8006e22 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f005 fccf 	bl	800c7b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	695a      	ldr	r2, [r3, #20]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006e20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f003 fc01 	bl	800a62e <USB_ReadInterrupts>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e36:	d10f      	bne.n	8006e58 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f005 fca2 	bl	800c78c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	695a      	ldr	r2, [r3, #20]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f003 fbe6 	bl	800a62e <USB_ReadInterrupts>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e6c:	d10a      	bne.n	8006e84 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f005 fcb0 	bl	800c7d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	695a      	ldr	r2, [r3, #20]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006e82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f003 fbd0 	bl	800a62e <USB_ReadInterrupts>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d115      	bne.n	8006ec4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	f003 0304 	and.w	r3, r3, #4
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d002      	beq.n	8006eb0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f005 fca0 	bl	800c7f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6859      	ldr	r1, [r3, #4]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	605a      	str	r2, [r3, #4]
 8006ec0:	e000      	b.n	8006ec4 <HAL_PCD_IRQHandler+0x75e>
      return;
 8006ec2:	bf00      	nop
    }
  }
}
 8006ec4:	3734      	adds	r7, #52	; 0x34
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd90      	pop	{r4, r7, pc}

08006eca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b082      	sub	sp, #8
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <HAL_PCD_SetAddress+0x1a>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e013      	b.n	8006f0c <HAL_PCD_SetAddress+0x42>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	78fa      	ldrb	r2, [r7, #3]
 8006ef0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	78fa      	ldrb	r2, [r7, #3]
 8006efa:	4611      	mov	r1, r2
 8006efc:	4618      	mov	r0, r3
 8006efe:	f003 fb2e 	bl	800a55e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	461a      	mov	r2, r3
 8006f22:	4603      	mov	r3, r0
 8006f24:	70fb      	strb	r3, [r7, #3]
 8006f26:	460b      	mov	r3, r1
 8006f28:	803b      	strh	r3, [r7, #0]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	da0f      	bge.n	8006f5a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	f003 020f 	and.w	r2, r3, #15
 8006f40:	4613      	mov	r3, r2
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	1a9b      	subs	r3, r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	3338      	adds	r3, #56	; 0x38
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	3304      	adds	r3, #4
 8006f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	705a      	strb	r2, [r3, #1]
 8006f58:	e00f      	b.n	8006f7a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f5a:	78fb      	ldrb	r3, [r7, #3]
 8006f5c:	f003 020f 	and.w	r2, r3, #15
 8006f60:	4613      	mov	r3, r2
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	1a9b      	subs	r3, r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	4413      	add	r3, r2
 8006f70:	3304      	adds	r3, #4
 8006f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006f7a:	78fb      	ldrb	r3, [r7, #3]
 8006f7c:	f003 030f 	and.w	r3, r3, #15
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006f86:	883a      	ldrh	r2, [r7, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	78ba      	ldrb	r2, [r7, #2]
 8006f90:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	785b      	ldrb	r3, [r3, #1]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d004      	beq.n	8006fa4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006fa4:	78bb      	ldrb	r3, [r7, #2]
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d102      	bne.n	8006fb0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d101      	bne.n	8006fbe <HAL_PCD_EP_Open+0xaa>
 8006fba:	2302      	movs	r3, #2
 8006fbc:	e00e      	b.n	8006fdc <HAL_PCD_EP_Open+0xc8>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68f9      	ldr	r1, [r7, #12]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f002 fc99 	bl	8009904 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006fda:	7afb      	ldrb	r3, [r7, #11]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	da0f      	bge.n	8007018 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	f003 020f 	and.w	r2, r3, #15
 8006ffe:	4613      	mov	r3, r2
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	1a9b      	subs	r3, r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	3338      	adds	r3, #56	; 0x38
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	4413      	add	r3, r2
 800700c:	3304      	adds	r3, #4
 800700e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2201      	movs	r2, #1
 8007014:	705a      	strb	r2, [r3, #1]
 8007016:	e00f      	b.n	8007038 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	f003 020f 	and.w	r2, r3, #15
 800701e:	4613      	mov	r3, r2
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	4413      	add	r3, r2
 800702e:	3304      	adds	r3, #4
 8007030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007038:	78fb      	ldrb	r3, [r7, #3]
 800703a:	f003 030f 	and.w	r3, r3, #15
 800703e:	b2da      	uxtb	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800704a:	2b01      	cmp	r3, #1
 800704c:	d101      	bne.n	8007052 <HAL_PCD_EP_Close+0x6e>
 800704e:	2302      	movs	r3, #2
 8007050:	e00e      	b.n	8007070 <HAL_PCD_EP_Close+0x8c>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68f9      	ldr	r1, [r7, #12]
 8007060:	4618      	mov	r0, r3
 8007062:	f002 fcd7 	bl	8009a14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	607a      	str	r2, [r7, #4]
 8007082:	603b      	str	r3, [r7, #0]
 8007084:	460b      	mov	r3, r1
 8007086:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007088:	7afb      	ldrb	r3, [r7, #11]
 800708a:	f003 020f 	and.w	r2, r3, #15
 800708e:	4613      	mov	r3, r2
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	1a9b      	subs	r3, r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4413      	add	r3, r2
 800709e:	3304      	adds	r3, #4
 80070a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2200      	movs	r2, #0
 80070b2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	2200      	movs	r2, #0
 80070b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070ba:	7afb      	ldrb	r3, [r7, #11]
 80070bc:	f003 030f 	and.w	r3, r3, #15
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d102      	bne.n	80070d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80070d4:	7afb      	ldrb	r3, [r7, #11]
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d109      	bne.n	80070f2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6818      	ldr	r0, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	6979      	ldr	r1, [r7, #20]
 80070ec:	f002 ffb2 	bl	800a054 <USB_EP0StartXfer>
 80070f0:	e008      	b.n	8007104 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6818      	ldr	r0, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	461a      	mov	r2, r3
 80070fe:	6979      	ldr	r1, [r7, #20]
 8007100:	f002 fd64 	bl	8009bcc <USB_EPStartXfer>
  }

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	460b      	mov	r3, r1
 8007118:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	f003 020f 	and.w	r2, r3, #15
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	1a9b      	subs	r3, r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007130:	681b      	ldr	r3, [r3, #0]
}
 8007132:	4618      	mov	r0, r3
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b086      	sub	sp, #24
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	607a      	str	r2, [r7, #4]
 8007148:	603b      	str	r3, [r7, #0]
 800714a:	460b      	mov	r3, r1
 800714c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800714e:	7afb      	ldrb	r3, [r7, #11]
 8007150:	f003 020f 	and.w	r2, r3, #15
 8007154:	4613      	mov	r3, r2
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	1a9b      	subs	r3, r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	3338      	adds	r3, #56	; 0x38
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	4413      	add	r3, r2
 8007162:	3304      	adds	r3, #4
 8007164:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2200      	movs	r2, #0
 8007176:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	2201      	movs	r2, #1
 800717c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800717e:	7afb      	ldrb	r3, [r7, #11]
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	b2da      	uxtb	r2, r3
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d102      	bne.n	8007198 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007198:	7afb      	ldrb	r3, [r7, #11]
 800719a:	f003 030f 	and.w	r3, r3, #15
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d109      	bne.n	80071b6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6818      	ldr	r0, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	461a      	mov	r2, r3
 80071ae:	6979      	ldr	r1, [r7, #20]
 80071b0:	f002 ff50 	bl	800a054 <USB_EP0StartXfer>
 80071b4:	e008      	b.n	80071c8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	461a      	mov	r2, r3
 80071c2:	6979      	ldr	r1, [r7, #20]
 80071c4:	f002 fd02 	bl	8009bcc <USB_EPStartXfer>
  }

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	460b      	mov	r3, r1
 80071dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80071de:	78fb      	ldrb	r3, [r7, #3]
 80071e0:	f003 020f 	and.w	r2, r3, #15
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d901      	bls.n	80071f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e050      	b.n	8007292 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80071f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	da0f      	bge.n	8007218 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071f8:	78fb      	ldrb	r3, [r7, #3]
 80071fa:	f003 020f 	and.w	r2, r3, #15
 80071fe:	4613      	mov	r3, r2
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	1a9b      	subs	r3, r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	3338      	adds	r3, #56	; 0x38
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	4413      	add	r3, r2
 800720c:	3304      	adds	r3, #4
 800720e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2201      	movs	r2, #1
 8007214:	705a      	strb	r2, [r3, #1]
 8007216:	e00d      	b.n	8007234 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007218:	78fa      	ldrb	r2, [r7, #3]
 800721a:	4613      	mov	r3, r2
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	1a9b      	subs	r3, r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	4413      	add	r3, r2
 800722a:	3304      	adds	r3, #4
 800722c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2201      	movs	r2, #1
 8007238:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800723a:	78fb      	ldrb	r3, [r7, #3]
 800723c:	f003 030f 	and.w	r3, r3, #15
 8007240:	b2da      	uxtb	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800724c:	2b01      	cmp	r3, #1
 800724e:	d101      	bne.n	8007254 <HAL_PCD_EP_SetStall+0x82>
 8007250:	2302      	movs	r3, #2
 8007252:	e01e      	b.n	8007292 <HAL_PCD_EP_SetStall+0xc0>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68f9      	ldr	r1, [r7, #12]
 8007262:	4618      	mov	r0, r3
 8007264:	f003 f8a7 	bl	800a3b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007268:	78fb      	ldrb	r3, [r7, #3]
 800726a:	f003 030f 	and.w	r3, r3, #15
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6818      	ldr	r0, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	b2d9      	uxtb	r1, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007282:	461a      	mov	r2, r3
 8007284:	f003 fa98 	bl	800a7b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	460b      	mov	r3, r1
 80072a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80072a6:	78fb      	ldrb	r3, [r7, #3]
 80072a8:	f003 020f 	and.w	r2, r3, #15
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d901      	bls.n	80072b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e042      	b.n	800733e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80072b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	da0f      	bge.n	80072e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	f003 020f 	and.w	r2, r3, #15
 80072c6:	4613      	mov	r3, r2
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	1a9b      	subs	r3, r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	3338      	adds	r3, #56	; 0x38
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	4413      	add	r3, r2
 80072d4:	3304      	adds	r3, #4
 80072d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	705a      	strb	r2, [r3, #1]
 80072de:	e00f      	b.n	8007300 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072e0:	78fb      	ldrb	r3, [r7, #3]
 80072e2:	f003 020f 	and.w	r2, r3, #15
 80072e6:	4613      	mov	r3, r2
 80072e8:	00db      	lsls	r3, r3, #3
 80072ea:	1a9b      	subs	r3, r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	4413      	add	r3, r2
 80072f6:	3304      	adds	r3, #4
 80072f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007306:	78fb      	ldrb	r3, [r7, #3]
 8007308:	f003 030f 	and.w	r3, r3, #15
 800730c:	b2da      	uxtb	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_PCD_EP_ClrStall+0x86>
 800731c:	2302      	movs	r3, #2
 800731e:	e00e      	b.n	800733e <HAL_PCD_EP_ClrStall+0xa4>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68f9      	ldr	r1, [r7, #12]
 800732e:	4618      	mov	r0, r3
 8007330:	f003 f8af 	bl	800a492 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b08a      	sub	sp, #40	; 0x28
 800734a:	af02      	add	r7, sp, #8
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	4613      	mov	r3, r2
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	1a9b      	subs	r3, r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	3338      	adds	r3, #56	; 0x38
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	4413      	add	r3, r2
 800736a:	3304      	adds	r3, #4
 800736c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	429a      	cmp	r2, r3
 8007378:	d901      	bls.n	800737e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e06c      	b.n	8007458 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	695a      	ldr	r2, [r3, #20]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	429a      	cmp	r2, r3
 8007392:	d902      	bls.n	800739a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	3303      	adds	r3, #3
 800739e:	089b      	lsrs	r3, r3, #2
 80073a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80073a2:	e02b      	b.n	80073fc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	695a      	ldr	r2, [r3, #20]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d902      	bls.n	80073c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	3303      	adds	r3, #3
 80073c4:	089b      	lsrs	r3, r3, #2
 80073c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	68d9      	ldr	r1, [r3, #12]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	4603      	mov	r3, r0
 80073de:	6978      	ldr	r0, [r7, #20]
 80073e0:	f002 ff8b 	bl	800a2fa <USB_WritePacket>

    ep->xfer_buff  += len;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	68da      	ldr	r2, [r3, #12]
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	441a      	add	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	699a      	ldr	r2, [r3, #24]
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	441a      	add	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	b29b      	uxth	r3, r3
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	429a      	cmp	r2, r3
 8007410:	d809      	bhi.n	8007426 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800741a:	429a      	cmp	r2, r3
 800741c:	d203      	bcs.n	8007426 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1be      	bne.n	80073a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	695a      	ldr	r2, [r3, #20]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	429a      	cmp	r2, r3
 8007430:	d811      	bhi.n	8007456 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	2201      	movs	r2, #1
 800743a:	fa02 f303 	lsl.w	r3, r2, r3
 800743e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	43db      	mvns	r3, r3
 800744c:	6939      	ldr	r1, [r7, #16]
 800744e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007452:	4013      	ands	r3, r2
 8007454:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3720      	adds	r7, #32
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	333c      	adds	r3, #60	; 0x3c
 8007478:	3304      	adds	r3, #4
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	4413      	add	r3, r2
 8007486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	2b01      	cmp	r3, #1
 8007494:	f040 80a0 	bne.w	80075d8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f003 0308 	and.w	r3, r3, #8
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d015      	beq.n	80074ce <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	4a72      	ldr	r2, [pc, #456]	; (8007670 <PCD_EP_OutXfrComplete_int+0x210>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	f240 80dd 	bls.w	8007666 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 80d7 	beq.w	8007666 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c4:	461a      	mov	r2, r3
 80074c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ca:	6093      	str	r3, [r2, #8]
 80074cc:	e0cb      	b.n	8007666 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f003 0320 	and.w	r3, r3, #32
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d009      	beq.n	80074ec <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e4:	461a      	mov	r2, r3
 80074e6:	2320      	movs	r3, #32
 80074e8:	6093      	str	r3, [r2, #8]
 80074ea:	e0bc      	b.n	8007666 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f040 80b7 	bne.w	8007666 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4a5d      	ldr	r2, [pc, #372]	; (8007670 <PCD_EP_OutXfrComplete_int+0x210>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d90f      	bls.n	8007520 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007516:	461a      	mov	r2, r3
 8007518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800751c:	6093      	str	r3, [r2, #8]
 800751e:	e0a2      	b.n	8007666 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007520:	6879      	ldr	r1, [r7, #4]
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	4613      	mov	r3, r2
 8007526:	00db      	lsls	r3, r3, #3
 8007528:	1a9b      	subs	r3, r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	440b      	add	r3, r1
 800752e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007532:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	0159      	lsls	r1, r3, #5
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	440b      	add	r3, r1
 800753c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007546:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	4613      	mov	r3, r2
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	1a9b      	subs	r3, r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4403      	add	r3, r0
 8007556:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800755a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800755c:	6879      	ldr	r1, [r7, #4]
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	4613      	mov	r3, r2
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	1a9b      	subs	r3, r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	440b      	add	r3, r1
 800756a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800756e:	6819      	ldr	r1, [r3, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	4613      	mov	r3, r2
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	1a9b      	subs	r3, r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4403      	add	r3, r0
 800757e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4419      	add	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	4613      	mov	r3, r2
 800758c:	00db      	lsls	r3, r3, #3
 800758e:	1a9b      	subs	r3, r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4403      	add	r3, r0
 8007594:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007598:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d114      	bne.n	80075ca <PCD_EP_OutXfrComplete_int+0x16a>
 80075a0:	6879      	ldr	r1, [r7, #4]
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	4613      	mov	r3, r2
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	1a9b      	subs	r3, r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	440b      	add	r3, r1
 80075ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d108      	bne.n	80075ca <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6818      	ldr	r0, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80075c2:	461a      	mov	r2, r3
 80075c4:	2101      	movs	r1, #1
 80075c6:	f003 f8f7 	bl	800a7b8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f005 f83b 	bl	800c64c <HAL_PCD_DataOutStageCallback>
 80075d6:	e046      	b.n	8007666 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4a26      	ldr	r2, [pc, #152]	; (8007674 <PCD_EP_OutXfrComplete_int+0x214>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d124      	bne.n	800762a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f6:	461a      	mov	r2, r3
 80075f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075fc:	6093      	str	r3, [r2, #8]
 80075fe:	e032      	b.n	8007666 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b00      	cmp	r3, #0
 8007608:	d008      	beq.n	800761c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007616:	461a      	mov	r2, r3
 8007618:	2320      	movs	r3, #32
 800761a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f005 f812 	bl	800c64c <HAL_PCD_DataOutStageCallback>
 8007628:	e01d      	b.n	8007666 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d114      	bne.n	800765a <PCD_EP_OutXfrComplete_int+0x1fa>
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	4613      	mov	r3, r2
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	1a9b      	subs	r3, r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	440b      	add	r3, r1
 800763e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d108      	bne.n	800765a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6818      	ldr	r0, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007652:	461a      	mov	r2, r3
 8007654:	2100      	movs	r1, #0
 8007656:	f003 f8af 	bl	800a7b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f004 fff3 	bl	800c64c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	4f54300a 	.word	0x4f54300a
 8007674:	4f54310a 	.word	0x4f54310a

08007678 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	333c      	adds	r3, #60	; 0x3c
 8007690:	3304      	adds	r3, #4
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	4413      	add	r3, r2
 800769e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	4a15      	ldr	r2, [pc, #84]	; (8007700 <PCD_EP_OutSetupPacket_int+0x88>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d90e      	bls.n	80076cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d009      	beq.n	80076cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c4:	461a      	mov	r2, r3
 80076c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f004 ffab 	bl	800c628 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	4a0a      	ldr	r2, [pc, #40]	; (8007700 <PCD_EP_OutSetupPacket_int+0x88>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d90c      	bls.n	80076f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d108      	bne.n	80076f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6818      	ldr	r0, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80076ec:	461a      	mov	r2, r3
 80076ee:	2101      	movs	r1, #1
 80076f0:	f003 f862 	bl	800a7b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	4f54300a 	.word	0x4f54300a

08007704 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	70fb      	strb	r3, [r7, #3]
 8007710:	4613      	mov	r3, r2
 8007712:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800771c:	78fb      	ldrb	r3, [r7, #3]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d107      	bne.n	8007732 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007722:	883b      	ldrh	r3, [r7, #0]
 8007724:	0419      	lsls	r1, r3, #16
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	430a      	orrs	r2, r1
 800772e:	629a      	str	r2, [r3, #40]	; 0x28
 8007730:	e028      	b.n	8007784 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007738:	0c1b      	lsrs	r3, r3, #16
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	4413      	add	r3, r2
 800773e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007740:	2300      	movs	r3, #0
 8007742:	73fb      	strb	r3, [r7, #15]
 8007744:	e00d      	b.n	8007762 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	7bfb      	ldrb	r3, [r7, #15]
 800774c:	3340      	adds	r3, #64	; 0x40
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	0c1b      	lsrs	r3, r3, #16
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	4413      	add	r3, r2
 800775a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800775c:	7bfb      	ldrb	r3, [r7, #15]
 800775e:	3301      	adds	r3, #1
 8007760:	73fb      	strb	r3, [r7, #15]
 8007762:	7bfa      	ldrb	r2, [r7, #15]
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	3b01      	subs	r3, #1
 8007768:	429a      	cmp	r2, r3
 800776a:	d3ec      	bcc.n	8007746 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800776c:	883b      	ldrh	r3, [r7, #0]
 800776e:	0418      	lsls	r0, r3, #16
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6819      	ldr	r1, [r3, #0]
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	3b01      	subs	r3, #1
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	4302      	orrs	r2, r0
 800777c:	3340      	adds	r3, #64	; 0x40
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	460b      	mov	r3, r1
 800779c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	887a      	ldrh	r2, [r7, #2]
 80077a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e25b      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d075      	beq.n	80078d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077ea:	4ba3      	ldr	r3, [pc, #652]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f003 030c 	and.w	r3, r3, #12
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d00c      	beq.n	8007810 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077f6:	4ba0      	ldr	r3, [pc, #640]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077fe:	2b08      	cmp	r3, #8
 8007800:	d112      	bne.n	8007828 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007802:	4b9d      	ldr	r3, [pc, #628]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800780a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800780e:	d10b      	bne.n	8007828 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007810:	4b99      	ldr	r3, [pc, #612]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d05b      	beq.n	80078d4 <HAL_RCC_OscConfig+0x108>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d157      	bne.n	80078d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e236      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007830:	d106      	bne.n	8007840 <HAL_RCC_OscConfig+0x74>
 8007832:	4b91      	ldr	r3, [pc, #580]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a90      	ldr	r2, [pc, #576]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	e01d      	b.n	800787c <HAL_RCC_OscConfig+0xb0>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007848:	d10c      	bne.n	8007864 <HAL_RCC_OscConfig+0x98>
 800784a:	4b8b      	ldr	r3, [pc, #556]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a8a      	ldr	r2, [pc, #552]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	4b88      	ldr	r3, [pc, #544]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a87      	ldr	r2, [pc, #540]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 800785c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	e00b      	b.n	800787c <HAL_RCC_OscConfig+0xb0>
 8007864:	4b84      	ldr	r3, [pc, #528]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a83      	ldr	r2, [pc, #524]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 800786a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	4b81      	ldr	r3, [pc, #516]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a80      	ldr	r2, [pc, #512]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800787a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d013      	beq.n	80078ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007884:	f7fb fbd6 	bl	8003034 <HAL_GetTick>
 8007888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800788a:	e008      	b.n	800789e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800788c:	f7fb fbd2 	bl	8003034 <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	2b64      	cmp	r3, #100	; 0x64
 8007898:	d901      	bls.n	800789e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e1fb      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800789e:	4b76      	ldr	r3, [pc, #472]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d0f0      	beq.n	800788c <HAL_RCC_OscConfig+0xc0>
 80078aa:	e014      	b.n	80078d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ac:	f7fb fbc2 	bl	8003034 <HAL_GetTick>
 80078b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078b2:	e008      	b.n	80078c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078b4:	f7fb fbbe 	bl	8003034 <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	2b64      	cmp	r3, #100	; 0x64
 80078c0:	d901      	bls.n	80078c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e1e7      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078c6:	4b6c      	ldr	r3, [pc, #432]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1f0      	bne.n	80078b4 <HAL_RCC_OscConfig+0xe8>
 80078d2:	e000      	b.n	80078d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d063      	beq.n	80079aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078e2:	4b65      	ldr	r3, [pc, #404]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f003 030c 	and.w	r3, r3, #12
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00b      	beq.n	8007906 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078ee:	4b62      	ldr	r3, [pc, #392]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078f6:	2b08      	cmp	r3, #8
 80078f8:	d11c      	bne.n	8007934 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078fa:	4b5f      	ldr	r3, [pc, #380]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d116      	bne.n	8007934 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007906:	4b5c      	ldr	r3, [pc, #368]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d005      	beq.n	800791e <HAL_RCC_OscConfig+0x152>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d001      	beq.n	800791e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e1bb      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800791e:	4b56      	ldr	r3, [pc, #344]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	4952      	ldr	r1, [pc, #328]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 800792e:	4313      	orrs	r3, r2
 8007930:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007932:	e03a      	b.n	80079aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d020      	beq.n	800797e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800793c:	4b4f      	ldr	r3, [pc, #316]	; (8007a7c <HAL_RCC_OscConfig+0x2b0>)
 800793e:	2201      	movs	r2, #1
 8007940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007942:	f7fb fb77 	bl	8003034 <HAL_GetTick>
 8007946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007948:	e008      	b.n	800795c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800794a:	f7fb fb73 	bl	8003034 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	2b02      	cmp	r3, #2
 8007956:	d901      	bls.n	800795c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e19c      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800795c:	4b46      	ldr	r3, [pc, #280]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	2b00      	cmp	r3, #0
 8007966:	d0f0      	beq.n	800794a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007968:	4b43      	ldr	r3, [pc, #268]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	00db      	lsls	r3, r3, #3
 8007976:	4940      	ldr	r1, [pc, #256]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007978:	4313      	orrs	r3, r2
 800797a:	600b      	str	r3, [r1, #0]
 800797c:	e015      	b.n	80079aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800797e:	4b3f      	ldr	r3, [pc, #252]	; (8007a7c <HAL_RCC_OscConfig+0x2b0>)
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007984:	f7fb fb56 	bl	8003034 <HAL_GetTick>
 8007988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800798a:	e008      	b.n	800799e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800798c:	f7fb fb52 	bl	8003034 <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d901      	bls.n	800799e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e17b      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800799e:	4b36      	ldr	r3, [pc, #216]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0302 	and.w	r3, r3, #2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1f0      	bne.n	800798c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0308 	and.w	r3, r3, #8
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d030      	beq.n	8007a18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d016      	beq.n	80079ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079be:	4b30      	ldr	r3, [pc, #192]	; (8007a80 <HAL_RCC_OscConfig+0x2b4>)
 80079c0:	2201      	movs	r2, #1
 80079c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c4:	f7fb fb36 	bl	8003034 <HAL_GetTick>
 80079c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079ca:	e008      	b.n	80079de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079cc:	f7fb fb32 	bl	8003034 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e15b      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079de:	4b26      	ldr	r3, [pc, #152]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 80079e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e2:	f003 0302 	and.w	r3, r3, #2
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0f0      	beq.n	80079cc <HAL_RCC_OscConfig+0x200>
 80079ea:	e015      	b.n	8007a18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079ec:	4b24      	ldr	r3, [pc, #144]	; (8007a80 <HAL_RCC_OscConfig+0x2b4>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079f2:	f7fb fb1f 	bl	8003034 <HAL_GetTick>
 80079f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079f8:	e008      	b.n	8007a0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079fa:	f7fb fb1b 	bl	8003034 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e144      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a0c:	4b1a      	ldr	r3, [pc, #104]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1f0      	bne.n	80079fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80a0 	beq.w	8007b66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a26:	2300      	movs	r3, #0
 8007a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a2a:	4b13      	ldr	r3, [pc, #76]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10f      	bne.n	8007a56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a36:	2300      	movs	r3, #0
 8007a38:	60bb      	str	r3, [r7, #8]
 8007a3a:	4b0f      	ldr	r3, [pc, #60]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	4a0e      	ldr	r2, [pc, #56]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a44:	6413      	str	r3, [r2, #64]	; 0x40
 8007a46:	4b0c      	ldr	r3, [pc, #48]	; (8007a78 <HAL_RCC_OscConfig+0x2ac>)
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a4e:	60bb      	str	r3, [r7, #8]
 8007a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a52:	2301      	movs	r3, #1
 8007a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a56:	4b0b      	ldr	r3, [pc, #44]	; (8007a84 <HAL_RCC_OscConfig+0x2b8>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d121      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a62:	4b08      	ldr	r3, [pc, #32]	; (8007a84 <HAL_RCC_OscConfig+0x2b8>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a07      	ldr	r2, [pc, #28]	; (8007a84 <HAL_RCC_OscConfig+0x2b8>)
 8007a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a6e:	f7fb fae1 	bl	8003034 <HAL_GetTick>
 8007a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a74:	e011      	b.n	8007a9a <HAL_RCC_OscConfig+0x2ce>
 8007a76:	bf00      	nop
 8007a78:	40023800 	.word	0x40023800
 8007a7c:	42470000 	.word	0x42470000
 8007a80:	42470e80 	.word	0x42470e80
 8007a84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a88:	f7fb fad4 	bl	8003034 <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d901      	bls.n	8007a9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e0fd      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a9a:	4b81      	ldr	r3, [pc, #516]	; (8007ca0 <HAL_RCC_OscConfig+0x4d4>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d0f0      	beq.n	8007a88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d106      	bne.n	8007abc <HAL_RCC_OscConfig+0x2f0>
 8007aae:	4b7d      	ldr	r3, [pc, #500]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab2:	4a7c      	ldr	r2, [pc, #496]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007ab4:	f043 0301 	orr.w	r3, r3, #1
 8007ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8007aba:	e01c      	b.n	8007af6 <HAL_RCC_OscConfig+0x32a>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	2b05      	cmp	r3, #5
 8007ac2:	d10c      	bne.n	8007ade <HAL_RCC_OscConfig+0x312>
 8007ac4:	4b77      	ldr	r3, [pc, #476]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac8:	4a76      	ldr	r2, [pc, #472]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007aca:	f043 0304 	orr.w	r3, r3, #4
 8007ace:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad0:	4b74      	ldr	r3, [pc, #464]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad4:	4a73      	ldr	r2, [pc, #460]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007ad6:	f043 0301 	orr.w	r3, r3, #1
 8007ada:	6713      	str	r3, [r2, #112]	; 0x70
 8007adc:	e00b      	b.n	8007af6 <HAL_RCC_OscConfig+0x32a>
 8007ade:	4b71      	ldr	r3, [pc, #452]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae2:	4a70      	ldr	r2, [pc, #448]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007ae4:	f023 0301 	bic.w	r3, r3, #1
 8007ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8007aea:	4b6e      	ldr	r3, [pc, #440]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aee:	4a6d      	ldr	r2, [pc, #436]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007af0:	f023 0304 	bic.w	r3, r3, #4
 8007af4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d015      	beq.n	8007b2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007afe:	f7fb fa99 	bl	8003034 <HAL_GetTick>
 8007b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b04:	e00a      	b.n	8007b1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b06:	f7fb fa95 	bl	8003034 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d901      	bls.n	8007b1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e0bc      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b1c:	4b61      	ldr	r3, [pc, #388]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0ee      	beq.n	8007b06 <HAL_RCC_OscConfig+0x33a>
 8007b28:	e014      	b.n	8007b54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b2a:	f7fb fa83 	bl	8003034 <HAL_GetTick>
 8007b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b30:	e00a      	b.n	8007b48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b32:	f7fb fa7f 	bl	8003034 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d901      	bls.n	8007b48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e0a6      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b48:	4b56      	ldr	r3, [pc, #344]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1ee      	bne.n	8007b32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d105      	bne.n	8007b66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b5a:	4b52      	ldr	r3, [pc, #328]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	4a51      	ldr	r2, [pc, #324]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 8092 	beq.w	8007c94 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b70:	4b4c      	ldr	r3, [pc, #304]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f003 030c 	and.w	r3, r3, #12
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	d05c      	beq.n	8007c36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d141      	bne.n	8007c08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b84:	4b48      	ldr	r3, [pc, #288]	; (8007ca8 <HAL_RCC_OscConfig+0x4dc>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b8a:	f7fb fa53 	bl	8003034 <HAL_GetTick>
 8007b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b90:	e008      	b.n	8007ba4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b92:	f7fb fa4f 	bl	8003034 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e078      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ba4:	4b3f      	ldr	r3, [pc, #252]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1f0      	bne.n	8007b92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	69da      	ldr	r2, [r3, #28]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	019b      	lsls	r3, r3, #6
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc6:	085b      	lsrs	r3, r3, #1
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	041b      	lsls	r3, r3, #16
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd2:	061b      	lsls	r3, r3, #24
 8007bd4:	4933      	ldr	r1, [pc, #204]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bda:	4b33      	ldr	r3, [pc, #204]	; (8007ca8 <HAL_RCC_OscConfig+0x4dc>)
 8007bdc:	2201      	movs	r2, #1
 8007bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007be0:	f7fb fa28 	bl	8003034 <HAL_GetTick>
 8007be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007be8:	f7fb fa24 	bl	8003034 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e04d      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bfa:	4b2a      	ldr	r3, [pc, #168]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0f0      	beq.n	8007be8 <HAL_RCC_OscConfig+0x41c>
 8007c06:	e045      	b.n	8007c94 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c08:	4b27      	ldr	r3, [pc, #156]	; (8007ca8 <HAL_RCC_OscConfig+0x4dc>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c0e:	f7fb fa11 	bl	8003034 <HAL_GetTick>
 8007c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c14:	e008      	b.n	8007c28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c16:	f7fb fa0d 	bl	8003034 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d901      	bls.n	8007c28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e036      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c28:	4b1e      	ldr	r3, [pc, #120]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1f0      	bne.n	8007c16 <HAL_RCC_OscConfig+0x44a>
 8007c34:	e02e      	b.n	8007c94 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d101      	bne.n	8007c42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e029      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c42:	4b18      	ldr	r3, [pc, #96]	; (8007ca4 <HAL_RCC_OscConfig+0x4d8>)
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d11c      	bne.n	8007c90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d115      	bne.n	8007c90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d10d      	bne.n	8007c90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d106      	bne.n	8007c90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d001      	beq.n	8007c94 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e000      	b.n	8007c96 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	40007000 	.word	0x40007000
 8007ca4:	40023800 	.word	0x40023800
 8007ca8:	42470060 	.word	0x42470060

08007cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e0cc      	b.n	8007e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cc0:	4b68      	ldr	r3, [pc, #416]	; (8007e64 <HAL_RCC_ClockConfig+0x1b8>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 030f 	and.w	r3, r3, #15
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d90c      	bls.n	8007ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cce:	4b65      	ldr	r3, [pc, #404]	; (8007e64 <HAL_RCC_ClockConfig+0x1b8>)
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	b2d2      	uxtb	r2, r2
 8007cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cd6:	4b63      	ldr	r3, [pc, #396]	; (8007e64 <HAL_RCC_ClockConfig+0x1b8>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 030f 	and.w	r3, r3, #15
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d001      	beq.n	8007ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e0b8      	b.n	8007e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d020      	beq.n	8007d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d005      	beq.n	8007d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d00:	4b59      	ldr	r3, [pc, #356]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	4a58      	ldr	r2, [pc, #352]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007d06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0308 	and.w	r3, r3, #8
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d18:	4b53      	ldr	r3, [pc, #332]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	4a52      	ldr	r2, [pc, #328]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d24:	4b50      	ldr	r3, [pc, #320]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	494d      	ldr	r1, [pc, #308]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d044      	beq.n	8007dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d107      	bne.n	8007d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d4a:	4b47      	ldr	r3, [pc, #284]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d119      	bne.n	8007d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e07f      	b.n	8007e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d003      	beq.n	8007d6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d107      	bne.n	8007d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d6a:	4b3f      	ldr	r3, [pc, #252]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d109      	bne.n	8007d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e06f      	b.n	8007e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d7a:	4b3b      	ldr	r3, [pc, #236]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e067      	b.n	8007e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d8a:	4b37      	ldr	r3, [pc, #220]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f023 0203 	bic.w	r2, r3, #3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	4934      	ldr	r1, [pc, #208]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d9c:	f7fb f94a 	bl	8003034 <HAL_GetTick>
 8007da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007da2:	e00a      	b.n	8007dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007da4:	f7fb f946 	bl	8003034 <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d901      	bls.n	8007dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e04f      	b.n	8007e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dba:	4b2b      	ldr	r3, [pc, #172]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f003 020c 	and.w	r2, r3, #12
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d1eb      	bne.n	8007da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007dcc:	4b25      	ldr	r3, [pc, #148]	; (8007e64 <HAL_RCC_ClockConfig+0x1b8>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 030f 	and.w	r3, r3, #15
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d20c      	bcs.n	8007df4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dda:	4b22      	ldr	r3, [pc, #136]	; (8007e64 <HAL_RCC_ClockConfig+0x1b8>)
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	b2d2      	uxtb	r2, r2
 8007de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007de2:	4b20      	ldr	r3, [pc, #128]	; (8007e64 <HAL_RCC_ClockConfig+0x1b8>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d001      	beq.n	8007df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e032      	b.n	8007e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d008      	beq.n	8007e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e00:	4b19      	ldr	r3, [pc, #100]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	4916      	ldr	r1, [pc, #88]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0308 	and.w	r3, r3, #8
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d009      	beq.n	8007e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e1e:	4b12      	ldr	r3, [pc, #72]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	00db      	lsls	r3, r3, #3
 8007e2c:	490e      	ldr	r1, [pc, #56]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e32:	f000 f821 	bl	8007e78 <HAL_RCC_GetSysClockFreq>
 8007e36:	4601      	mov	r1, r0
 8007e38:	4b0b      	ldr	r3, [pc, #44]	; (8007e68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	091b      	lsrs	r3, r3, #4
 8007e3e:	f003 030f 	and.w	r3, r3, #15
 8007e42:	4a0a      	ldr	r2, [pc, #40]	; (8007e6c <HAL_RCC_ClockConfig+0x1c0>)
 8007e44:	5cd3      	ldrb	r3, [r2, r3]
 8007e46:	fa21 f303 	lsr.w	r3, r1, r3
 8007e4a:	4a09      	ldr	r2, [pc, #36]	; (8007e70 <HAL_RCC_ClockConfig+0x1c4>)
 8007e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e4e:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <HAL_RCC_ClockConfig+0x1c8>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fb f8aa 	bl	8002fac <HAL_InitTick>

  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	40023c00 	.word	0x40023c00
 8007e68:	40023800 	.word	0x40023800
 8007e6c:	0800daf0 	.word	0x0800daf0
 8007e70:	20000014 	.word	0x20000014
 8007e74:	20000018 	.word	0x20000018

08007e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	607b      	str	r3, [r7, #4]
 8007e82:	2300      	movs	r3, #0
 8007e84:	60fb      	str	r3, [r7, #12]
 8007e86:	2300      	movs	r3, #0
 8007e88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e8e:	4b50      	ldr	r3, [pc, #320]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f003 030c 	and.w	r3, r3, #12
 8007e96:	2b04      	cmp	r3, #4
 8007e98:	d007      	beq.n	8007eaa <HAL_RCC_GetSysClockFreq+0x32>
 8007e9a:	2b08      	cmp	r3, #8
 8007e9c:	d008      	beq.n	8007eb0 <HAL_RCC_GetSysClockFreq+0x38>
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f040 808d 	bne.w	8007fbe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ea4:	4b4b      	ldr	r3, [pc, #300]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007ea6:	60bb      	str	r3, [r7, #8]
       break;
 8007ea8:	e08c      	b.n	8007fc4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007eaa:	4b4b      	ldr	r3, [pc, #300]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007eac:	60bb      	str	r3, [r7, #8]
      break;
 8007eae:	e089      	b.n	8007fc4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007eb0:	4b47      	ldr	r3, [pc, #284]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007eba:	4b45      	ldr	r3, [pc, #276]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d023      	beq.n	8007f0e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ec6:	4b42      	ldr	r3, [pc, #264]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	099b      	lsrs	r3, r3, #6
 8007ecc:	f04f 0400 	mov.w	r4, #0
 8007ed0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007ed4:	f04f 0200 	mov.w	r2, #0
 8007ed8:	ea03 0501 	and.w	r5, r3, r1
 8007edc:	ea04 0602 	and.w	r6, r4, r2
 8007ee0:	4a3d      	ldr	r2, [pc, #244]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007ee2:	fb02 f106 	mul.w	r1, r2, r6
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	fb02 f205 	mul.w	r2, r2, r5
 8007eec:	440a      	add	r2, r1
 8007eee:	493a      	ldr	r1, [pc, #232]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007ef0:	fba5 0101 	umull	r0, r1, r5, r1
 8007ef4:	1853      	adds	r3, r2, r1
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f04f 0400 	mov.w	r4, #0
 8007efe:	461a      	mov	r2, r3
 8007f00:	4623      	mov	r3, r4
 8007f02:	f7f8 f9b5 	bl	8000270 <__aeabi_uldivmod>
 8007f06:	4603      	mov	r3, r0
 8007f08:	460c      	mov	r4, r1
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	e049      	b.n	8007fa2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f0e:	4b30      	ldr	r3, [pc, #192]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	099b      	lsrs	r3, r3, #6
 8007f14:	f04f 0400 	mov.w	r4, #0
 8007f18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007f1c:	f04f 0200 	mov.w	r2, #0
 8007f20:	ea03 0501 	and.w	r5, r3, r1
 8007f24:	ea04 0602 	and.w	r6, r4, r2
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4632      	mov	r2, r6
 8007f2c:	f04f 0300 	mov.w	r3, #0
 8007f30:	f04f 0400 	mov.w	r4, #0
 8007f34:	0154      	lsls	r4, r2, #5
 8007f36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007f3a:	014b      	lsls	r3, r1, #5
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4622      	mov	r2, r4
 8007f40:	1b49      	subs	r1, r1, r5
 8007f42:	eb62 0206 	sbc.w	r2, r2, r6
 8007f46:	f04f 0300 	mov.w	r3, #0
 8007f4a:	f04f 0400 	mov.w	r4, #0
 8007f4e:	0194      	lsls	r4, r2, #6
 8007f50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007f54:	018b      	lsls	r3, r1, #6
 8007f56:	1a5b      	subs	r3, r3, r1
 8007f58:	eb64 0402 	sbc.w	r4, r4, r2
 8007f5c:	f04f 0100 	mov.w	r1, #0
 8007f60:	f04f 0200 	mov.w	r2, #0
 8007f64:	00e2      	lsls	r2, r4, #3
 8007f66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007f6a:	00d9      	lsls	r1, r3, #3
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	4614      	mov	r4, r2
 8007f70:	195b      	adds	r3, r3, r5
 8007f72:	eb44 0406 	adc.w	r4, r4, r6
 8007f76:	f04f 0100 	mov.w	r1, #0
 8007f7a:	f04f 0200 	mov.w	r2, #0
 8007f7e:	02a2      	lsls	r2, r4, #10
 8007f80:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007f84:	0299      	lsls	r1, r3, #10
 8007f86:	460b      	mov	r3, r1
 8007f88:	4614      	mov	r4, r2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f04f 0400 	mov.w	r4, #0
 8007f94:	461a      	mov	r2, r3
 8007f96:	4623      	mov	r3, r4
 8007f98:	f7f8 f96a 	bl	8000270 <__aeabi_uldivmod>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fa2:	4b0b      	ldr	r3, [pc, #44]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	0c1b      	lsrs	r3, r3, #16
 8007fa8:	f003 0303 	and.w	r3, r3, #3
 8007fac:	3301      	adds	r3, #1
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fba:	60bb      	str	r3, [r7, #8]
      break;
 8007fbc:	e002      	b.n	8007fc4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fbe:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007fc0:	60bb      	str	r3, [r7, #8]
      break;
 8007fc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	40023800 	.word	0x40023800
 8007fd4:	00f42400 	.word	0x00f42400
 8007fd8:	017d7840 	.word	0x017d7840

08007fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fe0:	4b03      	ldr	r3, [pc, #12]	; (8007ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	20000014 	.word	0x20000014

08007ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ff8:	f7ff fff0 	bl	8007fdc <HAL_RCC_GetHCLKFreq>
 8007ffc:	4601      	mov	r1, r0
 8007ffe:	4b05      	ldr	r3, [pc, #20]	; (8008014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	0a9b      	lsrs	r3, r3, #10
 8008004:	f003 0307 	and.w	r3, r3, #7
 8008008:	4a03      	ldr	r2, [pc, #12]	; (8008018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800800a:	5cd3      	ldrb	r3, [r2, r3]
 800800c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008010:	4618      	mov	r0, r3
 8008012:	bd80      	pop	{r7, pc}
 8008014:	40023800 	.word	0x40023800
 8008018:	0800db00 	.word	0x0800db00

0800801c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e056      	b.n	80080dc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	d106      	bne.n	800804e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7fa fc13 	bl	8002874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2202      	movs	r2, #2
 8008052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008064:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685a      	ldr	r2, [r3, #4]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	431a      	orrs	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	431a      	orrs	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	431a      	orrs	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	431a      	orrs	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800808a:	431a      	orrs	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	69db      	ldr	r3, [r3, #28]
 8008090:	431a      	orrs	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	ea42 0103 	orr.w	r1, r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	0c1b      	lsrs	r3, r3, #16
 80080ac:	f003 0104 	and.w	r1, r3, #4
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	69da      	ldr	r2, [r3, #28]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	603b      	str	r3, [r7, #0]
 80080f0:	4613      	mov	r3, r2
 80080f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d101      	bne.n	8008106 <HAL_SPI_Transmit+0x22>
 8008102:	2302      	movs	r3, #2
 8008104:	e11e      	b.n	8008344 <HAL_SPI_Transmit+0x260>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800810e:	f7fa ff91 	bl	8003034 <HAL_GetTick>
 8008112:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008114:	88fb      	ldrh	r3, [r7, #6]
 8008116:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b01      	cmp	r3, #1
 8008122:	d002      	beq.n	800812a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008124:	2302      	movs	r3, #2
 8008126:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008128:	e103      	b.n	8008332 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <HAL_SPI_Transmit+0x52>
 8008130:	88fb      	ldrh	r3, [r7, #6]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d102      	bne.n	800813c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	77fb      	strb	r3, [r7, #31]
    goto error;
 800813a:	e0fa      	b.n	8008332 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2203      	movs	r2, #3
 8008140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	88fa      	ldrh	r2, [r7, #6]
 8008154:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	88fa      	ldrh	r2, [r7, #6]
 800815a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008182:	d107      	bne.n	8008194 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008192:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800819e:	2b40      	cmp	r3, #64	; 0x40
 80081a0:	d007      	beq.n	80081b2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ba:	d14b      	bne.n	8008254 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <HAL_SPI_Transmit+0xe6>
 80081c4:	8afb      	ldrh	r3, [r7, #22]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d13e      	bne.n	8008248 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ce:	881a      	ldrh	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081da:	1c9a      	adds	r2, r3, #2
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	3b01      	subs	r3, #1
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80081ee:	e02b      	b.n	8008248 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	f003 0302 	and.w	r3, r3, #2
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d112      	bne.n	8008224 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008202:	881a      	ldrh	r2, [r3, #0]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820e:	1c9a      	adds	r2, r3, #2
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008218:	b29b      	uxth	r3, r3
 800821a:	3b01      	subs	r3, #1
 800821c:	b29a      	uxth	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	86da      	strh	r2, [r3, #54]	; 0x36
 8008222:	e011      	b.n	8008248 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008224:	f7fa ff06 	bl	8003034 <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	429a      	cmp	r2, r3
 8008232:	d803      	bhi.n	800823c <HAL_SPI_Transmit+0x158>
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823a:	d102      	bne.n	8008242 <HAL_SPI_Transmit+0x15e>
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d102      	bne.n	8008248 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008246:	e074      	b.n	8008332 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800824c:	b29b      	uxth	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1ce      	bne.n	80081f0 <HAL_SPI_Transmit+0x10c>
 8008252:	e04c      	b.n	80082ee <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <HAL_SPI_Transmit+0x17e>
 800825c:	8afb      	ldrh	r3, [r7, #22]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d140      	bne.n	80082e4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	330c      	adds	r3, #12
 800826c:	7812      	ldrb	r2, [r2, #0]
 800826e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008274:	1c5a      	adds	r2, r3, #1
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800827e:	b29b      	uxth	r3, r3
 8008280:	3b01      	subs	r3, #1
 8008282:	b29a      	uxth	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008288:	e02c      	b.n	80082e4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b02      	cmp	r3, #2
 8008296:	d113      	bne.n	80082c0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	330c      	adds	r3, #12
 80082a2:	7812      	ldrb	r2, [r2, #0]
 80082a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	3b01      	subs	r3, #1
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80082be:	e011      	b.n	80082e4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082c0:	f7fa feb8 	bl	8003034 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d803      	bhi.n	80082d8 <HAL_SPI_Transmit+0x1f4>
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d6:	d102      	bne.n	80082de <HAL_SPI_Transmit+0x1fa>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d102      	bne.n	80082e4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80082e2:	e026      	b.n	8008332 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1cd      	bne.n	800828a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 fb54 	bl	80089a0 <SPI_EndRxTxTransaction>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2220      	movs	r2, #32
 8008302:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800830c:	2300      	movs	r3, #0
 800830e:	613b      	str	r3, [r7, #16]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	613b      	str	r3, [r7, #16]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	613b      	str	r3, [r7, #16]
 8008320:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008326:	2b00      	cmp	r3, #0
 8008328:	d002      	beq.n	8008330 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	77fb      	strb	r3, [r7, #31]
 800832e:	e000      	b.n	8008332 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008330:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008342:	7ffb      	ldrb	r3, [r7, #31]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3720      	adds	r7, #32
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08c      	sub	sp, #48	; 0x30
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
 8008358:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800835a:	2301      	movs	r3, #1
 800835c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800835e:	2300      	movs	r3, #0
 8008360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800836a:	2b01      	cmp	r3, #1
 800836c:	d101      	bne.n	8008372 <HAL_SPI_TransmitReceive+0x26>
 800836e:	2302      	movs	r3, #2
 8008370:	e18a      	b.n	8008688 <HAL_SPI_TransmitReceive+0x33c>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800837a:	f7fa fe5b 	bl	8003034 <HAL_GetTick>
 800837e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008390:	887b      	ldrh	r3, [r7, #2]
 8008392:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008394:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008398:	2b01      	cmp	r3, #1
 800839a:	d00f      	beq.n	80083bc <HAL_SPI_TransmitReceive+0x70>
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083a2:	d107      	bne.n	80083b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d103      	bne.n	80083b4 <HAL_SPI_TransmitReceive+0x68>
 80083ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083b0:	2b04      	cmp	r3, #4
 80083b2:	d003      	beq.n	80083bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80083b4:	2302      	movs	r3, #2
 80083b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083ba:	e15b      	b.n	8008674 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d005      	beq.n	80083ce <HAL_SPI_TransmitReceive+0x82>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <HAL_SPI_TransmitReceive+0x82>
 80083c8:	887b      	ldrh	r3, [r7, #2]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d103      	bne.n	80083d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083d4:	e14e      	b.n	8008674 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b04      	cmp	r3, #4
 80083e0:	d003      	beq.n	80083ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2205      	movs	r2, #5
 80083e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	887a      	ldrh	r2, [r7, #2]
 80083fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	887a      	ldrh	r2, [r7, #2]
 8008400:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	887a      	ldrh	r2, [r7, #2]
 800840c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	887a      	ldrh	r2, [r7, #2]
 8008412:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842a:	2b40      	cmp	r3, #64	; 0x40
 800842c:	d007      	beq.n	800843e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800843c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008446:	d178      	bne.n	800853a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <HAL_SPI_TransmitReceive+0x10a>
 8008450:	8b7b      	ldrh	r3, [r7, #26]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d166      	bne.n	8008524 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	881a      	ldrh	r2, [r3, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008466:	1c9a      	adds	r2, r3, #2
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008470:	b29b      	uxth	r3, r3
 8008472:	3b01      	subs	r3, #1
 8008474:	b29a      	uxth	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800847a:	e053      	b.n	8008524 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b02      	cmp	r3, #2
 8008488:	d11b      	bne.n	80084c2 <HAL_SPI_TransmitReceive+0x176>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800848e:	b29b      	uxth	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	d016      	beq.n	80084c2 <HAL_SPI_TransmitReceive+0x176>
 8008494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008496:	2b01      	cmp	r3, #1
 8008498:	d113      	bne.n	80084c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849e:	881a      	ldrh	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084aa:	1c9a      	adds	r2, r3, #2
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	3b01      	subs	r3, #1
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d119      	bne.n	8008504 <HAL_SPI_TransmitReceive+0x1b8>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d014      	beq.n	8008504 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68da      	ldr	r2, [r3, #12]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e4:	b292      	uxth	r2, r2
 80084e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ec:	1c9a      	adds	r2, r3, #2
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008500:	2301      	movs	r3, #1
 8008502:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008504:	f7fa fd96 	bl	8003034 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008510:	429a      	cmp	r2, r3
 8008512:	d807      	bhi.n	8008524 <HAL_SPI_TransmitReceive+0x1d8>
 8008514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851a:	d003      	beq.n	8008524 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008522:	e0a7      	b.n	8008674 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008528:	b29b      	uxth	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1a6      	bne.n	800847c <HAL_SPI_TransmitReceive+0x130>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008532:	b29b      	uxth	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1a1      	bne.n	800847c <HAL_SPI_TransmitReceive+0x130>
 8008538:	e07c      	b.n	8008634 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <HAL_SPI_TransmitReceive+0x1fc>
 8008542:	8b7b      	ldrh	r3, [r7, #26]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d16b      	bne.n	8008620 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	330c      	adds	r3, #12
 8008552:	7812      	ldrb	r2, [r2, #0]
 8008554:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855a:	1c5a      	adds	r2, r3, #1
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008564:	b29b      	uxth	r3, r3
 8008566:	3b01      	subs	r3, #1
 8008568:	b29a      	uxth	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800856e:	e057      	b.n	8008620 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f003 0302 	and.w	r3, r3, #2
 800857a:	2b02      	cmp	r3, #2
 800857c:	d11c      	bne.n	80085b8 <HAL_SPI_TransmitReceive+0x26c>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008582:	b29b      	uxth	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d017      	beq.n	80085b8 <HAL_SPI_TransmitReceive+0x26c>
 8008588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858a:	2b01      	cmp	r3, #1
 800858c:	d114      	bne.n	80085b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	330c      	adds	r3, #12
 8008598:	7812      	ldrb	r2, [r2, #0]
 800859a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a0:	1c5a      	adds	r2, r3, #1
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	3b01      	subs	r3, #1
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d119      	bne.n	80085fa <HAL_SPI_TransmitReceive+0x2ae>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d014      	beq.n	80085fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	b2d2      	uxtb	r2, r2
 80085dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e2:	1c5a      	adds	r2, r3, #1
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	3b01      	subs	r3, #1
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085f6:	2301      	movs	r3, #1
 80085f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80085fa:	f7fa fd1b 	bl	8003034 <HAL_GetTick>
 80085fe:	4602      	mov	r2, r0
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008606:	429a      	cmp	r2, r3
 8008608:	d803      	bhi.n	8008612 <HAL_SPI_TransmitReceive+0x2c6>
 800860a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008610:	d102      	bne.n	8008618 <HAL_SPI_TransmitReceive+0x2cc>
 8008612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008614:	2b00      	cmp	r3, #0
 8008616:	d103      	bne.n	8008620 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800861e:	e029      	b.n	8008674 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008624:	b29b      	uxth	r3, r3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1a2      	bne.n	8008570 <HAL_SPI_TransmitReceive+0x224>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800862e:	b29b      	uxth	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d19d      	bne.n	8008570 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008636:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 f9b1 	bl	80089a0 <SPI_EndRxTxTransaction>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d006      	beq.n	8008652 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2220      	movs	r2, #32
 800864e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008650:	e010      	b.n	8008674 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10b      	bne.n	8008672 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800865a:	2300      	movs	r3, #0
 800865c:	617b      	str	r3, [r7, #20]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	617b      	str	r3, [r7, #20]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	617b      	str	r3, [r7, #20]
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	e000      	b.n	8008674 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008672:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008684:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008688:	4618      	mov	r0, r3
 800868a:	3730      	adds	r7, #48	; 0x30
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	099b      	lsrs	r3, r3, #6
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10f      	bne.n	80086d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00a      	beq.n	80086d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	099b      	lsrs	r3, r3, #6
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d004      	beq.n	80086d4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	4798      	blx	r3
    return;
 80086d2:	e0d8      	b.n	8008886 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	085b      	lsrs	r3, r3, #1
 80086d8:	f003 0301 	and.w	r3, r3, #1
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00a      	beq.n	80086f6 <HAL_SPI_IRQHandler+0x66>
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	09db      	lsrs	r3, r3, #7
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d004      	beq.n	80086f6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	4798      	blx	r3
    return;
 80086f4:	e0c7      	b.n	8008886 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	095b      	lsrs	r3, r3, #5
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10c      	bne.n	800871c <HAL_SPI_IRQHandler+0x8c>
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	099b      	lsrs	r3, r3, #6
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	d106      	bne.n	800871c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	0a1b      	lsrs	r3, r3, #8
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 80b5 	beq.w	8008886 <HAL_SPI_IRQHandler+0x1f6>
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	095b      	lsrs	r3, r3, #5
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 80ae 	beq.w	8008886 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	099b      	lsrs	r3, r3, #6
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d023      	beq.n	800877e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b03      	cmp	r3, #3
 8008740:	d011      	beq.n	8008766 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008746:	f043 0204 	orr.w	r2, r3, #4
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800874e:	2300      	movs	r3, #0
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	617b      	str	r3, [r7, #20]
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	e00b      	b.n	800877e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008766:	2300      	movs	r3, #0
 8008768:	613b      	str	r3, [r7, #16]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	613b      	str	r3, [r7, #16]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	613b      	str	r3, [r7, #16]
 800877a:	693b      	ldr	r3, [r7, #16]
        return;
 800877c:	e083      	b.n	8008886 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	095b      	lsrs	r3, r3, #5
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b00      	cmp	r3, #0
 8008788:	d014      	beq.n	80087b4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800878e:	f043 0201 	orr.w	r2, r3, #1
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008796:	2300      	movs	r3, #0
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087b0:	601a      	str	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	0a1b      	lsrs	r3, r3, #8
 80087b8:	f003 0301 	and.w	r3, r3, #1
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00c      	beq.n	80087da <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c4:	f043 0208 	orr.w	r2, r3, #8
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80087cc:	2300      	movs	r3, #0
 80087ce:	60bb      	str	r3, [r7, #8]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	60bb      	str	r3, [r7, #8]
 80087d8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d050      	beq.n	8008884 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80087f0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	f003 0302 	and.w	r3, r3, #2
 8008800:	2b00      	cmp	r3, #0
 8008802:	d104      	bne.n	800880e <HAL_SPI_IRQHandler+0x17e>
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d034      	beq.n	8008878 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f022 0203 	bic.w	r2, r2, #3
 800881c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008822:	2b00      	cmp	r3, #0
 8008824:	d011      	beq.n	800884a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800882a:	4a18      	ldr	r2, [pc, #96]	; (800888c <HAL_SPI_IRQHandler+0x1fc>)
 800882c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008832:	4618      	mov	r0, r3
 8008834:	f7fb f866 	bl	8003904 <HAL_DMA_Abort_IT>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d005      	beq.n	800884a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008842:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800884e:	2b00      	cmp	r3, #0
 8008850:	d016      	beq.n	8008880 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008856:	4a0d      	ldr	r2, [pc, #52]	; (800888c <HAL_SPI_IRQHandler+0x1fc>)
 8008858:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800885e:	4618      	mov	r0, r3
 8008860:	f7fb f850 	bl	8003904 <HAL_DMA_Abort_IT>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00a      	beq.n	8008880 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800886e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008876:	e003      	b.n	8008880 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f809 	bl	8008890 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800887e:	e000      	b.n	8008882 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008880:	bf00      	nop
    return;
 8008882:	bf00      	nop
 8008884:	bf00      	nop
  }
}
 8008886:	3720      	adds	r7, #32
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	080088a5 	.word	0x080088a5

08008890 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f7ff ffe6 	bl	8008890 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80088c4:	bf00      	nop
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	603b      	str	r3, [r7, #0]
 80088d8:	4613      	mov	r3, r2
 80088da:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088dc:	e04c      	b.n	8008978 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e4:	d048      	beq.n	8008978 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80088e6:	f7fa fba5 	bl	8003034 <HAL_GetTick>
 80088ea:	4602      	mov	r2, r0
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d902      	bls.n	80088fc <SPI_WaitFlagStateUntilTimeout+0x30>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d13d      	bne.n	8008978 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800890a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008914:	d111      	bne.n	800893a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800891e:	d004      	beq.n	800892a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008928:	d107      	bne.n	800893a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008938:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008942:	d10f      	bne.n	8008964 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008962:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e00f      	b.n	8008998 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	689a      	ldr	r2, [r3, #8]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	4013      	ands	r3, r2
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	429a      	cmp	r2, r3
 8008986:	bf0c      	ite	eq
 8008988:	2301      	moveq	r3, #1
 800898a:	2300      	movne	r3, #0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	461a      	mov	r2, r3
 8008990:	79fb      	ldrb	r3, [r7, #7]
 8008992:	429a      	cmp	r2, r3
 8008994:	d1a3      	bne.n	80088de <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b088      	sub	sp, #32
 80089a4:	af02      	add	r7, sp, #8
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80089ac:	4b1b      	ldr	r3, [pc, #108]	; (8008a1c <SPI_EndRxTxTransaction+0x7c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a1b      	ldr	r2, [pc, #108]	; (8008a20 <SPI_EndRxTxTransaction+0x80>)
 80089b2:	fba2 2303 	umull	r2, r3, r2, r3
 80089b6:	0d5b      	lsrs	r3, r3, #21
 80089b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089bc:	fb02 f303 	mul.w	r3, r2, r3
 80089c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089ca:	d112      	bne.n	80089f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	9300      	str	r3, [sp, #0]
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	2200      	movs	r2, #0
 80089d4:	2180      	movs	r1, #128	; 0x80
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f7ff ff78 	bl	80088cc <SPI_WaitFlagStateUntilTimeout>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d016      	beq.n	8008a10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e6:	f043 0220 	orr.w	r2, r3, #32
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e00f      	b.n	8008a12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00a      	beq.n	8008a0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	3b01      	subs	r3, #1
 80089fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a08:	2b80      	cmp	r3, #128	; 0x80
 8008a0a:	d0f2      	beq.n	80089f2 <SPI_EndRxTxTransaction+0x52>
 8008a0c:	e000      	b.n	8008a10 <SPI_EndRxTxTransaction+0x70>
        break;
 8008a0e:	bf00      	nop
  }

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3718      	adds	r7, #24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	20000014 	.word	0x20000014
 8008a20:	165e9f81 	.word	0x165e9f81

08008a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e01d      	b.n	8008a72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d106      	bne.n	8008a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7fa fa3a 	bl	8002ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	4619      	mov	r1, r3
 8008a62:	4610      	mov	r0, r2
 8008a64:	f000 fa4a 	bl	8008efc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68da      	ldr	r2, [r3, #12]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f042 0201 	orr.w	r2, r2, #1
 8008a90:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f003 0307 	and.w	r3, r3, #7
 8008a9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b06      	cmp	r3, #6
 8008aa2:	d007      	beq.n	8008ab4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f042 0201 	orr.w	r2, r2, #1
 8008ab2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b083      	sub	sp, #12
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68da      	ldr	r2, [r3, #12]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f022 0201 	bic.w	r2, r2, #1
 8008ad8:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	6a1a      	ldr	r2, [r3, #32]
 8008ae0:	f241 1311 	movw	r3, #4369	; 0x1111
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10f      	bne.n	8008b0a <HAL_TIM_Base_Stop_IT+0x48>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	6a1a      	ldr	r2, [r3, #32]
 8008af0:	f240 4344 	movw	r3, #1092	; 0x444
 8008af4:	4013      	ands	r3, r2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d107      	bne.n	8008b0a <HAL_TIM_Base_Stop_IT+0x48>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f022 0201 	bic.w	r2, r2, #1
 8008b08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d122      	bne.n	8008b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d11b      	bne.n	8008b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f06f 0202 	mvn.w	r2, #2
 8008b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	f003 0303 	and.w	r3, r3, #3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f9af 	bl	8008ebe <HAL_TIM_IC_CaptureCallback>
 8008b60:	e005      	b.n	8008b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f9a1 	bl	8008eaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f9b2 	bl	8008ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	f003 0304 	and.w	r3, r3, #4
 8008b7e:	2b04      	cmp	r3, #4
 8008b80:	d122      	bne.n	8008bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b04      	cmp	r3, #4
 8008b8e:	d11b      	bne.n	8008bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f06f 0204 	mvn.w	r2, #4
 8008b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f985 	bl	8008ebe <HAL_TIM_IC_CaptureCallback>
 8008bb4:	e005      	b.n	8008bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f977 	bl	8008eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f988 	bl	8008ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	f003 0308 	and.w	r3, r3, #8
 8008bd2:	2b08      	cmp	r3, #8
 8008bd4:	d122      	bne.n	8008c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	f003 0308 	and.w	r3, r3, #8
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d11b      	bne.n	8008c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f06f 0208 	mvn.w	r2, #8
 8008bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2204      	movs	r2, #4
 8008bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	f003 0303 	and.w	r3, r3, #3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f95b 	bl	8008ebe <HAL_TIM_IC_CaptureCallback>
 8008c08:	e005      	b.n	8008c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f94d 	bl	8008eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f95e 	bl	8008ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	f003 0310 	and.w	r3, r3, #16
 8008c26:	2b10      	cmp	r3, #16
 8008c28:	d122      	bne.n	8008c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f003 0310 	and.w	r3, r3, #16
 8008c34:	2b10      	cmp	r3, #16
 8008c36:	d11b      	bne.n	8008c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f06f 0210 	mvn.w	r2, #16
 8008c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2208      	movs	r2, #8
 8008c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f931 	bl	8008ebe <HAL_TIM_IC_CaptureCallback>
 8008c5c:	e005      	b.n	8008c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f923 	bl	8008eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f934 	bl	8008ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d10e      	bne.n	8008c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d107      	bne.n	8008c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f06f 0201 	mvn.w	r2, #1
 8008c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f8fd 	bl	8008e96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca6:	2b80      	cmp	r3, #128	; 0x80
 8008ca8:	d10e      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb4:	2b80      	cmp	r3, #128	; 0x80
 8008cb6:	d107      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fada 	bl	800927c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd2:	2b40      	cmp	r3, #64	; 0x40
 8008cd4:	d10e      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce0:	2b40      	cmp	r3, #64	; 0x40
 8008ce2:	d107      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f8f9 	bl	8008ee6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b20      	cmp	r3, #32
 8008d00:	d10e      	bne.n	8008d20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f003 0320 	and.w	r3, r3, #32
 8008d0c:	2b20      	cmp	r3, #32
 8008d0e:	d107      	bne.n	8008d20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f06f 0220 	mvn.w	r2, #32
 8008d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 faa4 	bl	8009268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d101      	bne.n	8008d40 <HAL_TIM_ConfigClockSource+0x18>
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	e0a6      	b.n	8008e8e <HAL_TIM_ConfigClockSource+0x166>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b40      	cmp	r3, #64	; 0x40
 8008d76:	d067      	beq.n	8008e48 <HAL_TIM_ConfigClockSource+0x120>
 8008d78:	2b40      	cmp	r3, #64	; 0x40
 8008d7a:	d80b      	bhi.n	8008d94 <HAL_TIM_ConfigClockSource+0x6c>
 8008d7c:	2b10      	cmp	r3, #16
 8008d7e:	d073      	beq.n	8008e68 <HAL_TIM_ConfigClockSource+0x140>
 8008d80:	2b10      	cmp	r3, #16
 8008d82:	d802      	bhi.n	8008d8a <HAL_TIM_ConfigClockSource+0x62>
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d06f      	beq.n	8008e68 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008d88:	e078      	b.n	8008e7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008d8a:	2b20      	cmp	r3, #32
 8008d8c:	d06c      	beq.n	8008e68 <HAL_TIM_ConfigClockSource+0x140>
 8008d8e:	2b30      	cmp	r3, #48	; 0x30
 8008d90:	d06a      	beq.n	8008e68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008d92:	e073      	b.n	8008e7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008d94:	2b70      	cmp	r3, #112	; 0x70
 8008d96:	d00d      	beq.n	8008db4 <HAL_TIM_ConfigClockSource+0x8c>
 8008d98:	2b70      	cmp	r3, #112	; 0x70
 8008d9a:	d804      	bhi.n	8008da6 <HAL_TIM_ConfigClockSource+0x7e>
 8008d9c:	2b50      	cmp	r3, #80	; 0x50
 8008d9e:	d033      	beq.n	8008e08 <HAL_TIM_ConfigClockSource+0xe0>
 8008da0:	2b60      	cmp	r3, #96	; 0x60
 8008da2:	d041      	beq.n	8008e28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008da4:	e06a      	b.n	8008e7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008daa:	d066      	beq.n	8008e7a <HAL_TIM_ConfigClockSource+0x152>
 8008dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008db0:	d017      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008db2:	e063      	b.n	8008e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6818      	ldr	r0, [r3, #0]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	6899      	ldr	r1, [r3, #8]
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f000 f9b4 	bl	8009130 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008dd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	609a      	str	r2, [r3, #8]
      break;
 8008de0:	e04c      	b.n	8008e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6818      	ldr	r0, [r3, #0]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	6899      	ldr	r1, [r3, #8]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	f000 f99d 	bl	8009130 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e04:	609a      	str	r2, [r3, #8]
      break;
 8008e06:	e039      	b.n	8008e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6818      	ldr	r0, [r3, #0]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	6859      	ldr	r1, [r3, #4]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	461a      	mov	r2, r3
 8008e16:	f000 f911 	bl	800903c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2150      	movs	r1, #80	; 0x50
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 f96a 	bl	80090fa <TIM_ITRx_SetConfig>
      break;
 8008e26:	e029      	b.n	8008e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6818      	ldr	r0, [r3, #0]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	6859      	ldr	r1, [r3, #4]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	461a      	mov	r2, r3
 8008e36:	f000 f930 	bl	800909a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2160      	movs	r1, #96	; 0x60
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 f95a 	bl	80090fa <TIM_ITRx_SetConfig>
      break;
 8008e46:	e019      	b.n	8008e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6818      	ldr	r0, [r3, #0]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	6859      	ldr	r1, [r3, #4]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	461a      	mov	r2, r3
 8008e56:	f000 f8f1 	bl	800903c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2140      	movs	r1, #64	; 0x40
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 f94a 	bl	80090fa <TIM_ITRx_SetConfig>
      break;
 8008e66:	e009      	b.n	8008e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4619      	mov	r1, r3
 8008e72:	4610      	mov	r0, r2
 8008e74:	f000 f941 	bl	80090fa <TIM_ITRx_SetConfig>
      break;
 8008e78:	e000      	b.n	8008e7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008e7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e9e:	bf00      	nop
 8008ea0:	370c      	adds	r7, #12
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008eb2:	bf00      	nop
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b083      	sub	sp, #12
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ec6:	bf00      	nop
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b083      	sub	sp, #12
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008eda:	bf00      	nop
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b083      	sub	sp, #12
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008eee:	bf00      	nop
 8008ef0:	370c      	adds	r7, #12
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
	...

08008efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a40      	ldr	r2, [pc, #256]	; (8009010 <TIM_Base_SetConfig+0x114>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d013      	beq.n	8008f3c <TIM_Base_SetConfig+0x40>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f1a:	d00f      	beq.n	8008f3c <TIM_Base_SetConfig+0x40>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a3d      	ldr	r2, [pc, #244]	; (8009014 <TIM_Base_SetConfig+0x118>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d00b      	beq.n	8008f3c <TIM_Base_SetConfig+0x40>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a3c      	ldr	r2, [pc, #240]	; (8009018 <TIM_Base_SetConfig+0x11c>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d007      	beq.n	8008f3c <TIM_Base_SetConfig+0x40>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a3b      	ldr	r2, [pc, #236]	; (800901c <TIM_Base_SetConfig+0x120>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d003      	beq.n	8008f3c <TIM_Base_SetConfig+0x40>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a3a      	ldr	r2, [pc, #232]	; (8009020 <TIM_Base_SetConfig+0x124>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d108      	bne.n	8008f4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a2f      	ldr	r2, [pc, #188]	; (8009010 <TIM_Base_SetConfig+0x114>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d02b      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f5c:	d027      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a2c      	ldr	r2, [pc, #176]	; (8009014 <TIM_Base_SetConfig+0x118>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d023      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a2b      	ldr	r2, [pc, #172]	; (8009018 <TIM_Base_SetConfig+0x11c>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d01f      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a2a      	ldr	r2, [pc, #168]	; (800901c <TIM_Base_SetConfig+0x120>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d01b      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a29      	ldr	r2, [pc, #164]	; (8009020 <TIM_Base_SetConfig+0x124>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d017      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a28      	ldr	r2, [pc, #160]	; (8009024 <TIM_Base_SetConfig+0x128>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d013      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a27      	ldr	r2, [pc, #156]	; (8009028 <TIM_Base_SetConfig+0x12c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d00f      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a26      	ldr	r2, [pc, #152]	; (800902c <TIM_Base_SetConfig+0x130>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d00b      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a25      	ldr	r2, [pc, #148]	; (8009030 <TIM_Base_SetConfig+0x134>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d007      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a24      	ldr	r2, [pc, #144]	; (8009034 <TIM_Base_SetConfig+0x138>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d003      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a23      	ldr	r2, [pc, #140]	; (8009038 <TIM_Base_SetConfig+0x13c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d108      	bne.n	8008fc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a0a      	ldr	r2, [pc, #40]	; (8009010 <TIM_Base_SetConfig+0x114>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d003      	beq.n	8008ff4 <TIM_Base_SetConfig+0xf8>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a0c      	ldr	r2, [pc, #48]	; (8009020 <TIM_Base_SetConfig+0x124>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d103      	bne.n	8008ffc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	691a      	ldr	r2, [r3, #16]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	615a      	str	r2, [r3, #20]
}
 8009002:	bf00      	nop
 8009004:	3714      	adds	r7, #20
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	40010000 	.word	0x40010000
 8009014:	40000400 	.word	0x40000400
 8009018:	40000800 	.word	0x40000800
 800901c:	40000c00 	.word	0x40000c00
 8009020:	40010400 	.word	0x40010400
 8009024:	40014000 	.word	0x40014000
 8009028:	40014400 	.word	0x40014400
 800902c:	40014800 	.word	0x40014800
 8009030:	40001800 	.word	0x40001800
 8009034:	40001c00 	.word	0x40001c00
 8009038:	40002000 	.word	0x40002000

0800903c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6a1b      	ldr	r3, [r3, #32]
 800904c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	f023 0201 	bic.w	r2, r3, #1
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	011b      	lsls	r3, r3, #4
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	4313      	orrs	r3, r2
 8009070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f023 030a 	bic.w	r3, r3, #10
 8009078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	4313      	orrs	r3, r2
 8009080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	621a      	str	r2, [r3, #32]
}
 800908e:	bf00      	nop
 8009090:	371c      	adds	r7, #28
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800909a:	b480      	push	{r7}
 800909c:	b087      	sub	sp, #28
 800909e:	af00      	add	r7, sp, #0
 80090a0:	60f8      	str	r0, [r7, #12]
 80090a2:	60b9      	str	r1, [r7, #8]
 80090a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	f023 0210 	bic.w	r2, r3, #16
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6a1b      	ldr	r3, [r3, #32]
 80090bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	031b      	lsls	r3, r3, #12
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	011b      	lsls	r3, r3, #4
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	4313      	orrs	r3, r2
 80090e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	621a      	str	r2, [r3, #32]
}
 80090ee:	bf00      	nop
 80090f0:	371c      	adds	r7, #28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b085      	sub	sp, #20
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009110:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	4313      	orrs	r3, r2
 8009118:	f043 0307 	orr.w	r3, r3, #7
 800911c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	609a      	str	r2, [r3, #8]
}
 8009124:	bf00      	nop
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
 800913c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800914a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	021a      	lsls	r2, r3, #8
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	431a      	orrs	r2, r3
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	4313      	orrs	r3, r2
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	4313      	orrs	r3, r2
 800915c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	697a      	ldr	r2, [r7, #20]
 8009162:	609a      	str	r2, [r3, #8]
}
 8009164:	bf00      	nop
 8009166:	371c      	adds	r7, #28
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009180:	2b01      	cmp	r3, #1
 8009182:	d101      	bne.n	8009188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009184:	2302      	movs	r3, #2
 8009186:	e05a      	b.n	800923e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2202      	movs	r2, #2
 8009194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a21      	ldr	r2, [pc, #132]	; (800924c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d022      	beq.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091d4:	d01d      	beq.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a1d      	ldr	r2, [pc, #116]	; (8009250 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d018      	beq.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a1b      	ldr	r2, [pc, #108]	; (8009254 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d013      	beq.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a1a      	ldr	r2, [pc, #104]	; (8009258 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d00e      	beq.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a18      	ldr	r2, [pc, #96]	; (800925c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d009      	beq.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a17      	ldr	r2, [pc, #92]	; (8009260 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d004      	beq.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a15      	ldr	r2, [pc, #84]	; (8009264 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d10c      	bne.n	800922c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	4313      	orrs	r3, r2
 8009222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	40010000 	.word	0x40010000
 8009250:	40000400 	.word	0x40000400
 8009254:	40000800 	.word	0x40000800
 8009258:	40000c00 	.word	0x40000c00
 800925c:	40010400 	.word	0x40010400
 8009260:	40014000 	.word	0x40014000
 8009264:	40001800 	.word	0x40001800

08009268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009290:	b084      	sub	sp, #16
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	f107 001c 	add.w	r0, r7, #28
 800929e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d122      	bne.n	80092ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80092bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80092d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d105      	bne.n	80092e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f001 fac6 	bl	800a874 <USB_CoreReset>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73fb      	strb	r3, [r7, #15]
 80092ec:	e01a      	b.n	8009324 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 faba 	bl	800a874 <USB_CoreReset>
 8009300:	4603      	mov	r3, r0
 8009302:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009306:	2b00      	cmp	r3, #0
 8009308:	d106      	bne.n	8009318 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	639a      	str	r2, [r3, #56]	; 0x38
 8009316:	e005      	b.n	8009324 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009326:	2b01      	cmp	r3, #1
 8009328:	d10b      	bne.n	8009342 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f043 0206 	orr.w	r2, r3, #6
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	f043 0220 	orr.w	r2, r3, #32
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009342:	7bfb      	ldrb	r3, [r7, #15]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800934e:	b004      	add	sp, #16
 8009350:	4770      	bx	lr
	...

08009354 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009354:	b480      	push	{r7}
 8009356:	b087      	sub	sp, #28
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	4613      	mov	r3, r2
 8009360:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009362:	79fb      	ldrb	r3, [r7, #7]
 8009364:	2b02      	cmp	r3, #2
 8009366:	d165      	bne.n	8009434 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	4a41      	ldr	r2, [pc, #260]	; (8009470 <USB_SetTurnaroundTime+0x11c>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d906      	bls.n	800937e <USB_SetTurnaroundTime+0x2a>
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	4a40      	ldr	r2, [pc, #256]	; (8009474 <USB_SetTurnaroundTime+0x120>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d802      	bhi.n	800937e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009378:	230f      	movs	r3, #15
 800937a:	617b      	str	r3, [r7, #20]
 800937c:	e062      	b.n	8009444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	4a3c      	ldr	r2, [pc, #240]	; (8009474 <USB_SetTurnaroundTime+0x120>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d906      	bls.n	8009394 <USB_SetTurnaroundTime+0x40>
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	4a3b      	ldr	r2, [pc, #236]	; (8009478 <USB_SetTurnaroundTime+0x124>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d802      	bhi.n	8009394 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800938e:	230e      	movs	r3, #14
 8009390:	617b      	str	r3, [r7, #20]
 8009392:	e057      	b.n	8009444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	4a38      	ldr	r2, [pc, #224]	; (8009478 <USB_SetTurnaroundTime+0x124>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d906      	bls.n	80093aa <USB_SetTurnaroundTime+0x56>
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	4a37      	ldr	r2, [pc, #220]	; (800947c <USB_SetTurnaroundTime+0x128>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d802      	bhi.n	80093aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80093a4:	230d      	movs	r3, #13
 80093a6:	617b      	str	r3, [r7, #20]
 80093a8:	e04c      	b.n	8009444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	4a33      	ldr	r2, [pc, #204]	; (800947c <USB_SetTurnaroundTime+0x128>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d906      	bls.n	80093c0 <USB_SetTurnaroundTime+0x6c>
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	4a32      	ldr	r2, [pc, #200]	; (8009480 <USB_SetTurnaroundTime+0x12c>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d802      	bhi.n	80093c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80093ba:	230c      	movs	r3, #12
 80093bc:	617b      	str	r3, [r7, #20]
 80093be:	e041      	b.n	8009444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	4a2f      	ldr	r2, [pc, #188]	; (8009480 <USB_SetTurnaroundTime+0x12c>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d906      	bls.n	80093d6 <USB_SetTurnaroundTime+0x82>
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	4a2e      	ldr	r2, [pc, #184]	; (8009484 <USB_SetTurnaroundTime+0x130>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d802      	bhi.n	80093d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80093d0:	230b      	movs	r3, #11
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	e036      	b.n	8009444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	4a2a      	ldr	r2, [pc, #168]	; (8009484 <USB_SetTurnaroundTime+0x130>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d906      	bls.n	80093ec <USB_SetTurnaroundTime+0x98>
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	4a29      	ldr	r2, [pc, #164]	; (8009488 <USB_SetTurnaroundTime+0x134>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d802      	bhi.n	80093ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80093e6:	230a      	movs	r3, #10
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	e02b      	b.n	8009444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	4a26      	ldr	r2, [pc, #152]	; (8009488 <USB_SetTurnaroundTime+0x134>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d906      	bls.n	8009402 <USB_SetTurnaroundTime+0xae>
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	4a25      	ldr	r2, [pc, #148]	; (800948c <USB_SetTurnaroundTime+0x138>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d802      	bhi.n	8009402 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80093fc:	2309      	movs	r3, #9
 80093fe:	617b      	str	r3, [r7, #20]
 8009400:	e020      	b.n	8009444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	4a21      	ldr	r2, [pc, #132]	; (800948c <USB_SetTurnaroundTime+0x138>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d906      	bls.n	8009418 <USB_SetTurnaroundTime+0xc4>
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	4a20      	ldr	r2, [pc, #128]	; (8009490 <USB_SetTurnaroundTime+0x13c>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d802      	bhi.n	8009418 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009412:	2308      	movs	r3, #8
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	e015      	b.n	8009444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	4a1d      	ldr	r2, [pc, #116]	; (8009490 <USB_SetTurnaroundTime+0x13c>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d906      	bls.n	800942e <USB_SetTurnaroundTime+0xda>
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	4a1c      	ldr	r2, [pc, #112]	; (8009494 <USB_SetTurnaroundTime+0x140>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d802      	bhi.n	800942e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009428:	2307      	movs	r3, #7
 800942a:	617b      	str	r3, [r7, #20]
 800942c:	e00a      	b.n	8009444 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800942e:	2306      	movs	r3, #6
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	e007      	b.n	8009444 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009434:	79fb      	ldrb	r3, [r7, #7]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d102      	bne.n	8009440 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800943a:	2309      	movs	r3, #9
 800943c:	617b      	str	r3, [r7, #20]
 800943e:	e001      	b.n	8009444 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009440:	2309      	movs	r3, #9
 8009442:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	68da      	ldr	r2, [r3, #12]
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	029b      	lsls	r3, r3, #10
 8009458:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800945c:	431a      	orrs	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	371c      	adds	r7, #28
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	00d8acbf 	.word	0x00d8acbf
 8009474:	00e4e1bf 	.word	0x00e4e1bf
 8009478:	00f423ff 	.word	0x00f423ff
 800947c:	0106737f 	.word	0x0106737f
 8009480:	011a499f 	.word	0x011a499f
 8009484:	01312cff 	.word	0x01312cff
 8009488:	014ca43f 	.word	0x014ca43f
 800948c:	016e35ff 	.word	0x016e35ff
 8009490:	01a6ab1f 	.word	0x01a6ab1f
 8009494:	01e847ff 	.word	0x01e847ff

08009498 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f043 0201 	orr.w	r2, r3, #1
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b083      	sub	sp, #12
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f023 0201 	bic.w	r2, r3, #1
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80094f4:	78fb      	ldrb	r3, [r7, #3]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d106      	bne.n	8009508 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	60da      	str	r2, [r3, #12]
 8009506:	e00b      	b.n	8009520 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d106      	bne.n	800951c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	60da      	str	r2, [r3, #12]
 800951a:	e001      	b.n	8009520 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	e003      	b.n	8009528 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009520:	2032      	movs	r0, #50	; 0x32
 8009522:	f7f9 fd93 	bl	800304c <HAL_Delay>

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009530:	b084      	sub	sp, #16
 8009532:	b580      	push	{r7, lr}
 8009534:	b086      	sub	sp, #24
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800953e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800954a:	2300      	movs	r3, #0
 800954c:	613b      	str	r3, [r7, #16]
 800954e:	e009      	b.n	8009564 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	3340      	adds	r3, #64	; 0x40
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	2200      	movs	r2, #0
 800955c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	3301      	adds	r3, #1
 8009562:	613b      	str	r3, [r7, #16]
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	2b0e      	cmp	r3, #14
 8009568:	d9f2      	bls.n	8009550 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800956a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800956c:	2b00      	cmp	r3, #0
 800956e:	d11c      	bne.n	80095aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800957e:	f043 0302 	orr.w	r3, r3, #2
 8009582:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009588:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009594:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	639a      	str	r2, [r3, #56]	; 0x38
 80095a8:	e00b      	b.n	80095c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095c8:	461a      	mov	r2, r3
 80095ca:	2300      	movs	r3, #0
 80095cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095d4:	4619      	mov	r1, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095dc:	461a      	mov	r2, r3
 80095de:	680b      	ldr	r3, [r1, #0]
 80095e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d10c      	bne.n	8009602 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80095e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d104      	bne.n	80095f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80095ee:	2100      	movs	r1, #0
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 f949 	bl	8009888 <USB_SetDevSpeed>
 80095f6:	e008      	b.n	800960a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80095f8:	2101      	movs	r1, #1
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f944 	bl	8009888 <USB_SetDevSpeed>
 8009600:	e003      	b.n	800960a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009602:	2103      	movs	r1, #3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f93f 	bl	8009888 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800960a:	2110      	movs	r1, #16
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f8f3 	bl	80097f8 <USB_FlushTxFifo>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 f911 	bl	8009844 <USB_FlushRxFifo>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009632:	461a      	mov	r2, r3
 8009634:	2300      	movs	r3, #0
 8009636:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800963e:	461a      	mov	r2, r3
 8009640:	2300      	movs	r3, #0
 8009642:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800964a:	461a      	mov	r2, r3
 800964c:	2300      	movs	r3, #0
 800964e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009650:	2300      	movs	r3, #0
 8009652:	613b      	str	r3, [r7, #16]
 8009654:	e043      	b.n	80096de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	4413      	add	r3, r2
 800965e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800966c:	d118      	bne.n	80096a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10a      	bne.n	800968a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	015a      	lsls	r2, r3, #5
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	4413      	add	r3, r2
 800967c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009680:	461a      	mov	r2, r3
 8009682:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	e013      	b.n	80096b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	015a      	lsls	r2, r3, #5
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	4413      	add	r3, r2
 8009692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009696:	461a      	mov	r2, r3
 8009698:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800969c:	6013      	str	r3, [r2, #0]
 800969e:	e008      	b.n	80096b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ac:	461a      	mov	r2, r3
 80096ae:	2300      	movs	r3, #0
 80096b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	015a      	lsls	r2, r3, #5
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	4413      	add	r3, r2
 80096ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096be:	461a      	mov	r2, r3
 80096c0:	2300      	movs	r3, #0
 80096c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	015a      	lsls	r2, r3, #5
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d0:	461a      	mov	r2, r3
 80096d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80096d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	3301      	adds	r3, #1
 80096dc:	613b      	str	r3, [r7, #16]
 80096de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d3b7      	bcc.n	8009656 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096e6:	2300      	movs	r3, #0
 80096e8:	613b      	str	r3, [r7, #16]
 80096ea:	e043      	b.n	8009774 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009702:	d118      	bne.n	8009736 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	015a      	lsls	r2, r3, #5
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	4413      	add	r3, r2
 8009712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009716:	461a      	mov	r2, r3
 8009718:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	e013      	b.n	8009748 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800972c:	461a      	mov	r2, r3
 800972e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	e008      	b.n	8009748 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	015a      	lsls	r2, r3, #5
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4413      	add	r3, r2
 800973e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009742:	461a      	mov	r2, r3
 8009744:	2300      	movs	r3, #0
 8009746:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4413      	add	r3, r2
 8009750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009754:	461a      	mov	r2, r3
 8009756:	2300      	movs	r3, #0
 8009758:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	015a      	lsls	r2, r3, #5
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	4413      	add	r3, r2
 8009762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009766:	461a      	mov	r2, r3
 8009768:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800976c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	3301      	adds	r3, #1
 8009772:	613b      	str	r3, [r7, #16]
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	429a      	cmp	r2, r3
 800977a:	d3b7      	bcc.n	80096ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800978a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800978e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800979c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d105      	bne.n	80097b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	f043 0210 	orr.w	r2, r3, #16
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	699a      	ldr	r2, [r3, #24]
 80097b4:	4b0f      	ldr	r3, [pc, #60]	; (80097f4 <USB_DevInit+0x2c4>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80097bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d005      	beq.n	80097ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	f043 0208 	orr.w	r2, r3, #8
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80097ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d107      	bne.n	80097e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097dc:	f043 0304 	orr.w	r3, r3, #4
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3718      	adds	r7, #24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097f0:	b004      	add	sp, #16
 80097f2:	4770      	bx	lr
 80097f4:	803c3800 	.word	0x803c3800

080097f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009802:	2300      	movs	r3, #0
 8009804:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	019b      	lsls	r3, r3, #6
 800980a:	f043 0220 	orr.w	r2, r3, #32
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3301      	adds	r3, #1
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	4a09      	ldr	r2, [pc, #36]	; (8009840 <USB_FlushTxFifo+0x48>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d901      	bls.n	8009824 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e006      	b.n	8009832 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	f003 0320 	and.w	r3, r3, #32
 800982c:	2b20      	cmp	r3, #32
 800982e:	d0f0      	beq.n	8009812 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	00030d40 	.word	0x00030d40

08009844 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800984c:	2300      	movs	r3, #0
 800984e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2210      	movs	r2, #16
 8009854:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3301      	adds	r3, #1
 800985a:	60fb      	str	r3, [r7, #12]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4a09      	ldr	r2, [pc, #36]	; (8009884 <USB_FlushRxFifo+0x40>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d901      	bls.n	8009868 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009864:	2303      	movs	r3, #3
 8009866:	e006      	b.n	8009876 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	f003 0310 	and.w	r3, r3, #16
 8009870:	2b10      	cmp	r3, #16
 8009872:	d0f0      	beq.n	8009856 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	00030d40 	.word	0x00030d40

08009888 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	78fb      	ldrb	r3, [r7, #3]
 80098a2:	68f9      	ldr	r1, [r7, #12]
 80098a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098a8:	4313      	orrs	r3, r2
 80098aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b087      	sub	sp, #28
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	f003 0306 	and.w	r3, r3, #6
 80098d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d102      	bne.n	80098e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80098da:	2300      	movs	r3, #0
 80098dc:	75fb      	strb	r3, [r7, #23]
 80098de:	e00a      	b.n	80098f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d002      	beq.n	80098ec <USB_GetDevSpeed+0x32>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2b06      	cmp	r3, #6
 80098ea:	d102      	bne.n	80098f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80098ec:	2302      	movs	r3, #2
 80098ee:	75fb      	strb	r3, [r7, #23]
 80098f0:	e001      	b.n	80098f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80098f2:	230f      	movs	r3, #15
 80098f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	371c      	adds	r7, #28
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	785b      	ldrb	r3, [r3, #1]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d13a      	bne.n	8009996 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009926:	69da      	ldr	r2, [r3, #28]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	f003 030f 	and.w	r3, r3, #15
 8009930:	2101      	movs	r1, #1
 8009932:	fa01 f303 	lsl.w	r3, r1, r3
 8009936:	b29b      	uxth	r3, r3
 8009938:	68f9      	ldr	r1, [r7, #12]
 800993a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800993e:	4313      	orrs	r3, r2
 8009940:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d155      	bne.n	8009a04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	78db      	ldrb	r3, [r3, #3]
 8009972:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009974:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	059b      	lsls	r3, r3, #22
 800997a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800997c:	4313      	orrs	r3, r2
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	0151      	lsls	r1, r2, #5
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	440a      	add	r2, r1
 8009986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800998a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800998e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009992:	6013      	str	r3, [r2, #0]
 8009994:	e036      	b.n	8009a04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800999c:	69da      	ldr	r2, [r3, #28]
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	f003 030f 	and.w	r3, r3, #15
 80099a6:	2101      	movs	r1, #1
 80099a8:	fa01 f303 	lsl.w	r3, r1, r3
 80099ac:	041b      	lsls	r3, r3, #16
 80099ae:	68f9      	ldr	r1, [r7, #12]
 80099b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099b4:	4313      	orrs	r3, r2
 80099b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	015a      	lsls	r2, r3, #5
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d11a      	bne.n	8009a04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	015a      	lsls	r2, r3, #5
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	4413      	add	r3, r2
 80099d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	78db      	ldrb	r3, [r3, #3]
 80099e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80099ea:	430b      	orrs	r3, r1
 80099ec:	4313      	orrs	r3, r2
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	0151      	lsls	r1, r2, #5
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	440a      	add	r2, r1
 80099f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
	...

08009a14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	785b      	ldrb	r3, [r3, #1]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d161      	bne.n	8009af4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	015a      	lsls	r2, r3, #5
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	4413      	add	r3, r2
 8009a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a46:	d11f      	bne.n	8009a88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	015a      	lsls	r2, r3, #5
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	0151      	lsls	r1, r2, #5
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	440a      	add	r2, r1
 8009a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	0151      	lsls	r1, r2, #5
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	440a      	add	r2, r1
 8009a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	f003 030f 	and.w	r3, r3, #15
 8009a98:	2101      	movs	r1, #1
 8009a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	43db      	mvns	r3, r3
 8009aa2:	68f9      	ldr	r1, [r7, #12]
 8009aa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ab2:	69da      	ldr	r2, [r3, #28]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	f003 030f 	and.w	r3, r3, #15
 8009abc:	2101      	movs	r1, #1
 8009abe:	fa01 f303 	lsl.w	r3, r1, r3
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	43db      	mvns	r3, r3
 8009ac6:	68f9      	ldr	r1, [r7, #12]
 8009ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009acc:	4013      	ands	r3, r2
 8009ace:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	015a      	lsls	r2, r3, #5
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	0159      	lsls	r1, r3, #5
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	440b      	add	r3, r1
 8009ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aea:	4619      	mov	r1, r3
 8009aec:	4b35      	ldr	r3, [pc, #212]	; (8009bc4 <USB_DeactivateEndpoint+0x1b0>)
 8009aee:	4013      	ands	r3, r2
 8009af0:	600b      	str	r3, [r1, #0]
 8009af2:	e060      	b.n	8009bb6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b0a:	d11f      	bne.n	8009b4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	015a      	lsls	r2, r3, #5
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	0151      	lsls	r1, r2, #5
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	440a      	add	r2, r1
 8009b22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	015a      	lsls	r2, r3, #5
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	4413      	add	r3, r2
 8009b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	0151      	lsls	r1, r2, #5
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	440a      	add	r2, r1
 8009b42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	f003 030f 	and.w	r3, r3, #15
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b62:	041b      	lsls	r3, r3, #16
 8009b64:	43db      	mvns	r3, r3
 8009b66:	68f9      	ldr	r1, [r7, #12]
 8009b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b76:	69da      	ldr	r2, [r3, #28]
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	f003 030f 	and.w	r3, r3, #15
 8009b80:	2101      	movs	r1, #1
 8009b82:	fa01 f303 	lsl.w	r3, r1, r3
 8009b86:	041b      	lsls	r3, r3, #16
 8009b88:	43db      	mvns	r3, r3
 8009b8a:	68f9      	ldr	r1, [r7, #12]
 8009b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b90:	4013      	ands	r3, r2
 8009b92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	0159      	lsls	r1, r3, #5
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	440b      	add	r3, r1
 8009baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bae:	4619      	mov	r1, r3
 8009bb0:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <USB_DeactivateEndpoint+0x1b4>)
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3714      	adds	r7, #20
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	ec337800 	.word	0xec337800
 8009bc8:	eff37800 	.word	0xeff37800

08009bcc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b08a      	sub	sp, #40	; 0x28
 8009bd0:	af02      	add	r7, sp, #8
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	785b      	ldrb	r3, [r3, #1]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	f040 815c 	bne.w	8009ea6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	695b      	ldr	r3, [r3, #20]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d132      	bne.n	8009c5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	015a      	lsls	r2, r3, #5
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	69ba      	ldr	r2, [r7, #24]
 8009c06:	0151      	lsls	r1, r2, #5
 8009c08:	69fa      	ldr	r2, [r7, #28]
 8009c0a:	440a      	add	r2, r1
 8009c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	015a      	lsls	r2, r3, #5
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	4413      	add	r3, r2
 8009c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	69ba      	ldr	r2, [r7, #24]
 8009c2a:	0151      	lsls	r1, r2, #5
 8009c2c:	69fa      	ldr	r2, [r7, #28]
 8009c2e:	440a      	add	r2, r1
 8009c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	015a      	lsls	r2, r3, #5
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	4413      	add	r3, r2
 8009c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	69ba      	ldr	r2, [r7, #24]
 8009c4a:	0151      	lsls	r1, r2, #5
 8009c4c:	69fa      	ldr	r2, [r7, #28]
 8009c4e:	440a      	add	r2, r1
 8009c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c54:	0cdb      	lsrs	r3, r3, #19
 8009c56:	04db      	lsls	r3, r3, #19
 8009c58:	6113      	str	r3, [r2, #16]
 8009c5a:	e074      	b.n	8009d46 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	015a      	lsls	r2, r3, #5
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	4413      	add	r3, r2
 8009c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	69ba      	ldr	r2, [r7, #24]
 8009c6c:	0151      	lsls	r1, r2, #5
 8009c6e:	69fa      	ldr	r2, [r7, #28]
 8009c70:	440a      	add	r2, r1
 8009c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c76:	0cdb      	lsrs	r3, r3, #19
 8009c78:	04db      	lsls	r3, r3, #19
 8009c7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	015a      	lsls	r2, r3, #5
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	4413      	add	r3, r2
 8009c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	69ba      	ldr	r2, [r7, #24]
 8009c8c:	0151      	lsls	r1, r2, #5
 8009c8e:	69fa      	ldr	r2, [r7, #28]
 8009c90:	440a      	add	r2, r1
 8009c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	015a      	lsls	r2, r3, #5
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cac:	691a      	ldr	r2, [r3, #16]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	6959      	ldr	r1, [r3, #20]
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	440b      	add	r3, r1
 8009cb8:	1e59      	subs	r1, r3, #1
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8009cc2:	04d9      	lsls	r1, r3, #19
 8009cc4:	4b9d      	ldr	r3, [pc, #628]	; (8009f3c <USB_EPStartXfer+0x370>)
 8009cc6:	400b      	ands	r3, r1
 8009cc8:	69b9      	ldr	r1, [r7, #24]
 8009cca:	0148      	lsls	r0, r1, #5
 8009ccc:	69f9      	ldr	r1, [r7, #28]
 8009cce:	4401      	add	r1, r0
 8009cd0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	015a      	lsls	r2, r3, #5
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce4:	691a      	ldr	r2, [r3, #16]
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cee:	69b9      	ldr	r1, [r7, #24]
 8009cf0:	0148      	lsls	r0, r1, #5
 8009cf2:	69f9      	ldr	r1, [r7, #28]
 8009cf4:	4401      	add	r1, r0
 8009cf6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	78db      	ldrb	r3, [r3, #3]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d11f      	bne.n	8009d46 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	015a      	lsls	r2, r3, #5
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	69ba      	ldr	r2, [r7, #24]
 8009d16:	0151      	lsls	r1, r2, #5
 8009d18:	69fa      	ldr	r2, [r7, #28]
 8009d1a:	440a      	add	r2, r1
 8009d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009d24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	015a      	lsls	r2, r3, #5
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	69ba      	ldr	r2, [r7, #24]
 8009d36:	0151      	lsls	r1, r2, #5
 8009d38:	69fa      	ldr	r2, [r7, #28]
 8009d3a:	440a      	add	r2, r1
 8009d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009d46:	79fb      	ldrb	r3, [r7, #7]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d14b      	bne.n	8009de4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d009      	beq.n	8009d68 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	015a      	lsls	r2, r3, #5
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d60:	461a      	mov	r2, r3
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	78db      	ldrb	r3, [r3, #3]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d128      	bne.n	8009dc2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d110      	bne.n	8009da2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	69ba      	ldr	r2, [r7, #24]
 8009d90:	0151      	lsls	r1, r2, #5
 8009d92:	69fa      	ldr	r2, [r7, #28]
 8009d94:	440a      	add	r2, r1
 8009d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	e00f      	b.n	8009dc2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	015a      	lsls	r2, r3, #5
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	4413      	add	r3, r2
 8009daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	69ba      	ldr	r2, [r7, #24]
 8009db2:	0151      	lsls	r1, r2, #5
 8009db4:	69fa      	ldr	r2, [r7, #28]
 8009db6:	440a      	add	r2, r1
 8009db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dc0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	015a      	lsls	r2, r3, #5
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	4413      	add	r3, r2
 8009dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	69ba      	ldr	r2, [r7, #24]
 8009dd2:	0151      	lsls	r1, r2, #5
 8009dd4:	69fa      	ldr	r2, [r7, #28]
 8009dd6:	440a      	add	r2, r1
 8009dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ddc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009de0:	6013      	str	r3, [r2, #0]
 8009de2:	e12f      	b.n	800a044 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	015a      	lsls	r2, r3, #5
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	4413      	add	r3, r2
 8009dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	69ba      	ldr	r2, [r7, #24]
 8009df4:	0151      	lsls	r1, r2, #5
 8009df6:	69fa      	ldr	r2, [r7, #28]
 8009df8:	440a      	add	r2, r1
 8009dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	78db      	ldrb	r3, [r3, #3]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d015      	beq.n	8009e38 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	695b      	ldr	r3, [r3, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 8117 	beq.w	800a044 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	f003 030f 	and.w	r3, r3, #15
 8009e26:	2101      	movs	r1, #1
 8009e28:	fa01 f303 	lsl.w	r3, r1, r3
 8009e2c:	69f9      	ldr	r1, [r7, #28]
 8009e2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e32:	4313      	orrs	r3, r2
 8009e34:	634b      	str	r3, [r1, #52]	; 0x34
 8009e36:	e105      	b.n	800a044 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d110      	bne.n	8009e6a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	015a      	lsls	r2, r3, #5
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	4413      	add	r3, r2
 8009e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	69ba      	ldr	r2, [r7, #24]
 8009e58:	0151      	lsls	r1, r2, #5
 8009e5a:	69fa      	ldr	r2, [r7, #28]
 8009e5c:	440a      	add	r2, r1
 8009e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e66:	6013      	str	r3, [r2, #0]
 8009e68:	e00f      	b.n	8009e8a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	015a      	lsls	r2, r3, #5
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	4413      	add	r3, r2
 8009e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	69ba      	ldr	r2, [r7, #24]
 8009e7a:	0151      	lsls	r1, r2, #5
 8009e7c:	69fa      	ldr	r2, [r7, #28]
 8009e7e:	440a      	add	r2, r1
 8009e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e88:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	68d9      	ldr	r1, [r3, #12]
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	781a      	ldrb	r2, [r3, #0]
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	695b      	ldr	r3, [r3, #20]
 8009e96:	b298      	uxth	r0, r3
 8009e98:	79fb      	ldrb	r3, [r7, #7]
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f000 fa2b 	bl	800a2fa <USB_WritePacket>
 8009ea4:	e0ce      	b.n	800a044 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	015a      	lsls	r2, r3, #5
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	4413      	add	r3, r2
 8009eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	69ba      	ldr	r2, [r7, #24]
 8009eb6:	0151      	lsls	r1, r2, #5
 8009eb8:	69fa      	ldr	r2, [r7, #28]
 8009eba:	440a      	add	r2, r1
 8009ebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ec0:	0cdb      	lsrs	r3, r3, #19
 8009ec2:	04db      	lsls	r3, r3, #19
 8009ec4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	69ba      	ldr	r2, [r7, #24]
 8009ed6:	0151      	lsls	r1, r2, #5
 8009ed8:	69fa      	ldr	r2, [r7, #28]
 8009eda:	440a      	add	r2, r1
 8009edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ee0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ee4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ee8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d126      	bne.n	8009f40 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	015a      	lsls	r2, r3, #5
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	4413      	add	r3, r2
 8009efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efe:	691a      	ldr	r2, [r3, #16]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f08:	69b9      	ldr	r1, [r7, #24]
 8009f0a:	0148      	lsls	r0, r1, #5
 8009f0c:	69f9      	ldr	r1, [r7, #28]
 8009f0e:	4401      	add	r1, r0
 8009f10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f14:	4313      	orrs	r3, r2
 8009f16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	69ba      	ldr	r2, [r7, #24]
 8009f28:	0151      	lsls	r1, r2, #5
 8009f2a:	69fa      	ldr	r2, [r7, #28]
 8009f2c:	440a      	add	r2, r1
 8009f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f36:	6113      	str	r3, [r2, #16]
 8009f38:	e036      	b.n	8009fa8 <USB_EPStartXfer+0x3dc>
 8009f3a:	bf00      	nop
 8009f3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	695a      	ldr	r2, [r3, #20]
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	4413      	add	r3, r2
 8009f4a:	1e5a      	subs	r2, r3, #1
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f54:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	015a      	lsls	r2, r3, #5
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f62:	691a      	ldr	r2, [r3, #16]
 8009f64:	8afb      	ldrh	r3, [r7, #22]
 8009f66:	04d9      	lsls	r1, r3, #19
 8009f68:	4b39      	ldr	r3, [pc, #228]	; (800a050 <USB_EPStartXfer+0x484>)
 8009f6a:	400b      	ands	r3, r1
 8009f6c:	69b9      	ldr	r1, [r7, #24]
 8009f6e:	0148      	lsls	r0, r1, #5
 8009f70:	69f9      	ldr	r1, [r7, #28]
 8009f72:	4401      	add	r1, r0
 8009f74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f88:	691a      	ldr	r2, [r3, #16]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	8af9      	ldrh	r1, [r7, #22]
 8009f90:	fb01 f303 	mul.w	r3, r1, r3
 8009f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f98:	69b9      	ldr	r1, [r7, #24]
 8009f9a:	0148      	lsls	r0, r1, #5
 8009f9c:	69f9      	ldr	r1, [r7, #28]
 8009f9e:	4401      	add	r1, r0
 8009fa0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009fa8:	79fb      	ldrb	r3, [r7, #7]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d10d      	bne.n	8009fca <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d009      	beq.n	8009fca <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	68d9      	ldr	r1, [r3, #12]
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	015a      	lsls	r2, r3, #5
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc6:	460a      	mov	r2, r1
 8009fc8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	78db      	ldrb	r3, [r3, #3]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d128      	bne.n	800a024 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d110      	bne.n	800a004 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	015a      	lsls	r2, r3, #5
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	4413      	add	r3, r2
 8009fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	69ba      	ldr	r2, [r7, #24]
 8009ff2:	0151      	lsls	r1, r2, #5
 8009ff4:	69fa      	ldr	r2, [r7, #28]
 8009ff6:	440a      	add	r2, r1
 8009ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ffc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a000:	6013      	str	r3, [r2, #0]
 800a002:	e00f      	b.n	800a024 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	69ba      	ldr	r2, [r7, #24]
 800a014:	0151      	lsls	r1, r2, #5
 800a016:	69fa      	ldr	r2, [r7, #28]
 800a018:	440a      	add	r2, r1
 800a01a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a01e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a022:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	015a      	lsls	r2, r3, #5
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	4413      	add	r3, r2
 800a02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	69ba      	ldr	r2, [r7, #24]
 800a034:	0151      	lsls	r1, r2, #5
 800a036:	69fa      	ldr	r2, [r7, #28]
 800a038:	440a      	add	r2, r1
 800a03a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a03e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a042:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3720      	adds	r7, #32
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	1ff80000 	.word	0x1ff80000

0800a054 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a054:	b480      	push	{r7}
 800a056:	b087      	sub	sp, #28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	4613      	mov	r3, r2
 800a060:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	785b      	ldrb	r3, [r3, #1]
 800a070:	2b01      	cmp	r3, #1
 800a072:	f040 80cd 	bne.w	800a210 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d132      	bne.n	800a0e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	015a      	lsls	r2, r3, #5
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	4413      	add	r3, r2
 800a086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	0151      	lsls	r1, r2, #5
 800a090:	697a      	ldr	r2, [r7, #20]
 800a092:	440a      	add	r2, r1
 800a094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a098:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a09c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a0a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	015a      	lsls	r2, r3, #5
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	693a      	ldr	r2, [r7, #16]
 800a0b2:	0151      	lsls	r1, r2, #5
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	440a      	add	r2, r1
 800a0b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	015a      	lsls	r2, r3, #5
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	693a      	ldr	r2, [r7, #16]
 800a0d2:	0151      	lsls	r1, r2, #5
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	440a      	add	r2, r1
 800a0d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0dc:	0cdb      	lsrs	r3, r3, #19
 800a0de:	04db      	lsls	r3, r3, #19
 800a0e0:	6113      	str	r3, [r2, #16]
 800a0e2:	e04e      	b.n	800a182 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	015a      	lsls	r2, r3, #5
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	0151      	lsls	r1, r2, #5
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	440a      	add	r2, r1
 800a0fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0fe:	0cdb      	lsrs	r3, r3, #19
 800a100:	04db      	lsls	r3, r3, #19
 800a102:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	015a      	lsls	r2, r3, #5
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	4413      	add	r3, r2
 800a10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	0151      	lsls	r1, r2, #5
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	440a      	add	r2, r1
 800a11a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a11e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a122:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a126:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	695a      	ldr	r2, [r3, #20]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	429a      	cmp	r2, r3
 800a132:	d903      	bls.n	800a13c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	689a      	ldr	r2, [r3, #8]
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	015a      	lsls	r2, r3, #5
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	4413      	add	r3, r2
 800a144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	0151      	lsls	r1, r2, #5
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	440a      	add	r2, r1
 800a152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a156:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a15a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	015a      	lsls	r2, r3, #5
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	4413      	add	r3, r2
 800a164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a168:	691a      	ldr	r2, [r3, #16]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a172:	6939      	ldr	r1, [r7, #16]
 800a174:	0148      	lsls	r0, r1, #5
 800a176:	6979      	ldr	r1, [r7, #20]
 800a178:	4401      	add	r1, r0
 800a17a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a17e:	4313      	orrs	r3, r2
 800a180:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a182:	79fb      	ldrb	r3, [r7, #7]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d11e      	bne.n	800a1c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d009      	beq.n	800a1a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	015a      	lsls	r2, r3, #5
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	4413      	add	r3, r2
 800a198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a19c:	461a      	mov	r2, r3
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	693a      	ldr	r2, [r7, #16]
 800a1b4:	0151      	lsls	r1, r2, #5
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	440a      	add	r2, r1
 800a1ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1c2:	6013      	str	r3, [r2, #0]
 800a1c4:	e092      	b.n	800a2ec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	015a      	lsls	r2, r3, #5
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	0151      	lsls	r1, r2, #5
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	440a      	add	r2, r1
 800a1dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d07e      	beq.n	800a2ec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	f003 030f 	and.w	r3, r3, #15
 800a1fe:	2101      	movs	r1, #1
 800a200:	fa01 f303 	lsl.w	r3, r1, r3
 800a204:	6979      	ldr	r1, [r7, #20]
 800a206:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a20a:	4313      	orrs	r3, r2
 800a20c:	634b      	str	r3, [r1, #52]	; 0x34
 800a20e:	e06d      	b.n	800a2ec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	015a      	lsls	r2, r3, #5
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	4413      	add	r3, r2
 800a218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	0151      	lsls	r1, r2, #5
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	440a      	add	r2, r1
 800a226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a22a:	0cdb      	lsrs	r3, r3, #19
 800a22c:	04db      	lsls	r3, r3, #19
 800a22e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	0151      	lsls	r1, r2, #5
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	440a      	add	r2, r1
 800a246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a24a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a24e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a252:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d003      	beq.n	800a264 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	689a      	ldr	r2, [r3, #8]
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	015a      	lsls	r2, r3, #5
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	4413      	add	r3, r2
 800a26c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	693a      	ldr	r2, [r7, #16]
 800a274:	0151      	lsls	r1, r2, #5
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	440a      	add	r2, r1
 800a27a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a27e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a282:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	015a      	lsls	r2, r3, #5
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a290:	691a      	ldr	r2, [r3, #16]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a29a:	6939      	ldr	r1, [r7, #16]
 800a29c:	0148      	lsls	r0, r1, #5
 800a29e:	6979      	ldr	r1, [r7, #20]
 800a2a0:	4401      	add	r1, r0
 800a2a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a2aa:	79fb      	ldrb	r3, [r7, #7]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d10d      	bne.n	800a2cc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d009      	beq.n	800a2cc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	68d9      	ldr	r1, [r3, #12]
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2c8:	460a      	mov	r2, r1
 800a2ca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	015a      	lsls	r2, r3, #5
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	0151      	lsls	r1, r2, #5
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	440a      	add	r2, r1
 800a2e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	371c      	adds	r7, #28
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b089      	sub	sp, #36	; 0x24
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	60f8      	str	r0, [r7, #12]
 800a302:	60b9      	str	r1, [r7, #8]
 800a304:	4611      	mov	r1, r2
 800a306:	461a      	mov	r2, r3
 800a308:	460b      	mov	r3, r1
 800a30a:	71fb      	strb	r3, [r7, #7]
 800a30c:	4613      	mov	r3, r2
 800a30e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a318:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d11a      	bne.n	800a356 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a320:	88bb      	ldrh	r3, [r7, #4]
 800a322:	3303      	adds	r3, #3
 800a324:	089b      	lsrs	r3, r3, #2
 800a326:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a328:	2300      	movs	r3, #0
 800a32a:	61bb      	str	r3, [r7, #24]
 800a32c:	e00f      	b.n	800a34e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a32e:	79fb      	ldrb	r3, [r7, #7]
 800a330:	031a      	lsls	r2, r3, #12
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	4413      	add	r3, r2
 800a336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a33a:	461a      	mov	r2, r3
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	3304      	adds	r3, #4
 800a346:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	3301      	adds	r3, #1
 800a34c:	61bb      	str	r3, [r7, #24]
 800a34e:	69ba      	ldr	r2, [r7, #24]
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	429a      	cmp	r2, r3
 800a354:	d3eb      	bcc.n	800a32e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3724      	adds	r7, #36	; 0x24
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a364:	b480      	push	{r7}
 800a366:	b089      	sub	sp, #36	; 0x24
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	4613      	mov	r3, r2
 800a370:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a37a:	88fb      	ldrh	r3, [r7, #6]
 800a37c:	3303      	adds	r3, #3
 800a37e:	089b      	lsrs	r3, r3, #2
 800a380:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a382:	2300      	movs	r3, #0
 800a384:	61bb      	str	r3, [r7, #24]
 800a386:	e00b      	b.n	800a3a0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	601a      	str	r2, [r3, #0]
    pDest++;
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	3304      	adds	r3, #4
 800a398:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	3301      	adds	r3, #1
 800a39e:	61bb      	str	r3, [r7, #24]
 800a3a0:	69ba      	ldr	r2, [r7, #24]
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d3ef      	bcc.n	800a388 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a3a8:	69fb      	ldr	r3, [r7, #28]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3724      	adds	r7, #36	; 0x24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3b6:	b480      	push	{r7}
 800a3b8:	b085      	sub	sp, #20
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	785b      	ldrb	r3, [r3, #1]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d12c      	bne.n	800a42c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	015a      	lsls	r2, r3, #5
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	db12      	blt.n	800a40a <USB_EPSetStall+0x54>
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00f      	beq.n	800a40a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	015a      	lsls	r2, r3, #5
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	0151      	lsls	r1, r2, #5
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	440a      	add	r2, r1
 800a400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a404:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a408:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	015a      	lsls	r2, r3, #5
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	4413      	add	r3, r2
 800a412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	0151      	lsls	r1, r2, #5
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	440a      	add	r2, r1
 800a420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a428:	6013      	str	r3, [r2, #0]
 800a42a:	e02b      	b.n	800a484 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	015a      	lsls	r2, r3, #5
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	4413      	add	r3, r2
 800a434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	db12      	blt.n	800a464 <USB_EPSetStall+0xae>
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00f      	beq.n	800a464 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68ba      	ldr	r2, [r7, #8]
 800a454:	0151      	lsls	r1, r2, #5
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	440a      	add	r2, r1
 800a45a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a45e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a462:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	015a      	lsls	r2, r3, #5
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	0151      	lsls	r1, r2, #5
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	440a      	add	r2, r1
 800a47a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a47e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a482:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a492:	b480      	push	{r7}
 800a494:	b085      	sub	sp, #20
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	785b      	ldrb	r3, [r3, #1]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d128      	bne.n	800a500 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	015a      	lsls	r2, r3, #5
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	0151      	lsls	r1, r2, #5
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	440a      	add	r2, r1
 800a4c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	78db      	ldrb	r3, [r3, #3]
 800a4d2:	2b03      	cmp	r3, #3
 800a4d4:	d003      	beq.n	800a4de <USB_EPClearStall+0x4c>
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	78db      	ldrb	r3, [r3, #3]
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d138      	bne.n	800a550 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	015a      	lsls	r2, r3, #5
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68ba      	ldr	r2, [r7, #8]
 800a4ee:	0151      	lsls	r1, r2, #5
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	440a      	add	r2, r1
 800a4f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4fc:	6013      	str	r3, [r2, #0]
 800a4fe:	e027      	b.n	800a550 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	4413      	add	r3, r2
 800a508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	0151      	lsls	r1, r2, #5
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	440a      	add	r2, r1
 800a516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a51a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a51e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	78db      	ldrb	r3, [r3, #3]
 800a524:	2b03      	cmp	r3, #3
 800a526:	d003      	beq.n	800a530 <USB_EPClearStall+0x9e>
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	78db      	ldrb	r3, [r3, #3]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d10f      	bne.n	800a550 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	4413      	add	r3, r2
 800a538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	0151      	lsls	r1, r2, #5
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	440a      	add	r2, r1
 800a546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a54a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a54e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3714      	adds	r7, #20
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a55e:	b480      	push	{r7}
 800a560:	b085      	sub	sp, #20
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	460b      	mov	r3, r1
 800a568:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a57c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a580:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	78fb      	ldrb	r3, [r7, #3]
 800a58c:	011b      	lsls	r3, r3, #4
 800a58e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a592:	68f9      	ldr	r1, [r7, #12]
 800a594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a598:	4313      	orrs	r3, r2
 800a59a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b085      	sub	sp, #20
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a5c4:	f023 0303 	bic.w	r3, r3, #3
 800a5c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5d8:	f023 0302 	bic.w	r3, r3, #2
 800a5dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a606:	f023 0303 	bic.w	r3, r3, #3
 800a60a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a61a:	f043 0302 	orr.w	r3, r3, #2
 800a61e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3714      	adds	r7, #20
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a62e:	b480      	push	{r7}
 800a630:	b085      	sub	sp, #20
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	695b      	ldr	r3, [r3, #20]
 800a63a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	699b      	ldr	r3, [r3, #24]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	4013      	ands	r3, r2
 800a644:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a646:	68fb      	ldr	r3, [r7, #12]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3714      	adds	r7, #20
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a666:	699b      	ldr	r3, [r3, #24]
 800a668:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a670:	69db      	ldr	r3, [r3, #28]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	4013      	ands	r3, r2
 800a676:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	0c1b      	lsrs	r3, r3, #16
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3714      	adds	r7, #20
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6a4:	69db      	ldr	r3, [r3, #28]
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	b29b      	uxth	r3, r3
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3714      	adds	r7, #20
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a6cc:	78fb      	ldrb	r3, [r7, #3]
 800a6ce:	015a      	lsls	r2, r3, #5
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e2:	695b      	ldr	r3, [r3, #20]
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a6ea:	68bb      	ldr	r3, [r7, #8]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3714      	adds	r7, #20
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b087      	sub	sp, #28
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a71a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	f003 030f 	and.w	r3, r3, #15
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	fa22 f303 	lsr.w	r3, r2, r3
 800a728:	01db      	lsls	r3, r3, #7
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	4313      	orrs	r3, r2
 800a730:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a732:	78fb      	ldrb	r3, [r7, #3]
 800a734:	015a      	lsls	r2, r3, #5
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	4413      	add	r3, r2
 800a73a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	4013      	ands	r3, r2
 800a744:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a746:	68bb      	ldr	r3, [r7, #8]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	371c      	adds	r7, #28
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	695b      	ldr	r3, [r3, #20]
 800a760:	f003 0301 	and.w	r3, r3, #1
}
 800a764:	4618      	mov	r0, r3
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a78a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a78e:	f023 0307 	bic.w	r3, r3, #7
 800a792:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
	...

0800a7b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b087      	sub	sp, #28
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	607a      	str	r2, [r7, #4]
 800a7c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	333c      	adds	r3, #60	; 0x3c
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	4a26      	ldr	r2, [pc, #152]	; (800a870 <USB_EP0_OutStart+0xb8>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d90a      	bls.n	800a7f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7ec:	d101      	bne.n	800a7f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	e037      	b.n	800a862 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a80c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a810:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a820:	f043 0318 	orr.w	r3, r3, #24
 800a824:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	697a      	ldr	r2, [r7, #20]
 800a830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a834:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a838:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a83a:	7afb      	ldrb	r3, [r7, #11]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d10f      	bne.n	800a860 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a846:	461a      	mov	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a85a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a85e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	371c      	adds	r7, #28
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	4f54300a 	.word	0x4f54300a

0800a874 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a87c:	2300      	movs	r3, #0
 800a87e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	3301      	adds	r3, #1
 800a884:	60fb      	str	r3, [r7, #12]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	4a13      	ldr	r2, [pc, #76]	; (800a8d8 <USB_CoreReset+0x64>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d901      	bls.n	800a892 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a88e:	2303      	movs	r3, #3
 800a890:	e01b      	b.n	800a8ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	2b00      	cmp	r3, #0
 800a898:	daf2      	bge.n	800a880 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a89a:	2300      	movs	r3, #0
 800a89c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	691b      	ldr	r3, [r3, #16]
 800a8a2:	f043 0201 	orr.w	r2, r3, #1
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	60fb      	str	r3, [r7, #12]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4a09      	ldr	r2, [pc, #36]	; (800a8d8 <USB_CoreReset+0x64>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d901      	bls.n	800a8bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e006      	b.n	800a8ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	f003 0301 	and.w	r3, r3, #1
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d0f0      	beq.n	800a8aa <USB_CoreReset+0x36>

  return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	00030d40 	.word	0x00030d40

0800a8dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a8e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a8ec:	f002 f96e 	bl	800cbcc <malloc>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d105      	bne.n	800a906 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a902:	2302      	movs	r3, #2
 800a904:	e066      	b.n	800a9d4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	7c1b      	ldrb	r3, [r3, #16]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d119      	bne.n	800a94a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a91a:	2202      	movs	r2, #2
 800a91c:	2181      	movs	r1, #129	; 0x81
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f001 ffdb 	bl	800c8da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a92a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a92e:	2202      	movs	r2, #2
 800a930:	2101      	movs	r1, #1
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f001 ffd1 	bl	800c8da <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2210      	movs	r2, #16
 800a944:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a948:	e016      	b.n	800a978 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a94a:	2340      	movs	r3, #64	; 0x40
 800a94c:	2202      	movs	r2, #2
 800a94e:	2181      	movs	r1, #129	; 0x81
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f001 ffc2 	bl	800c8da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a95c:	2340      	movs	r3, #64	; 0x40
 800a95e:	2202      	movs	r2, #2
 800a960:	2101      	movs	r1, #1
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f001 ffb9 	bl	800c8da <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2210      	movs	r2, #16
 800a974:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a978:	2308      	movs	r3, #8
 800a97a:	2203      	movs	r2, #3
 800a97c:	2182      	movs	r1, #130	; 0x82
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f001 ffab 	bl	800c8da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	7c1b      	ldrb	r3, [r3, #16]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d109      	bne.n	800a9c2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f002 f87c 	bl	800cab8 <USBD_LL_PrepareReceive>
 800a9c0:	e007      	b.n	800a9d2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9c8:	2340      	movs	r3, #64	; 0x40
 800a9ca:	2101      	movs	r1, #1
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f002 f873 	bl	800cab8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3710      	adds	r7, #16
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a9ec:	2181      	movs	r1, #129	; 0x81
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f001 ff99 	bl	800c926 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a9fa:	2101      	movs	r1, #1
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f001 ff92 	bl	800c926 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aa0a:	2182      	movs	r1, #130	; 0x82
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f001 ff8a 	bl	800c926 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00e      	beq.n	800aa4a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f002 f8cd 	bl	800cbdc <free>
    pdev->pClassData = NULL;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800aa4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa64:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800aa66:	2300      	movs	r3, #0
 800aa68:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d03a      	beq.n	800aaf4 <USBD_CDC_Setup+0xa0>
 800aa7e:	2b20      	cmp	r3, #32
 800aa80:	f040 8097 	bne.w	800abb2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	88db      	ldrh	r3, [r3, #6]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d029      	beq.n	800aae0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	b25b      	sxtb	r3, r3
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	da11      	bge.n	800aaba <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800aaa2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	88d2      	ldrh	r2, [r2, #6]
 800aaa8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800aaaa:	6939      	ldr	r1, [r7, #16]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	88db      	ldrh	r3, [r3, #6]
 800aab0:	461a      	mov	r2, r3
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f001 fab7 	bl	800c026 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800aab8:	e082      	b.n	800abc0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	785a      	ldrb	r2, [r3, #1]
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	88db      	ldrh	r3, [r3, #6]
 800aac8:	b2da      	uxtb	r2, r3
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800aad0:	6939      	ldr	r1, [r7, #16]
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	88db      	ldrh	r3, [r3, #6]
 800aad6:	461a      	mov	r2, r3
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f001 fad0 	bl	800c07e <USBD_CtlPrepareRx>
    break;
 800aade:	e06f      	b.n	800abc0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	7850      	ldrb	r0, [r2, #1]
 800aaec:	2200      	movs	r2, #0
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	4798      	blx	r3
    break;
 800aaf2:	e065      	b.n	800abc0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	785b      	ldrb	r3, [r3, #1]
 800aaf8:	2b0b      	cmp	r3, #11
 800aafa:	d84f      	bhi.n	800ab9c <USBD_CDC_Setup+0x148>
 800aafc:	a201      	add	r2, pc, #4	; (adr r2, 800ab04 <USBD_CDC_Setup+0xb0>)
 800aafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab02:	bf00      	nop
 800ab04:	0800ab35 	.word	0x0800ab35
 800ab08:	0800abab 	.word	0x0800abab
 800ab0c:	0800ab9d 	.word	0x0800ab9d
 800ab10:	0800ab9d 	.word	0x0800ab9d
 800ab14:	0800ab9d 	.word	0x0800ab9d
 800ab18:	0800ab9d 	.word	0x0800ab9d
 800ab1c:	0800ab9d 	.word	0x0800ab9d
 800ab20:	0800ab9d 	.word	0x0800ab9d
 800ab24:	0800ab9d 	.word	0x0800ab9d
 800ab28:	0800ab9d 	.word	0x0800ab9d
 800ab2c:	0800ab5d 	.word	0x0800ab5d
 800ab30:	0800ab85 	.word	0x0800ab85
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab3a:	2b03      	cmp	r3, #3
 800ab3c:	d107      	bne.n	800ab4e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ab3e:	f107 030c 	add.w	r3, r7, #12
 800ab42:	2202      	movs	r2, #2
 800ab44:	4619      	mov	r1, r3
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f001 fa6d 	bl	800c026 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ab4c:	e030      	b.n	800abb0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f001 f9f7 	bl	800bf44 <USBD_CtlError>
        ret = USBD_FAIL;
 800ab56:	2303      	movs	r3, #3
 800ab58:	75fb      	strb	r3, [r7, #23]
      break;
 800ab5a:	e029      	b.n	800abb0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab62:	2b03      	cmp	r3, #3
 800ab64:	d107      	bne.n	800ab76 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ab66:	f107 030f 	add.w	r3, r7, #15
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f001 fa59 	bl	800c026 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ab74:	e01c      	b.n	800abb0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f001 f9e3 	bl	800bf44 <USBD_CtlError>
        ret = USBD_FAIL;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	75fb      	strb	r3, [r7, #23]
      break;
 800ab82:	e015      	b.n	800abb0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	d00f      	beq.n	800abae <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800ab8e:	6839      	ldr	r1, [r7, #0]
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f001 f9d7 	bl	800bf44 <USBD_CtlError>
        ret = USBD_FAIL;
 800ab96:	2303      	movs	r3, #3
 800ab98:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ab9a:	e008      	b.n	800abae <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800ab9c:	6839      	ldr	r1, [r7, #0]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f001 f9d0 	bl	800bf44 <USBD_CtlError>
      ret = USBD_FAIL;
 800aba4:	2303      	movs	r3, #3
 800aba6:	75fb      	strb	r3, [r7, #23]
      break;
 800aba8:	e002      	b.n	800abb0 <USBD_CDC_Setup+0x15c>
      break;
 800abaa:	bf00      	nop
 800abac:	e008      	b.n	800abc0 <USBD_CDC_Setup+0x16c>
      break;
 800abae:	bf00      	nop
    }
    break;
 800abb0:	e006      	b.n	800abc0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800abb2:	6839      	ldr	r1, [r7, #0]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f001 f9c5 	bl	800bf44 <USBD_CtlError>
    ret = USBD_FAIL;
 800abba:	2303      	movs	r3, #3
 800abbc:	75fb      	strb	r3, [r7, #23]
    break;
 800abbe:	bf00      	nop
  }

  return (uint8_t)ret;
 800abc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3718      	adds	r7, #24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop

0800abcc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	460b      	mov	r3, r1
 800abd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800abde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d101      	bne.n	800abee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800abea:	2303      	movs	r3, #3
 800abec:	e049      	b.n	800ac82 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abf4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800abf6:	78fa      	ldrb	r2, [r7, #3]
 800abf8:	6879      	ldr	r1, [r7, #4]
 800abfa:	4613      	mov	r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	4413      	add	r3, r2
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	440b      	add	r3, r1
 800ac04:	3318      	adds	r3, #24
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d029      	beq.n	800ac60 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ac0c:	78fa      	ldrb	r2, [r7, #3]
 800ac0e:	6879      	ldr	r1, [r7, #4]
 800ac10:	4613      	mov	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4413      	add	r3, r2
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	440b      	add	r3, r1
 800ac1a:	3318      	adds	r3, #24
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	78f9      	ldrb	r1, [r7, #3]
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	460b      	mov	r3, r1
 800ac24:	00db      	lsls	r3, r3, #3
 800ac26:	1a5b      	subs	r3, r3, r1
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4403      	add	r3, r0
 800ac2c:	3344      	adds	r3, #68	; 0x44
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	fbb2 f1f3 	udiv	r1, r2, r3
 800ac34:	fb03 f301 	mul.w	r3, r3, r1
 800ac38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d110      	bne.n	800ac60 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ac3e:	78fa      	ldrb	r2, [r7, #3]
 800ac40:	6879      	ldr	r1, [r7, #4]
 800ac42:	4613      	mov	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	440b      	add	r3, r1
 800ac4c:	3318      	adds	r3, #24
 800ac4e:	2200      	movs	r2, #0
 800ac50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ac52:	78f9      	ldrb	r1, [r7, #3]
 800ac54:	2300      	movs	r3, #0
 800ac56:	2200      	movs	r2, #0
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f001 ff0c 	bl	800ca76 <USBD_LL_Transmit>
 800ac5e:	e00f      	b.n	800ac80 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ac76:	68ba      	ldr	r2, [r7, #8]
 800ac78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ac7c:	78fa      	ldrb	r2, [r7, #3]
 800ac7e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b084      	sub	sp, #16
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	460b      	mov	r3, r1
 800ac94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d101      	bne.n	800acac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aca8:	2303      	movs	r3, #3
 800acaa:	e015      	b.n	800acd8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800acac:	78fb      	ldrb	r3, [r7, #3]
 800acae:	4619      	mov	r1, r3
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f001 ff22 	bl	800cafa <USBD_LL_GetRxDataSize>
 800acb6:	4602      	mov	r2, r0
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800acd2:	4611      	mov	r1, r2
 800acd4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d015      	beq.n	800ad26 <USBD_CDC_EP0_RxReady+0x46>
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ad00:	2bff      	cmp	r3, #255	; 0xff
 800ad02:	d010      	beq.n	800ad26 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ad12:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ad1a:	b292      	uxth	r2, r2
 800ad1c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	22ff      	movs	r2, #255	; 0xff
 800ad22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2243      	movs	r2, #67	; 0x43
 800ad3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ad3e:	4b03      	ldr	r3, [pc, #12]	; (800ad4c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	200000a8 	.word	0x200000a8

0800ad50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2243      	movs	r2, #67	; 0x43
 800ad5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ad5e:	4b03      	ldr	r3, [pc, #12]	; (800ad6c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr
 800ad6c:	20000064 	.word	0x20000064

0800ad70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2243      	movs	r2, #67	; 0x43
 800ad7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ad7e:	4b03      	ldr	r3, [pc, #12]	; (800ad8c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	200000ec 	.word	0x200000ec

0800ad90 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	220a      	movs	r2, #10
 800ad9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ad9e:	4b03      	ldr	r3, [pc, #12]	; (800adac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	20000020 	.word	0x20000020

0800adb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d101      	bne.n	800adc4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800adc0:	2303      	movs	r3, #3
 800adc2:	e004      	b.n	800adce <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr

0800adda <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800adda:	b480      	push	{r7}
 800addc:	b087      	sub	sp, #28
 800adde:	af00      	add	r7, sp, #0
 800ade0:	60f8      	str	r0, [r7, #12]
 800ade2:	60b9      	str	r1, [r7, #8]
 800ade4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	68ba      	ldr	r2, [r7, #8]
 800adf2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	371c      	adds	r7, #28
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae1c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3714      	adds	r7, #20
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae42:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ae44:	2301      	movs	r3, #1
 800ae46:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ae52:	2303      	movs	r3, #3
 800ae54:	e01a      	b.n	800ae8c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d114      	bne.n	800ae8a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ae7e:	2181      	movs	r1, #129	; 0x81
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f001 fdf8 	bl	800ca76 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ae86:	2300      	movs	r3, #0
 800ae88:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aea2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	e016      	b.n	800aee0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	7c1b      	ldrb	r3, [r3, #16]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d109      	bne.n	800aece <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aec4:	2101      	movs	r1, #1
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f001 fdf6 	bl	800cab8 <USBD_LL_PrepareReceive>
 800aecc:	e007      	b.n	800aede <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aed4:	2340      	movs	r3, #64	; 0x40
 800aed6:	2101      	movs	r1, #1
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f001 fded 	bl	800cab8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	4613      	mov	r3, r2
 800aef4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d10a      	bne.n	800af12 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800aefc:	481a      	ldr	r0, [pc, #104]	; (800af68 <USBD_Init+0x80>)
 800aefe:	f001 ff25 	bl	800cd4c <iprintf>
 800af02:	481a      	ldr	r0, [pc, #104]	; (800af6c <USBD_Init+0x84>)
 800af04:	f001 ff22 	bl	800cd4c <iprintf>
 800af08:	200a      	movs	r0, #10
 800af0a:	f001 ff37 	bl	800cd7c <putchar>
#endif
    return USBD_FAIL;
 800af0e:	2303      	movs	r3, #3
 800af10:	e025      	b.n	800af5e <USBD_Init+0x76>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2200      	movs	r2, #0
 800af20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d003      	beq.n	800af36 <USBD_Init+0x4e>
  {
    pdev->pConfDesc = NULL;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2200      	movs	r2, #0
 800af32:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d003      	beq.n	800af44 <USBD_Init+0x5c>
  {
    pdev->pDesc = pdesc;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2201      	movs	r2, #1
 800af48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	79fa      	ldrb	r2, [r7, #7]
 800af50:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f001 fc5a 	bl	800c80c <USBD_LL_Init>
 800af58:	4603      	mov	r3, r0
 800af5a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800af5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3718      	adds	r7, #24
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	0800da70 	.word	0x0800da70
 800af6c:	0800da78 	.word	0x0800da78

0800af70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af7a:	2300      	movs	r3, #0
 800af7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10a      	bne.n	800af9a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800af84:	480f      	ldr	r0, [pc, #60]	; (800afc4 <USBD_RegisterClass+0x54>)
 800af86:	f001 fee1 	bl	800cd4c <iprintf>
 800af8a:	480f      	ldr	r0, [pc, #60]	; (800afc8 <USBD_RegisterClass+0x58>)
 800af8c:	f001 fede 	bl	800cd4c <iprintf>
 800af90:	200a      	movs	r0, #10
 800af92:	f001 fef3 	bl	800cd7c <putchar>
#endif
    return USBD_FAIL;
 800af96:	2303      	movs	r3, #3
 800af98:	e010      	b.n	800afbc <USBD_RegisterClass+0x4c>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	683a      	ldr	r2, [r7, #0]
 800af9e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afaa:	f107 020e 	add.w	r2, r7, #14
 800afae:	4610      	mov	r0, r2
 800afb0:	4798      	blx	r3
 800afb2:	4602      	mov	r2, r0
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	0800da70 	.word	0x0800da70
 800afc8:	0800da90 	.word	0x0800da90

0800afcc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f001 fc65 	bl	800c8a4 <USBD_LL_Start>
 800afda:	4603      	mov	r3, r0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b084      	sub	sp, #16
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	460b      	mov	r3, r1
 800b004:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b006:	2303      	movs	r3, #3
 800b008:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b010:	2b00      	cmp	r3, #0
 800b012:	d009      	beq.n	800b028 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	78fa      	ldrb	r2, [r7, #3]
 800b01e:	4611      	mov	r1, r2
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	4798      	blx	r3
 800b024:	4603      	mov	r3, r0
 800b026:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b028:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	460b      	mov	r3, r1
 800b03c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b044:	2b00      	cmp	r3, #0
 800b046:	d007      	beq.n	800b058 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	78fa      	ldrb	r2, [r7, #3]
 800b052:	4611      	mov	r1, r2
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	4798      	blx	r3
  }

  return USBD_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b084      	sub	sp, #16
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
 800b06a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	4618      	mov	r0, r3
 800b076:	f000 ff2b 	bl	800bed0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b088:	461a      	mov	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b096:	f003 031f 	and.w	r3, r3, #31
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d00e      	beq.n	800b0bc <USBD_LL_SetupStage+0x5a>
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d302      	bcc.n	800b0a8 <USBD_LL_SetupStage+0x46>
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d014      	beq.n	800b0d0 <USBD_LL_SetupStage+0x6e>
 800b0a6:	e01d      	b.n	800b0e4 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fa17 	bl	800b4e4 <USBD_StdDevReq>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b0ba:	e020      	b.n	800b0fe <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 fa7b 	bl	800b5c0 <USBD_StdItfReq>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	73fb      	strb	r3, [r7, #15]
      break;
 800b0ce:	e016      	b.n	800b0fe <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 fab7 	bl	800b64c <USBD_StdEPReq>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0e2:	e00c      	b.n	800b0fe <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b0ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f001 fc36 	bl	800c964 <USBD_LL_StallEP>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b0fc:	bf00      	nop
  }

  return ret;
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b086      	sub	sp, #24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	460b      	mov	r3, r1
 800b112:	607a      	str	r2, [r7, #4]
 800b114:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b116:	7afb      	ldrb	r3, [r7, #11]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d137      	bne.n	800b18c <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b122:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b12a:	2b03      	cmp	r3, #3
 800b12c:	d14a      	bne.n	800b1c4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	689a      	ldr	r2, [r3, #8]
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	429a      	cmp	r2, r3
 800b138:	d913      	bls.n	800b162 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	689a      	ldr	r2, [r3, #8]
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	1ad2      	subs	r2, r2, r3
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	68da      	ldr	r2, [r3, #12]
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	4293      	cmp	r3, r2
 800b152:	bf28      	it	cs
 800b154:	4613      	movcs	r3, r2
 800b156:	461a      	mov	r2, r3
 800b158:	6879      	ldr	r1, [r7, #4]
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f000 ffac 	bl	800c0b8 <USBD_CtlContinueRx>
 800b160:	e030      	b.n	800b1c4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00a      	beq.n	800b184 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b174:	2b03      	cmp	r3, #3
 800b176:	d105      	bne.n	800b184 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f000 ffa8 	bl	800c0da <USBD_CtlSendStatus>
 800b18a:	e01b      	b.n	800b1c4 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b192:	699b      	ldr	r3, [r3, #24]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d013      	beq.n	800b1c0 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b19e:	2b03      	cmp	r3, #3
 800b1a0:	d10e      	bne.n	800b1c0 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a8:	699b      	ldr	r3, [r3, #24]
 800b1aa:	7afa      	ldrb	r2, [r7, #11]
 800b1ac:	4611      	mov	r1, r2
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	4798      	blx	r3
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b1b6:	7dfb      	ldrb	r3, [r7, #23]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d003      	beq.n	800b1c4 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800b1bc:	7dfb      	ldrb	r3, [r7, #23]
 800b1be:	e002      	b.n	800b1c6 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	e000      	b.n	800b1c6 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3718      	adds	r7, #24
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b086      	sub	sp, #24
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	60f8      	str	r0, [r7, #12]
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	607a      	str	r2, [r7, #4]
 800b1da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b1dc:	7afb      	ldrb	r3, [r7, #11]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d16a      	bne.n	800b2b8 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	3314      	adds	r3, #20
 800b1e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d155      	bne.n	800b29e <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	689a      	ldr	r2, [r3, #8]
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d914      	bls.n	800b228 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	689a      	ldr	r2, [r3, #8]
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	1ad2      	subs	r2, r2, r3
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	461a      	mov	r2, r3
 800b212:	6879      	ldr	r1, [r7, #4]
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f000 ff21 	bl	800c05c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b21a:	2300      	movs	r3, #0
 800b21c:	2200      	movs	r2, #0
 800b21e:	2100      	movs	r1, #0
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f001 fc49 	bl	800cab8 <USBD_LL_PrepareReceive>
 800b226:	e03a      	b.n	800b29e <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	68da      	ldr	r2, [r3, #12]
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	429a      	cmp	r2, r3
 800b232:	d11c      	bne.n	800b26e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d316      	bcc.n	800b26e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	685a      	ldr	r2, [r3, #4]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d20f      	bcs.n	800b26e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b24e:	2200      	movs	r2, #0
 800b250:	2100      	movs	r1, #0
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f000 ff02 	bl	800c05c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b260:	2300      	movs	r3, #0
 800b262:	2200      	movs	r2, #0
 800b264:	2100      	movs	r1, #0
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	f001 fc26 	bl	800cab8 <USBD_LL_PrepareReceive>
 800b26c:	e017      	b.n	800b29e <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00a      	beq.n	800b290 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b280:	2b03      	cmp	r3, #3
 800b282:	d105      	bne.n	800b290 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b290:	2180      	movs	r1, #128	; 0x80
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f001 fb66 	bl	800c964 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f000 ff31 	bl	800c100 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d123      	bne.n	800b2f0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f7ff fe9b 	bl	800afe4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b2b6:	e01b      	b.n	800b2f0 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2be:	695b      	ldr	r3, [r3, #20]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d013      	beq.n	800b2ec <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b2ca:	2b03      	cmp	r3, #3
 800b2cc:	d10e      	bne.n	800b2ec <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2d4:	695b      	ldr	r3, [r3, #20]
 800b2d6:	7afa      	ldrb	r2, [r7, #11]
 800b2d8:	4611      	mov	r1, r2
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	4798      	blx	r3
 800b2de:	4603      	mov	r3, r0
 800b2e0:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b2e2:	7dfb      	ldrb	r3, [r7, #23]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d003      	beq.n	800b2f0 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800b2e8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ea:	e002      	b.n	800b2f2 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b2ec:	2303      	movs	r3, #3
 800b2ee:	e000      	b.n	800b2f2 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3718      	adds	r7, #24
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b082      	sub	sp, #8
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b326:	2b00      	cmp	r3, #0
 800b328:	d009      	beq.n	800b33e <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	6852      	ldr	r2, [r2, #4]
 800b336:	b2d2      	uxtb	r2, r2
 800b338:	4611      	mov	r1, r2
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b33e:	2340      	movs	r3, #64	; 0x40
 800b340:	2200      	movs	r2, #0
 800b342:	2100      	movs	r1, #0
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f001 fac8 	bl	800c8da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2240      	movs	r2, #64	; 0x40
 800b356:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b35a:	2340      	movs	r3, #64	; 0x40
 800b35c:	2200      	movs	r2, #0
 800b35e:	2180      	movs	r1, #128	; 0x80
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f001 faba 	bl	800c8da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2201      	movs	r2, #1
 800b36a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2240      	movs	r2, #64	; 0x40
 800b370:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	3708      	adds	r7, #8
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	460b      	mov	r3, r1
 800b386:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	78fa      	ldrb	r2, [r7, #3]
 800b38c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2204      	movs	r2, #4
 800b3b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	370c      	adds	r7, #12
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	b083      	sub	sp, #12
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3d4:	2b04      	cmp	r3, #4
 800b3d6:	d105      	bne.n	800b3e4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	370c      	adds	r7, #12
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b082      	sub	sp, #8
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b400:	2b03      	cmp	r3, #3
 800b402:	d10b      	bne.n	800b41c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b40a:	69db      	ldr	r3, [r3, #28]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d005      	beq.n	800b41c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b416:	69db      	ldr	r3, [r3, #28]
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3708      	adds	r7, #8
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b426:	b480      	push	{r7}
 800b428:	b083      	sub	sp, #12
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	460b      	mov	r3, r1
 800b430:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	460b      	mov	r3, r1
 800b44a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	370c      	adds	r7, #12
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr

0800b45a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b45a:	b480      	push	{r7}
 800b45c:	b083      	sub	sp, #12
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b462:	2300      	movs	r3, #0
}
 800b464:	4618      	mov	r0, r3
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b486:	2b00      	cmp	r3, #0
 800b488:	d009      	beq.n	800b49e <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	6852      	ldr	r2, [r2, #4]
 800b496:	b2d2      	uxtb	r2, r2
 800b498:	4611      	mov	r1, r2
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	4798      	blx	r3
  }

  return USBD_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b087      	sub	sp, #28
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b4c6:	8a3b      	ldrh	r3, [r7, #16]
 800b4c8:	021b      	lsls	r3, r3, #8
 800b4ca:	b21a      	sxth	r2, r3
 800b4cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	b21b      	sxth	r3, r3
 800b4d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b4d6:	89fb      	ldrh	r3, [r7, #14]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	371c      	adds	r7, #28
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4fa:	2b20      	cmp	r3, #32
 800b4fc:	d004      	beq.n	800b508 <USBD_StdDevReq+0x24>
 800b4fe:	2b40      	cmp	r3, #64	; 0x40
 800b500:	d002      	beq.n	800b508 <USBD_StdDevReq+0x24>
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00a      	beq.n	800b51c <USBD_StdDevReq+0x38>
 800b506:	e050      	b.n	800b5aa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	6839      	ldr	r1, [r7, #0]
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	4798      	blx	r3
 800b516:	4603      	mov	r3, r0
 800b518:	73fb      	strb	r3, [r7, #15]
    break;
 800b51a:	e04b      	b.n	800b5b4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	785b      	ldrb	r3, [r3, #1]
 800b520:	2b09      	cmp	r3, #9
 800b522:	d83c      	bhi.n	800b59e <USBD_StdDevReq+0xba>
 800b524:	a201      	add	r2, pc, #4	; (adr r2, 800b52c <USBD_StdDevReq+0x48>)
 800b526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52a:	bf00      	nop
 800b52c:	0800b581 	.word	0x0800b581
 800b530:	0800b595 	.word	0x0800b595
 800b534:	0800b59f 	.word	0x0800b59f
 800b538:	0800b58b 	.word	0x0800b58b
 800b53c:	0800b59f 	.word	0x0800b59f
 800b540:	0800b55f 	.word	0x0800b55f
 800b544:	0800b555 	.word	0x0800b555
 800b548:	0800b59f 	.word	0x0800b59f
 800b54c:	0800b577 	.word	0x0800b577
 800b550:	0800b569 	.word	0x0800b569
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800b554:	6839      	ldr	r1, [r7, #0]
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f9ce 	bl	800b8f8 <USBD_GetDescriptor>
      break;
 800b55c:	e024      	b.n	800b5a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800b55e:	6839      	ldr	r1, [r7, #0]
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 fb33 	bl	800bbcc <USBD_SetAddress>
      break;
 800b566:	e01f      	b.n	800b5a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 fb70 	bl	800bc50 <USBD_SetConfig>
 800b570:	4603      	mov	r3, r0
 800b572:	73fb      	strb	r3, [r7, #15]
      break;
 800b574:	e018      	b.n	800b5a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800b576:	6839      	ldr	r1, [r7, #0]
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 fc0d 	bl	800bd98 <USBD_GetConfig>
      break;
 800b57e:	e013      	b.n	800b5a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fc3c 	bl	800be00 <USBD_GetStatus>
      break;
 800b588:	e00e      	b.n	800b5a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800b58a:	6839      	ldr	r1, [r7, #0]
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 fc6a 	bl	800be66 <USBD_SetFeature>
      break;
 800b592:	e009      	b.n	800b5a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800b594:	6839      	ldr	r1, [r7, #0]
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 fc79 	bl	800be8e <USBD_ClrFeature>
      break;
 800b59c:	e004      	b.n	800b5a8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800b59e:	6839      	ldr	r1, [r7, #0]
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 fccf 	bl	800bf44 <USBD_CtlError>
      break;
 800b5a6:	bf00      	nop
    }
    break;
 800b5a8:	e004      	b.n	800b5b4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800b5aa:	6839      	ldr	r1, [r7, #0]
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 fcc9 	bl	800bf44 <USBD_CtlError>
    break;
 800b5b2:	bf00      	nop
  }

  return ret;
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop

0800b5c0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b5d6:	2b20      	cmp	r3, #32
 800b5d8:	d003      	beq.n	800b5e2 <USBD_StdItfReq+0x22>
 800b5da:	2b40      	cmp	r3, #64	; 0x40
 800b5dc:	d001      	beq.n	800b5e2 <USBD_StdItfReq+0x22>
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d12a      	bne.n	800b638 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d81d      	bhi.n	800b62a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	889b      	ldrh	r3, [r3, #4]
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	2b0a      	cmp	r3, #10
 800b5f6:	d813      	bhi.n	800b620 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	6839      	ldr	r1, [r7, #0]
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	4798      	blx	r3
 800b606:	4603      	mov	r3, r0
 800b608:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	88db      	ldrh	r3, [r3, #6]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d110      	bne.n	800b634 <USBD_StdItfReq+0x74>
 800b612:	7bfb      	ldrb	r3, [r7, #15]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d10d      	bne.n	800b634 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 fd5e 	bl	800c0da <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800b61e:	e009      	b.n	800b634 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800b620:	6839      	ldr	r1, [r7, #0]
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 fc8e 	bl	800bf44 <USBD_CtlError>
      break;
 800b628:	e004      	b.n	800b634 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800b62a:	6839      	ldr	r1, [r7, #0]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fc89 	bl	800bf44 <USBD_CtlError>
      break;
 800b632:	e000      	b.n	800b636 <USBD_StdItfReq+0x76>
      break;
 800b634:	bf00      	nop
    }
    break;
 800b636:	e004      	b.n	800b642 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800b638:	6839      	ldr	r1, [r7, #0]
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fc82 	bl	800bf44 <USBD_CtlError>
    break;
 800b640:	bf00      	nop
  }

  return ret;
 800b642:	7bfb      	ldrb	r3, [r7, #15]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	889b      	ldrh	r3, [r3, #4]
 800b65e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b668:	2b20      	cmp	r3, #32
 800b66a:	d004      	beq.n	800b676 <USBD_StdEPReq+0x2a>
 800b66c:	2b40      	cmp	r3, #64	; 0x40
 800b66e:	d002      	beq.n	800b676 <USBD_StdEPReq+0x2a>
 800b670:	2b00      	cmp	r3, #0
 800b672:	d00a      	beq.n	800b68a <USBD_StdEPReq+0x3e>
 800b674:	e135      	b.n	800b8e2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	6839      	ldr	r1, [r7, #0]
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	4798      	blx	r3
 800b684:	4603      	mov	r3, r0
 800b686:	73fb      	strb	r3, [r7, #15]
    break;
 800b688:	e130      	b.n	800b8ec <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	785b      	ldrb	r3, [r3, #1]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d03e      	beq.n	800b710 <USBD_StdEPReq+0xc4>
 800b692:	2b03      	cmp	r3, #3
 800b694:	d002      	beq.n	800b69c <USBD_StdEPReq+0x50>
 800b696:	2b00      	cmp	r3, #0
 800b698:	d077      	beq.n	800b78a <USBD_StdEPReq+0x13e>
 800b69a:	e11c      	b.n	800b8d6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	d002      	beq.n	800b6ac <USBD_StdEPReq+0x60>
 800b6a6:	2b03      	cmp	r3, #3
 800b6a8:	d015      	beq.n	800b6d6 <USBD_StdEPReq+0x8a>
 800b6aa:	e02b      	b.n	800b704 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6ac:	7bbb      	ldrb	r3, [r7, #14]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d00c      	beq.n	800b6cc <USBD_StdEPReq+0x80>
 800b6b2:	7bbb      	ldrb	r3, [r7, #14]
 800b6b4:	2b80      	cmp	r3, #128	; 0x80
 800b6b6:	d009      	beq.n	800b6cc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b6b8:	7bbb      	ldrb	r3, [r7, #14]
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f001 f951 	bl	800c964 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6c2:	2180      	movs	r1, #128	; 0x80
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f001 f94d 	bl	800c964 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b6ca:	e020      	b.n	800b70e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800b6cc:	6839      	ldr	r1, [r7, #0]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 fc38 	bl	800bf44 <USBD_CtlError>
        break;
 800b6d4:	e01b      	b.n	800b70e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	885b      	ldrh	r3, [r3, #2]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10e      	bne.n	800b6fc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b6de:	7bbb      	ldrb	r3, [r7, #14]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00b      	beq.n	800b6fc <USBD_StdEPReq+0xb0>
 800b6e4:	7bbb      	ldrb	r3, [r7, #14]
 800b6e6:	2b80      	cmp	r3, #128	; 0x80
 800b6e8:	d008      	beq.n	800b6fc <USBD_StdEPReq+0xb0>
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	88db      	ldrh	r3, [r3, #6]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d104      	bne.n	800b6fc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b6f2:	7bbb      	ldrb	r3, [r7, #14]
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f001 f934 	bl	800c964 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 fcec 	bl	800c0da <USBD_CtlSendStatus>

        break;
 800b702:	e004      	b.n	800b70e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800b704:	6839      	ldr	r1, [r7, #0]
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fc1c 	bl	800bf44 <USBD_CtlError>
        break;
 800b70c:	bf00      	nop
      }
      break;
 800b70e:	e0e7      	b.n	800b8e0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b716:	2b02      	cmp	r3, #2
 800b718:	d002      	beq.n	800b720 <USBD_StdEPReq+0xd4>
 800b71a:	2b03      	cmp	r3, #3
 800b71c:	d015      	beq.n	800b74a <USBD_StdEPReq+0xfe>
 800b71e:	e02d      	b.n	800b77c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b720:	7bbb      	ldrb	r3, [r7, #14]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00c      	beq.n	800b740 <USBD_StdEPReq+0xf4>
 800b726:	7bbb      	ldrb	r3, [r7, #14]
 800b728:	2b80      	cmp	r3, #128	; 0x80
 800b72a:	d009      	beq.n	800b740 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b72c:	7bbb      	ldrb	r3, [r7, #14]
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f001 f917 	bl	800c964 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b736:	2180      	movs	r1, #128	; 0x80
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f001 f913 	bl	800c964 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b73e:	e023      	b.n	800b788 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800b740:	6839      	ldr	r1, [r7, #0]
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 fbfe 	bl	800bf44 <USBD_CtlError>
        break;
 800b748:	e01e      	b.n	800b788 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	885b      	ldrh	r3, [r3, #2]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d119      	bne.n	800b786 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b752:	7bbb      	ldrb	r3, [r7, #14]
 800b754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d004      	beq.n	800b766 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
 800b75e:	4619      	mov	r1, r3
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f001 f91e 	bl	800c9a2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 fcb7 	bl	800c0da <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	6839      	ldr	r1, [r7, #0]
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	4798      	blx	r3
        }
        break;
 800b77a:	e004      	b.n	800b786 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800b77c:	6839      	ldr	r1, [r7, #0]
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 fbe0 	bl	800bf44 <USBD_CtlError>
        break;
 800b784:	e000      	b.n	800b788 <USBD_StdEPReq+0x13c>
        break;
 800b786:	bf00      	nop
      }
      break;
 800b788:	e0aa      	b.n	800b8e0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b790:	2b02      	cmp	r3, #2
 800b792:	d002      	beq.n	800b79a <USBD_StdEPReq+0x14e>
 800b794:	2b03      	cmp	r3, #3
 800b796:	d032      	beq.n	800b7fe <USBD_StdEPReq+0x1b2>
 800b798:	e097      	b.n	800b8ca <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b79a:	7bbb      	ldrb	r3, [r7, #14]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d007      	beq.n	800b7b0 <USBD_StdEPReq+0x164>
 800b7a0:	7bbb      	ldrb	r3, [r7, #14]
 800b7a2:	2b80      	cmp	r3, #128	; 0x80
 800b7a4:	d004      	beq.n	800b7b0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800b7a6:	6839      	ldr	r1, [r7, #0]
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fbcb 	bl	800bf44 <USBD_CtlError>
          break;
 800b7ae:	e091      	b.n	800b8d4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	da0b      	bge.n	800b7d0 <USBD_StdEPReq+0x184>
 800b7b8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b7be:	4613      	mov	r3, r2
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4413      	add	r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	3310      	adds	r3, #16
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	3304      	adds	r3, #4
 800b7ce:	e00b      	b.n	800b7e8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b7d0:	7bbb      	ldrb	r3, [r7, #14]
 800b7d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	4413      	add	r3, r2
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	2202      	movs	r2, #2
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fc15 	bl	800c026 <USBD_CtlSendData>
        break;
 800b7fc:	e06a      	b.n	800b8d4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800b7fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b802:	2b00      	cmp	r3, #0
 800b804:	da11      	bge.n	800b82a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b806:	7bbb      	ldrb	r3, [r7, #14]
 800b808:	f003 020f 	and.w	r2, r3, #15
 800b80c:	6879      	ldr	r1, [r7, #4]
 800b80e:	4613      	mov	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	4413      	add	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	440b      	add	r3, r1
 800b818:	3324      	adds	r3, #36	; 0x24
 800b81a:	881b      	ldrh	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d117      	bne.n	800b850 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800b820:	6839      	ldr	r1, [r7, #0]
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 fb8e 	bl	800bf44 <USBD_CtlError>
            break;
 800b828:	e054      	b.n	800b8d4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b82a:	7bbb      	ldrb	r3, [r7, #14]
 800b82c:	f003 020f 	and.w	r2, r3, #15
 800b830:	6879      	ldr	r1, [r7, #4]
 800b832:	4613      	mov	r3, r2
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4413      	add	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	440b      	add	r3, r1
 800b83c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b840:	881b      	ldrh	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d104      	bne.n	800b850 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800b846:	6839      	ldr	r1, [r7, #0]
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 fb7b 	bl	800bf44 <USBD_CtlError>
            break;
 800b84e:	e041      	b.n	800b8d4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b854:	2b00      	cmp	r3, #0
 800b856:	da0b      	bge.n	800b870 <USBD_StdEPReq+0x224>
 800b858:	7bbb      	ldrb	r3, [r7, #14]
 800b85a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b85e:	4613      	mov	r3, r2
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	4413      	add	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	3310      	adds	r3, #16
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	4413      	add	r3, r2
 800b86c:	3304      	adds	r3, #4
 800b86e:	e00b      	b.n	800b888 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b870:	7bbb      	ldrb	r3, [r7, #14]
 800b872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b876:	4613      	mov	r3, r2
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	4413      	add	r3, r2
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	4413      	add	r3, r2
 800b886:	3304      	adds	r3, #4
 800b888:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b88a:	7bbb      	ldrb	r3, [r7, #14]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <USBD_StdEPReq+0x24a>
 800b890:	7bbb      	ldrb	r3, [r7, #14]
 800b892:	2b80      	cmp	r3, #128	; 0x80
 800b894:	d103      	bne.n	800b89e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	2200      	movs	r2, #0
 800b89a:	601a      	str	r2, [r3, #0]
 800b89c:	e00e      	b.n	800b8bc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b89e:	7bbb      	ldrb	r3, [r7, #14]
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f001 f89c 	bl	800c9e0 <USBD_LL_IsStallEP>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d003      	beq.n	800b8b6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	601a      	str	r2, [r3, #0]
 800b8b4:	e002      	b.n	800b8bc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	2202      	movs	r2, #2
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fbaf 	bl	800c026 <USBD_CtlSendData>
          break;
 800b8c8:	e004      	b.n	800b8d4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fb39 	bl	800bf44 <USBD_CtlError>
        break;
 800b8d2:	bf00      	nop
      }
      break;
 800b8d4:	e004      	b.n	800b8e0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800b8d6:	6839      	ldr	r1, [r7, #0]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fb33 	bl	800bf44 <USBD_CtlError>
      break;
 800b8de:	bf00      	nop
    }
    break;
 800b8e0:	e004      	b.n	800b8ec <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800b8e2:	6839      	ldr	r1, [r7, #0]
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 fb2d 	bl	800bf44 <USBD_CtlError>
    break;
 800b8ea:	bf00      	nop
  }

  return ret;
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
	...

0800b8f8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b902:	2300      	movs	r3, #0
 800b904:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b906:	2300      	movs	r3, #0
 800b908:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b90a:	2300      	movs	r3, #0
 800b90c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	885b      	ldrh	r3, [r3, #2]
 800b912:	0a1b      	lsrs	r3, r3, #8
 800b914:	b29b      	uxth	r3, r3
 800b916:	3b01      	subs	r3, #1
 800b918:	2b06      	cmp	r3, #6
 800b91a:	f200 8128 	bhi.w	800bb6e <USBD_GetDescriptor+0x276>
 800b91e:	a201      	add	r2, pc, #4	; (adr r2, 800b924 <USBD_GetDescriptor+0x2c>)
 800b920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b924:	0800b941 	.word	0x0800b941
 800b928:	0800b959 	.word	0x0800b959
 800b92c:	0800b999 	.word	0x0800b999
 800b930:	0800bb6f 	.word	0x0800bb6f
 800b934:	0800bb6f 	.word	0x0800bb6f
 800b938:	0800bb0f 	.word	0x0800bb0f
 800b93c:	0800bb3b 	.word	0x0800bb3b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	7c12      	ldrb	r2, [r2, #16]
 800b94c:	f107 0108 	add.w	r1, r7, #8
 800b950:	4610      	mov	r0, r2
 800b952:	4798      	blx	r3
 800b954:	60f8      	str	r0, [r7, #12]
    break;
 800b956:	e112      	b.n	800bb7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	7c1b      	ldrb	r3, [r3, #16]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d10d      	bne.n	800b97c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b968:	f107 0208 	add.w	r2, r7, #8
 800b96c:	4610      	mov	r0, r2
 800b96e:	4798      	blx	r3
 800b970:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	3301      	adds	r3, #1
 800b976:	2202      	movs	r2, #2
 800b978:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b97a:	e100      	b.n	800bb7e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b984:	f107 0208 	add.w	r2, r7, #8
 800b988:	4610      	mov	r0, r2
 800b98a:	4798      	blx	r3
 800b98c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	3301      	adds	r3, #1
 800b992:	2202      	movs	r2, #2
 800b994:	701a      	strb	r2, [r3, #0]
    break;
 800b996:	e0f2      	b.n	800bb7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	885b      	ldrh	r3, [r3, #2]
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	2b05      	cmp	r3, #5
 800b9a0:	f200 80ac 	bhi.w	800bafc <USBD_GetDescriptor+0x204>
 800b9a4:	a201      	add	r2, pc, #4	; (adr r2, 800b9ac <USBD_GetDescriptor+0xb4>)
 800b9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9aa:	bf00      	nop
 800b9ac:	0800b9c5 	.word	0x0800b9c5
 800b9b0:	0800b9f9 	.word	0x0800b9f9
 800b9b4:	0800ba2d 	.word	0x0800ba2d
 800b9b8:	0800ba61 	.word	0x0800ba61
 800b9bc:	0800ba95 	.word	0x0800ba95
 800b9c0:	0800bac9 	.word	0x0800bac9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00b      	beq.n	800b9e8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	7c12      	ldrb	r2, [r2, #16]
 800b9dc:	f107 0108 	add.w	r1, r7, #8
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	4798      	blx	r3
 800b9e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9e6:	e091      	b.n	800bb0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 faaa 	bl	800bf44 <USBD_CtlError>
        err++;
 800b9f0:	7afb      	ldrb	r3, [r7, #11]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	72fb      	strb	r3, [r7, #11]
      break;
 800b9f6:	e089      	b.n	800bb0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d00b      	beq.n	800ba1c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	7c12      	ldrb	r2, [r2, #16]
 800ba10:	f107 0108 	add.w	r1, r7, #8
 800ba14:	4610      	mov	r0, r2
 800ba16:	4798      	blx	r3
 800ba18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba1a:	e077      	b.n	800bb0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ba1c:	6839      	ldr	r1, [r7, #0]
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 fa90 	bl	800bf44 <USBD_CtlError>
        err++;
 800ba24:	7afb      	ldrb	r3, [r7, #11]
 800ba26:	3301      	adds	r3, #1
 800ba28:	72fb      	strb	r3, [r7, #11]
      break;
 800ba2a:	e06f      	b.n	800bb0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00b      	beq.n	800ba50 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	7c12      	ldrb	r2, [r2, #16]
 800ba44:	f107 0108 	add.w	r1, r7, #8
 800ba48:	4610      	mov	r0, r2
 800ba4a:	4798      	blx	r3
 800ba4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba4e:	e05d      	b.n	800bb0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ba50:	6839      	ldr	r1, [r7, #0]
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 fa76 	bl	800bf44 <USBD_CtlError>
        err++;
 800ba58:	7afb      	ldrb	r3, [r7, #11]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	72fb      	strb	r3, [r7, #11]
      break;
 800ba5e:	e055      	b.n	800bb0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00b      	beq.n	800ba84 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	7c12      	ldrb	r2, [r2, #16]
 800ba78:	f107 0108 	add.w	r1, r7, #8
 800ba7c:	4610      	mov	r0, r2
 800ba7e:	4798      	blx	r3
 800ba80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba82:	e043      	b.n	800bb0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ba84:	6839      	ldr	r1, [r7, #0]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 fa5c 	bl	800bf44 <USBD_CtlError>
        err++;
 800ba8c:	7afb      	ldrb	r3, [r7, #11]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	72fb      	strb	r3, [r7, #11]
      break;
 800ba92:	e03b      	b.n	800bb0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba9a:	695b      	ldr	r3, [r3, #20]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00b      	beq.n	800bab8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baa6:	695b      	ldr	r3, [r3, #20]
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	7c12      	ldrb	r2, [r2, #16]
 800baac:	f107 0108 	add.w	r1, r7, #8
 800bab0:	4610      	mov	r0, r2
 800bab2:	4798      	blx	r3
 800bab4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bab6:	e029      	b.n	800bb0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bab8:	6839      	ldr	r1, [r7, #0]
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 fa42 	bl	800bf44 <USBD_CtlError>
        err++;
 800bac0:	7afb      	ldrb	r3, [r7, #11]
 800bac2:	3301      	adds	r3, #1
 800bac4:	72fb      	strb	r3, [r7, #11]
      break;
 800bac6:	e021      	b.n	800bb0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bace:	699b      	ldr	r3, [r3, #24]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d00b      	beq.n	800baec <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bada:	699b      	ldr	r3, [r3, #24]
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	7c12      	ldrb	r2, [r2, #16]
 800bae0:	f107 0108 	add.w	r1, r7, #8
 800bae4:	4610      	mov	r0, r2
 800bae6:	4798      	blx	r3
 800bae8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800baea:	e00f      	b.n	800bb0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800baec:	6839      	ldr	r1, [r7, #0]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 fa28 	bl	800bf44 <USBD_CtlError>
        err++;
 800baf4:	7afb      	ldrb	r3, [r7, #11]
 800baf6:	3301      	adds	r3, #1
 800baf8:	72fb      	strb	r3, [r7, #11]
      break;
 800bafa:	e007      	b.n	800bb0c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800bafc:	6839      	ldr	r1, [r7, #0]
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 fa20 	bl	800bf44 <USBD_CtlError>
      err++;
 800bb04:	7afb      	ldrb	r3, [r7, #11]
 800bb06:	3301      	adds	r3, #1
 800bb08:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800bb0a:	bf00      	nop
    }
    break;
 800bb0c:	e037      	b.n	800bb7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	7c1b      	ldrb	r3, [r3, #16]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d109      	bne.n	800bb2a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb1e:	f107 0208 	add.w	r2, r7, #8
 800bb22:	4610      	mov	r0, r2
 800bb24:	4798      	blx	r3
 800bb26:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bb28:	e029      	b.n	800bb7e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 fa09 	bl	800bf44 <USBD_CtlError>
      err++;
 800bb32:	7afb      	ldrb	r3, [r7, #11]
 800bb34:	3301      	adds	r3, #1
 800bb36:	72fb      	strb	r3, [r7, #11]
    break;
 800bb38:	e021      	b.n	800bb7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	7c1b      	ldrb	r3, [r3, #16]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10d      	bne.n	800bb5e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb4a:	f107 0208 	add.w	r2, r7, #8
 800bb4e:	4610      	mov	r0, r2
 800bb50:	4798      	blx	r3
 800bb52:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	3301      	adds	r3, #1
 800bb58:	2207      	movs	r2, #7
 800bb5a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bb5c:	e00f      	b.n	800bb7e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 f9ef 	bl	800bf44 <USBD_CtlError>
      err++;
 800bb66:	7afb      	ldrb	r3, [r7, #11]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	72fb      	strb	r3, [r7, #11]
    break;
 800bb6c:	e007      	b.n	800bb7e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800bb6e:	6839      	ldr	r1, [r7, #0]
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f9e7 	bl	800bf44 <USBD_CtlError>
    err++;
 800bb76:	7afb      	ldrb	r3, [r7, #11]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	72fb      	strb	r3, [r7, #11]
    break;
 800bb7c:	bf00      	nop
  }

  if (err != 0U)
 800bb7e:	7afb      	ldrb	r3, [r7, #11]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d11e      	bne.n	800bbc2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	88db      	ldrh	r3, [r3, #6]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d016      	beq.n	800bbba <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800bb8c:	893b      	ldrh	r3, [r7, #8]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00e      	beq.n	800bbb0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	88da      	ldrh	r2, [r3, #6]
 800bb96:	893b      	ldrh	r3, [r7, #8]
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	bf28      	it	cs
 800bb9c:	4613      	movcs	r3, r2
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800bba2:	893b      	ldrh	r3, [r7, #8]
 800bba4:	461a      	mov	r2, r3
 800bba6:	68f9      	ldr	r1, [r7, #12]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fa3c 	bl	800c026 <USBD_CtlSendData>
 800bbae:	e009      	b.n	800bbc4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800bbb0:	6839      	ldr	r1, [r7, #0]
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f9c6 	bl	800bf44 <USBD_CtlError>
 800bbb8:	e004      	b.n	800bbc4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fa8d 	bl	800c0da <USBD_CtlSendStatus>
 800bbc0:	e000      	b.n	800bbc4 <USBD_GetDescriptor+0x2cc>
    return;
 800bbc2:	bf00      	nop
    }
  }
}
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop

0800bbcc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	889b      	ldrh	r3, [r3, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d130      	bne.n	800bc40 <USBD_SetAddress+0x74>
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	88db      	ldrh	r3, [r3, #6]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d12c      	bne.n	800bc40 <USBD_SetAddress+0x74>
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	885b      	ldrh	r3, [r3, #2]
 800bbea:	2b7f      	cmp	r3, #127	; 0x7f
 800bbec:	d828      	bhi.n	800bc40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	885b      	ldrh	r3, [r3, #2]
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc00:	2b03      	cmp	r3, #3
 800bc02:	d104      	bne.n	800bc0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f99c 	bl	800bf44 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc0c:	e01c      	b.n	800bc48 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	7bfa      	ldrb	r2, [r7, #15]
 800bc12:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bc16:	7bfb      	ldrb	r3, [r7, #15]
 800bc18:	4619      	mov	r1, r3
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 ff0c 	bl	800ca38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fa5a 	bl	800c0da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bc26:	7bfb      	ldrb	r3, [r7, #15]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d004      	beq.n	800bc36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2202      	movs	r2, #2
 800bc30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc34:	e008      	b.n	800bc48 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc3e:	e003      	b.n	800bc48 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 f97e 	bl	800bf44 <USBD_CtlError>
  }
}
 800bc48:	bf00      	nop
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	885b      	ldrh	r3, [r3, #2]
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	4b4b      	ldr	r3, [pc, #300]	; (800bd94 <USBD_SetConfig+0x144>)
 800bc66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bc68:	4b4a      	ldr	r3, [pc, #296]	; (800bd94 <USBD_SetConfig+0x144>)
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	2b0a      	cmp	r3, #10
 800bc6e:	d905      	bls.n	800bc7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f966 	bl	800bf44 <USBD_CtlError>
    return USBD_FAIL;
 800bc78:	2303      	movs	r3, #3
 800bc7a:	e087      	b.n	800bd8c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d002      	beq.n	800bc8c <USBD_SetConfig+0x3c>
 800bc86:	2b03      	cmp	r3, #3
 800bc88:	d025      	beq.n	800bcd6 <USBD_SetConfig+0x86>
 800bc8a:	e071      	b.n	800bd70 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800bc8c:	4b41      	ldr	r3, [pc, #260]	; (800bd94 <USBD_SetConfig+0x144>)
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d01c      	beq.n	800bcce <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800bc94:	4b3f      	ldr	r3, [pc, #252]	; (800bd94 <USBD_SetConfig+0x144>)
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	461a      	mov	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc9e:	4b3d      	ldr	r3, [pc, #244]	; (800bd94 <USBD_SetConfig+0x144>)
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	4619      	mov	r1, r3
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7ff f9a8 	bl	800affa <USBD_SetClassConfig>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d004      	beq.n	800bcbe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800bcb4:	6839      	ldr	r1, [r7, #0]
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 f944 	bl	800bf44 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800bcbc:	e065      	b.n	800bd8a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 fa0b 	bl	800c0da <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2203      	movs	r2, #3
 800bcc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800bccc:	e05d      	b.n	800bd8a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fa03 	bl	800c0da <USBD_CtlSendStatus>
    break;
 800bcd4:	e059      	b.n	800bd8a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800bcd6:	4b2f      	ldr	r3, [pc, #188]	; (800bd94 <USBD_SetConfig+0x144>)
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d112      	bne.n	800bd04 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2202      	movs	r2, #2
 800bce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800bce6:	4b2b      	ldr	r3, [pc, #172]	; (800bd94 <USBD_SetConfig+0x144>)
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	461a      	mov	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bcf0:	4b28      	ldr	r3, [pc, #160]	; (800bd94 <USBD_SetConfig+0x144>)
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7ff f99b 	bl	800b032 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 f9ec 	bl	800c0da <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800bd02:	e042      	b.n	800bd8a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800bd04:	4b23      	ldr	r3, [pc, #140]	; (800bd94 <USBD_SetConfig+0x144>)
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	461a      	mov	r2, r3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d02a      	beq.n	800bd68 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7ff f989 	bl	800b032 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800bd20:	4b1c      	ldr	r3, [pc, #112]	; (800bd94 <USBD_SetConfig+0x144>)
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	461a      	mov	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd2a:	4b1a      	ldr	r3, [pc, #104]	; (800bd94 <USBD_SetConfig+0x144>)
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	4619      	mov	r1, r3
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f7ff f962 	bl	800affa <USBD_SetClassConfig>
 800bd36:	4603      	mov	r3, r0
 800bd38:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800bd3a:	7bfb      	ldrb	r3, [r7, #15]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00f      	beq.n	800bd60 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 f8fe 	bl	800bf44 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	4619      	mov	r1, r3
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7ff f96e 	bl	800b032 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2202      	movs	r2, #2
 800bd5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800bd5e:	e014      	b.n	800bd8a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 f9ba 	bl	800c0da <USBD_CtlSendStatus>
    break;
 800bd66:	e010      	b.n	800bd8a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 f9b6 	bl	800c0da <USBD_CtlSendStatus>
    break;
 800bd6e:	e00c      	b.n	800bd8a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800bd70:	6839      	ldr	r1, [r7, #0]
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 f8e6 	bl	800bf44 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bd78:	4b06      	ldr	r3, [pc, #24]	; (800bd94 <USBD_SetConfig+0x144>)
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f7ff f957 	bl	800b032 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800bd84:	2303      	movs	r3, #3
 800bd86:	73fb      	strb	r3, [r7, #15]
    break;
 800bd88:	bf00      	nop
  }

  return ret;
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3710      	adds	r7, #16
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	2000022c 	.word	0x2000022c

0800bd98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	88db      	ldrh	r3, [r3, #6]
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d004      	beq.n	800bdb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bdaa:	6839      	ldr	r1, [r7, #0]
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 f8c9 	bl	800bf44 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800bdb2:	e021      	b.n	800bdf8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	db17      	blt.n	800bdee <USBD_GetConfig+0x56>
 800bdbe:	2b02      	cmp	r3, #2
 800bdc0:	dd02      	ble.n	800bdc8 <USBD_GetConfig+0x30>
 800bdc2:	2b03      	cmp	r3, #3
 800bdc4:	d00b      	beq.n	800bdde <USBD_GetConfig+0x46>
 800bdc6:	e012      	b.n	800bdee <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	3308      	adds	r3, #8
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 f925 	bl	800c026 <USBD_CtlSendData>
      break;
 800bddc:	e00c      	b.n	800bdf8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	3304      	adds	r3, #4
 800bde2:	2201      	movs	r2, #1
 800bde4:	4619      	mov	r1, r3
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 f91d 	bl	800c026 <USBD_CtlSendData>
      break;
 800bdec:	e004      	b.n	800bdf8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800bdee:	6839      	ldr	r1, [r7, #0]
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 f8a7 	bl	800bf44 <USBD_CtlError>
      break;
 800bdf6:	bf00      	nop
}
 800bdf8:	bf00      	nop
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be10:	3b01      	subs	r3, #1
 800be12:	2b02      	cmp	r3, #2
 800be14:	d81e      	bhi.n	800be54 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	88db      	ldrh	r3, [r3, #6]
 800be1a:	2b02      	cmp	r3, #2
 800be1c:	d004      	beq.n	800be28 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f88f 	bl	800bf44 <USBD_CtlError>
      break;
 800be26:	e01a      	b.n	800be5e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2201      	movs	r2, #1
 800be2c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800be34:	2b00      	cmp	r3, #0
 800be36:	d005      	beq.n	800be44 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	f043 0202 	orr.w	r2, r3, #2
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	330c      	adds	r3, #12
 800be48:	2202      	movs	r2, #2
 800be4a:	4619      	mov	r1, r3
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 f8ea 	bl	800c026 <USBD_CtlSendData>
    break;
 800be52:	e004      	b.n	800be5e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f874 	bl	800bf44 <USBD_CtlError>
    break;
 800be5c:	bf00      	nop
  }
}
 800be5e:	bf00      	nop
 800be60:	3708      	adds	r7, #8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b082      	sub	sp, #8
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
 800be6e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	885b      	ldrh	r3, [r3, #2]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d106      	bne.n	800be86 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2201      	movs	r2, #1
 800be7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 f92a 	bl	800c0da <USBD_CtlSendStatus>
  }
}
 800be86:	bf00      	nop
 800be88:	3708      	adds	r7, #8
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b082      	sub	sp, #8
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
 800be96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be9e:	3b01      	subs	r3, #1
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	d80b      	bhi.n	800bebc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	885b      	ldrh	r3, [r3, #2]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d10c      	bne.n	800bec6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 f910 	bl	800c0da <USBD_CtlSendStatus>
      }
      break;
 800beba:	e004      	b.n	800bec6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bebc:	6839      	ldr	r1, [r7, #0]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f840 	bl	800bf44 <USBD_CtlError>
      break;
 800bec4:	e000      	b.n	800bec8 <USBD_ClrFeature+0x3a>
      break;
 800bec6:	bf00      	nop
  }
}
 800bec8:	bf00      	nop
 800beca:	3708      	adds	r7, #8
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	781a      	ldrb	r2, [r3, #0]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	3301      	adds	r3, #1
 800beea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	781a      	ldrb	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	3301      	adds	r3, #1
 800bef8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	f7ff fad4 	bl	800b4a8 <SWAPBYTE>
 800bf00:	4603      	mov	r3, r0
 800bf02:	461a      	mov	r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	3301      	adds	r3, #1
 800bf12:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f7ff fac7 	bl	800b4a8 <SWAPBYTE>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	3301      	adds	r3, #1
 800bf26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f7ff faba 	bl	800b4a8 <SWAPBYTE>
 800bf34:	4603      	mov	r3, r0
 800bf36:	461a      	mov	r2, r3
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	80da      	strh	r2, [r3, #6]
}
 800bf3c:	bf00      	nop
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf4e:	2180      	movs	r1, #128	; 0x80
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 fd07 	bl	800c964 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bf56:	2100      	movs	r1, #0
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fd03 	bl	800c964 <USBD_LL_StallEP>
}
 800bf5e:	bf00      	nop
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b086      	sub	sp, #24
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	60f8      	str	r0, [r7, #12]
 800bf6e:	60b9      	str	r1, [r7, #8]
 800bf70:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bf72:	2300      	movs	r3, #0
 800bf74:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d036      	beq.n	800bfea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bf80:	6938      	ldr	r0, [r7, #16]
 800bf82:	f000 f836 	bl	800bff2 <USBD_GetLen>
 800bf86:	4603      	mov	r3, r0
 800bf88:	3301      	adds	r3, #1
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	005b      	lsls	r3, r3, #1
 800bf8e:	b29a      	uxth	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bf94:	7dfb      	ldrb	r3, [r7, #23]
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	4413      	add	r3, r2
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	7812      	ldrb	r2, [r2, #0]
 800bf9e:	701a      	strb	r2, [r3, #0]
  idx++;
 800bfa0:	7dfb      	ldrb	r3, [r7, #23]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bfa6:	7dfb      	ldrb	r3, [r7, #23]
 800bfa8:	68ba      	ldr	r2, [r7, #8]
 800bfaa:	4413      	add	r3, r2
 800bfac:	2203      	movs	r2, #3
 800bfae:	701a      	strb	r2, [r3, #0]
  idx++;
 800bfb0:	7dfb      	ldrb	r3, [r7, #23]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bfb6:	e013      	b.n	800bfe0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bfb8:	7dfb      	ldrb	r3, [r7, #23]
 800bfba:	68ba      	ldr	r2, [r7, #8]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	693a      	ldr	r2, [r7, #16]
 800bfc0:	7812      	ldrb	r2, [r2, #0]
 800bfc2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	613b      	str	r3, [r7, #16]
    idx++;
 800bfca:	7dfb      	ldrb	r3, [r7, #23]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bfd0:	7dfb      	ldrb	r3, [r7, #23]
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	701a      	strb	r2, [r3, #0]
    idx++;
 800bfda:	7dfb      	ldrb	r3, [r7, #23]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1e7      	bne.n	800bfb8 <USBD_GetString+0x52>
 800bfe8:	e000      	b.n	800bfec <USBD_GetString+0x86>
    return;
 800bfea:	bf00      	nop
  }
}
 800bfec:	3718      	adds	r7, #24
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bff2:	b480      	push	{r7}
 800bff4:	b085      	sub	sp, #20
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bffa:	2300      	movs	r3, #0
 800bffc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c002:	e005      	b.n	800c010 <USBD_GetLen+0x1e>
  {
    len++;
 800c004:	7bfb      	ldrb	r3, [r7, #15]
 800c006:	3301      	adds	r3, #1
 800c008:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	3301      	adds	r3, #1
 800c00e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1f5      	bne.n	800c004 <USBD_GetLen+0x12>
  }

  return len;
 800c018:	7bfb      	ldrb	r3, [r7, #15]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3714      	adds	r7, #20
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr

0800c026 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b084      	sub	sp, #16
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	60f8      	str	r0, [r7, #12]
 800c02e:	60b9      	str	r1, [r7, #8]
 800c030:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2202      	movs	r2, #2
 800c036:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	68ba      	ldr	r2, [r7, #8]
 800c04a:	2100      	movs	r1, #0
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f000 fd12 	bl	800ca76 <USBD_LL_Transmit>

  return USBD_OK;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	2100      	movs	r1, #0
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f000 fd01 	bl	800ca76 <USBD_LL_Transmit>

  return USBD_OK;
 800c074:	2300      	movs	r3, #0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c07e:	b580      	push	{r7, lr}
 800c080:	b084      	sub	sp, #16
 800c082:	af00      	add	r7, sp, #0
 800c084:	60f8      	str	r0, [r7, #12]
 800c086:	60b9      	str	r1, [r7, #8]
 800c088:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2203      	movs	r2, #3
 800c08e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	68ba      	ldr	r2, [r7, #8]
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	f000 fd05 	bl	800cab8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c0ae:	2300      	movs	r3, #0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	68ba      	ldr	r2, [r7, #8]
 800c0c8:	2100      	movs	r1, #0
 800c0ca:	68f8      	ldr	r0, [r7, #12]
 800c0cc:	f000 fcf4 	bl	800cab8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b082      	sub	sp, #8
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2204      	movs	r2, #4
 800c0e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 fcc0 	bl	800ca76 <USBD_LL_Transmit>

  return USBD_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2205      	movs	r2, #5
 800c10c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c110:	2300      	movs	r3, #0
 800c112:	2200      	movs	r2, #0
 800c114:	2100      	movs	r1, #0
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 fcce 	bl	800cab8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c11c:	2300      	movs	r3, #0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
	...

0800c128 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c12c:	2200      	movs	r2, #0
 800c12e:	4912      	ldr	r1, [pc, #72]	; (800c178 <MX_USB_DEVICE_Init+0x50>)
 800c130:	4812      	ldr	r0, [pc, #72]	; (800c17c <MX_USB_DEVICE_Init+0x54>)
 800c132:	f7fe fed9 	bl	800aee8 <USBD_Init>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d001      	beq.n	800c140 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c13c:	f7f6 fb40 	bl	80027c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c140:	490f      	ldr	r1, [pc, #60]	; (800c180 <MX_USB_DEVICE_Init+0x58>)
 800c142:	480e      	ldr	r0, [pc, #56]	; (800c17c <MX_USB_DEVICE_Init+0x54>)
 800c144:	f7fe ff14 	bl	800af70 <USBD_RegisterClass>
 800c148:	4603      	mov	r3, r0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d001      	beq.n	800c152 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c14e:	f7f6 fb37 	bl	80027c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c152:	490c      	ldr	r1, [pc, #48]	; (800c184 <MX_USB_DEVICE_Init+0x5c>)
 800c154:	4809      	ldr	r0, [pc, #36]	; (800c17c <MX_USB_DEVICE_Init+0x54>)
 800c156:	f7fe fe2b 	bl	800adb0 <USBD_CDC_RegisterInterface>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c160:	f7f6 fb2e 	bl	80027c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c164:	4805      	ldr	r0, [pc, #20]	; (800c17c <MX_USB_DEVICE_Init+0x54>)
 800c166:	f7fe ff31 	bl	800afcc <USBD_Start>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d001      	beq.n	800c174 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c170:	f7f6 fb26 	bl	80027c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c174:	bf00      	nop
 800c176:	bd80      	pop	{r7, pc}
 800c178:	2000014c 	.word	0x2000014c
 800c17c:	2000054c 	.word	0x2000054c
 800c180:	2000002c 	.word	0x2000002c
 800c184:	20000130 	.word	0x20000130

0800c188 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c18c:	2200      	movs	r2, #0
 800c18e:	4905      	ldr	r1, [pc, #20]	; (800c1a4 <CDC_Init_FS+0x1c>)
 800c190:	4805      	ldr	r0, [pc, #20]	; (800c1a8 <CDC_Init_FS+0x20>)
 800c192:	f7fe fe22 	bl	800adda <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c196:	4905      	ldr	r1, [pc, #20]	; (800c1ac <CDC_Init_FS+0x24>)
 800c198:	4803      	ldr	r0, [pc, #12]	; (800c1a8 <CDC_Init_FS+0x20>)
 800c19a:	f7fe fe37 	bl	800ae0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c19e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	20000820 	.word	0x20000820
 800c1a8:	2000054c 	.word	0x2000054c
 800c1ac:	2000081c 	.word	0x2000081c

0800c1b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c1b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	6039      	str	r1, [r7, #0]
 800c1ca:	71fb      	strb	r3, [r7, #7]
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c1d0:	79fb      	ldrb	r3, [r7, #7]
 800c1d2:	2b23      	cmp	r3, #35	; 0x23
 800c1d4:	d85c      	bhi.n	800c290 <CDC_Control_FS+0xd0>
 800c1d6:	a201      	add	r2, pc, #4	; (adr r2, 800c1dc <CDC_Control_FS+0x1c>)
 800c1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1dc:	0800c291 	.word	0x0800c291
 800c1e0:	0800c291 	.word	0x0800c291
 800c1e4:	0800c291 	.word	0x0800c291
 800c1e8:	0800c291 	.word	0x0800c291
 800c1ec:	0800c291 	.word	0x0800c291
 800c1f0:	0800c291 	.word	0x0800c291
 800c1f4:	0800c291 	.word	0x0800c291
 800c1f8:	0800c291 	.word	0x0800c291
 800c1fc:	0800c291 	.word	0x0800c291
 800c200:	0800c291 	.word	0x0800c291
 800c204:	0800c291 	.word	0x0800c291
 800c208:	0800c291 	.word	0x0800c291
 800c20c:	0800c291 	.word	0x0800c291
 800c210:	0800c291 	.word	0x0800c291
 800c214:	0800c291 	.word	0x0800c291
 800c218:	0800c291 	.word	0x0800c291
 800c21c:	0800c291 	.word	0x0800c291
 800c220:	0800c291 	.word	0x0800c291
 800c224:	0800c291 	.word	0x0800c291
 800c228:	0800c291 	.word	0x0800c291
 800c22c:	0800c291 	.word	0x0800c291
 800c230:	0800c291 	.word	0x0800c291
 800c234:	0800c291 	.word	0x0800c291
 800c238:	0800c291 	.word	0x0800c291
 800c23c:	0800c291 	.word	0x0800c291
 800c240:	0800c291 	.word	0x0800c291
 800c244:	0800c291 	.word	0x0800c291
 800c248:	0800c291 	.word	0x0800c291
 800c24c:	0800c291 	.word	0x0800c291
 800c250:	0800c291 	.word	0x0800c291
 800c254:	0800c291 	.word	0x0800c291
 800c258:	0800c291 	.word	0x0800c291
 800c25c:	0800c26d 	.word	0x0800c26d
 800c260:	0800c27f 	.word	0x0800c27f
 800c264:	0800c291 	.word	0x0800c291
 800c268:	0800c291 	.word	0x0800c291

    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
        = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };

    case CDC_SET_LINE_CODING:
  	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800c26c:	4b0c      	ldr	r3, [pc, #48]	; (800c2a0 <CDC_Control_FS+0xe0>)
 800c26e:	683a      	ldr	r2, [r7, #0]
 800c270:	6810      	ldr	r0, [r2, #0]
 800c272:	6018      	str	r0, [r3, #0]
 800c274:	8891      	ldrh	r1, [r2, #4]
 800c276:	7992      	ldrb	r2, [r2, #6]
 800c278:	8099      	strh	r1, [r3, #4]
 800c27a:	719a      	strb	r2, [r3, #6]
    break;
 800c27c:	e009      	b.n	800c292 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
  	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	4a07      	ldr	r2, [pc, #28]	; (800c2a0 <CDC_Control_FS+0xe0>)
 800c282:	6810      	ldr	r0, [r2, #0]
 800c284:	6018      	str	r0, [r3, #0]
 800c286:	8891      	ldrh	r1, [r2, #4]
 800c288:	7992      	ldrb	r2, [r2, #6]
 800c28a:	8099      	strh	r1, [r3, #4]
 800c28c:	719a      	strb	r2, [r3, #6]
    break;
 800c28e:	e000      	b.n	800c292 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c290:	bf00      	nop
  }

  return (USBD_OK);
 800c292:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c294:	4618      	mov	r0, r3
 800c296:	370c      	adds	r7, #12
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr
 800c2a0:	20000144 	.word	0x20000144

0800c2a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c2ae:	6879      	ldr	r1, [r7, #4]
 800c2b0:	4808      	ldr	r0, [pc, #32]	; (800c2d4 <CDC_Receive_FS+0x30>)
 800c2b2:	f7fe fdab 	bl	800ae0c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c2b6:	4807      	ldr	r0, [pc, #28]	; (800c2d4 <CDC_Receive_FS+0x30>)
 800c2b8:	f7fe fdec 	bl	800ae94 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf, Len[0]);
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7f5 ff38 	bl	8002138 <CDC_ReceiveCallBack>
  return (USBD_OK);
 800c2c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	2000054c 	.word	0x2000054c

0800c2d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c2e8:	4b0d      	ldr	r3, [pc, #52]	; (800c320 <CDC_Transmit_FS+0x48>)
 800c2ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d001      	beq.n	800c2fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e00b      	b.n	800c316 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c2fe:	887b      	ldrh	r3, [r7, #2]
 800c300:	461a      	mov	r2, r3
 800c302:	6879      	ldr	r1, [r7, #4]
 800c304:	4806      	ldr	r0, [pc, #24]	; (800c320 <CDC_Transmit_FS+0x48>)
 800c306:	f7fe fd68 	bl	800adda <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c30a:	4805      	ldr	r0, [pc, #20]	; (800c320 <CDC_Transmit_FS+0x48>)
 800c30c:	f7fe fd92 	bl	800ae34 <USBD_CDC_TransmitPacket>
 800c310:	4603      	mov	r3, r0
 800c312:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c314:	7bfb      	ldrb	r3, [r7, #15]
}
 800c316:	4618      	mov	r0, r3
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	2000054c 	.word	0x2000054c

0800c324 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c324:	b480      	push	{r7}
 800c326:	b087      	sub	sp, #28
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	4613      	mov	r3, r2
 800c330:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c332:	2300      	movs	r3, #0
 800c334:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c336:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	371c      	adds	r7, #28
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr
	...

0800c348 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	6039      	str	r1, [r7, #0]
 800c352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	2212      	movs	r2, #18
 800c358:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c35a:	4b03      	ldr	r3, [pc, #12]	; (800c368 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr
 800c368:	20000168 	.word	0x20000168

0800c36c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	4603      	mov	r3, r0
 800c374:	6039      	str	r1, [r7, #0]
 800c376:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	2204      	movs	r2, #4
 800c37c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c37e:	4b03      	ldr	r3, [pc, #12]	; (800c38c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c380:	4618      	mov	r0, r3
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr
 800c38c:	2000017c 	.word	0x2000017c

0800c390 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	4603      	mov	r3, r0
 800c398:	6039      	str	r1, [r7, #0]
 800c39a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c39c:	79fb      	ldrb	r3, [r7, #7]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d105      	bne.n	800c3ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c3a2:	683a      	ldr	r2, [r7, #0]
 800c3a4:	4907      	ldr	r1, [pc, #28]	; (800c3c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c3a6:	4808      	ldr	r0, [pc, #32]	; (800c3c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c3a8:	f7ff fddd 	bl	800bf66 <USBD_GetString>
 800c3ac:	e004      	b.n	800c3b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c3ae:	683a      	ldr	r2, [r7, #0]
 800c3b0:	4904      	ldr	r1, [pc, #16]	; (800c3c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c3b2:	4805      	ldr	r0, [pc, #20]	; (800c3c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c3b4:	f7ff fdd7 	bl	800bf66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3b8:	4b02      	ldr	r3, [pc, #8]	; (800c3c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3708      	adds	r7, #8
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	20000824 	.word	0x20000824
 800c3c8:	0800daa8 	.word	0x0800daa8

0800c3cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	6039      	str	r1, [r7, #0]
 800c3d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c3d8:	683a      	ldr	r2, [r7, #0]
 800c3da:	4904      	ldr	r1, [pc, #16]	; (800c3ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c3dc:	4804      	ldr	r0, [pc, #16]	; (800c3f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c3de:	f7ff fdc2 	bl	800bf66 <USBD_GetString>
  return USBD_StrDesc;
 800c3e2:	4b02      	ldr	r3, [pc, #8]	; (800c3ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3708      	adds	r7, #8
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	20000824 	.word	0x20000824
 800c3f0:	0800dac0 	.word	0x0800dac0

0800c3f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	6039      	str	r1, [r7, #0]
 800c3fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	221a      	movs	r2, #26
 800c404:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c406:	f000 f843 	bl	800c490 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c40a:	4b02      	ldr	r3, [pc, #8]	; (800c414 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3708      	adds	r7, #8
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	20000180 	.word	0x20000180

0800c418 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	4603      	mov	r3, r0
 800c420:	6039      	str	r1, [r7, #0]
 800c422:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c424:	79fb      	ldrb	r3, [r7, #7]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d105      	bne.n	800c436 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	4907      	ldr	r1, [pc, #28]	; (800c44c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c42e:	4808      	ldr	r0, [pc, #32]	; (800c450 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c430:	f7ff fd99 	bl	800bf66 <USBD_GetString>
 800c434:	e004      	b.n	800c440 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c436:	683a      	ldr	r2, [r7, #0]
 800c438:	4904      	ldr	r1, [pc, #16]	; (800c44c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c43a:	4805      	ldr	r0, [pc, #20]	; (800c450 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c43c:	f7ff fd93 	bl	800bf66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c440:	4b02      	ldr	r3, [pc, #8]	; (800c44c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c442:	4618      	mov	r0, r3
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	20000824 	.word	0x20000824
 800c450:	0800dad4 	.word	0x0800dad4

0800c454 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	4603      	mov	r3, r0
 800c45c:	6039      	str	r1, [r7, #0]
 800c45e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c460:	79fb      	ldrb	r3, [r7, #7]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d105      	bne.n	800c472 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c466:	683a      	ldr	r2, [r7, #0]
 800c468:	4907      	ldr	r1, [pc, #28]	; (800c488 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c46a:	4808      	ldr	r0, [pc, #32]	; (800c48c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c46c:	f7ff fd7b 	bl	800bf66 <USBD_GetString>
 800c470:	e004      	b.n	800c47c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c472:	683a      	ldr	r2, [r7, #0]
 800c474:	4904      	ldr	r1, [pc, #16]	; (800c488 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c476:	4805      	ldr	r0, [pc, #20]	; (800c48c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c478:	f7ff fd75 	bl	800bf66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c47c:	4b02      	ldr	r3, [pc, #8]	; (800c488 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3708      	adds	r7, #8
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	20000824 	.word	0x20000824
 800c48c:	0800dae0 	.word	0x0800dae0

0800c490 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c496:	4b0f      	ldr	r3, [pc, #60]	; (800c4d4 <Get_SerialNum+0x44>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c49c:	4b0e      	ldr	r3, [pc, #56]	; (800c4d8 <Get_SerialNum+0x48>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c4a2:	4b0e      	ldr	r3, [pc, #56]	; (800c4dc <Get_SerialNum+0x4c>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c4a8:	68fa      	ldr	r2, [r7, #12]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d009      	beq.n	800c4ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c4b6:	2208      	movs	r2, #8
 800c4b8:	4909      	ldr	r1, [pc, #36]	; (800c4e0 <Get_SerialNum+0x50>)
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f000 f814 	bl	800c4e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c4c0:	2204      	movs	r2, #4
 800c4c2:	4908      	ldr	r1, [pc, #32]	; (800c4e4 <Get_SerialNum+0x54>)
 800c4c4:	68b8      	ldr	r0, [r7, #8]
 800c4c6:	f000 f80f 	bl	800c4e8 <IntToUnicode>
  }
}
 800c4ca:	bf00      	nop
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	1fff7a10 	.word	0x1fff7a10
 800c4d8:	1fff7a14 	.word	0x1fff7a14
 800c4dc:	1fff7a18 	.word	0x1fff7a18
 800c4e0:	20000182 	.word	0x20000182
 800c4e4:	20000192 	.word	0x20000192

0800c4e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b087      	sub	sp, #28
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	75fb      	strb	r3, [r7, #23]
 800c4fe:	e027      	b.n	800c550 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	0f1b      	lsrs	r3, r3, #28
 800c504:	2b09      	cmp	r3, #9
 800c506:	d80b      	bhi.n	800c520 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	0f1b      	lsrs	r3, r3, #28
 800c50c:	b2da      	uxtb	r2, r3
 800c50e:	7dfb      	ldrb	r3, [r7, #23]
 800c510:	005b      	lsls	r3, r3, #1
 800c512:	4619      	mov	r1, r3
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	440b      	add	r3, r1
 800c518:	3230      	adds	r2, #48	; 0x30
 800c51a:	b2d2      	uxtb	r2, r2
 800c51c:	701a      	strb	r2, [r3, #0]
 800c51e:	e00a      	b.n	800c536 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	0f1b      	lsrs	r3, r3, #28
 800c524:	b2da      	uxtb	r2, r3
 800c526:	7dfb      	ldrb	r3, [r7, #23]
 800c528:	005b      	lsls	r3, r3, #1
 800c52a:	4619      	mov	r1, r3
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	440b      	add	r3, r1
 800c530:	3237      	adds	r2, #55	; 0x37
 800c532:	b2d2      	uxtb	r2, r2
 800c534:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	011b      	lsls	r3, r3, #4
 800c53a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c53c:	7dfb      	ldrb	r3, [r7, #23]
 800c53e:	005b      	lsls	r3, r3, #1
 800c540:	3301      	adds	r3, #1
 800c542:	68ba      	ldr	r2, [r7, #8]
 800c544:	4413      	add	r3, r2
 800c546:	2200      	movs	r2, #0
 800c548:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c54a:	7dfb      	ldrb	r3, [r7, #23]
 800c54c:	3301      	adds	r3, #1
 800c54e:	75fb      	strb	r3, [r7, #23]
 800c550:	7dfa      	ldrb	r2, [r7, #23]
 800c552:	79fb      	ldrb	r3, [r7, #7]
 800c554:	429a      	cmp	r2, r3
 800c556:	d3d3      	bcc.n	800c500 <IntToUnicode+0x18>
  }
}
 800c558:	bf00      	nop
 800c55a:	371c      	adds	r7, #28
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b08a      	sub	sp, #40	; 0x28
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c56c:	f107 0314 	add.w	r3, r7, #20
 800c570:	2200      	movs	r2, #0
 800c572:	601a      	str	r2, [r3, #0]
 800c574:	605a      	str	r2, [r3, #4]
 800c576:	609a      	str	r2, [r3, #8]
 800c578:	60da      	str	r2, [r3, #12]
 800c57a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c584:	d147      	bne.n	800c616 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c586:	2300      	movs	r3, #0
 800c588:	613b      	str	r3, [r7, #16]
 800c58a:	4b25      	ldr	r3, [pc, #148]	; (800c620 <HAL_PCD_MspInit+0xbc>)
 800c58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c58e:	4a24      	ldr	r2, [pc, #144]	; (800c620 <HAL_PCD_MspInit+0xbc>)
 800c590:	f043 0301 	orr.w	r3, r3, #1
 800c594:	6313      	str	r3, [r2, #48]	; 0x30
 800c596:	4b22      	ldr	r3, [pc, #136]	; (800c620 <HAL_PCD_MspInit+0xbc>)
 800c598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c59a:	f003 0301 	and.w	r3, r3, #1
 800c59e:	613b      	str	r3, [r7, #16]
 800c5a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c5a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c5b0:	f107 0314 	add.w	r3, r7, #20
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	481b      	ldr	r0, [pc, #108]	; (800c624 <HAL_PCD_MspInit+0xc0>)
 800c5b8:	f7f7 fe0a 	bl	80041d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c5bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c5c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5c2:	2302      	movs	r3, #2
 800c5c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c5ca:	2303      	movs	r3, #3
 800c5cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c5ce:	230a      	movs	r3, #10
 800c5d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c5d2:	f107 0314 	add.w	r3, r7, #20
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	4812      	ldr	r0, [pc, #72]	; (800c624 <HAL_PCD_MspInit+0xc0>)
 800c5da:	f7f7 fdf9 	bl	80041d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c5de:	4b10      	ldr	r3, [pc, #64]	; (800c620 <HAL_PCD_MspInit+0xbc>)
 800c5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5e2:	4a0f      	ldr	r2, [pc, #60]	; (800c620 <HAL_PCD_MspInit+0xbc>)
 800c5e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5e8:	6353      	str	r3, [r2, #52]	; 0x34
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	60fb      	str	r3, [r7, #12]
 800c5ee:	4b0c      	ldr	r3, [pc, #48]	; (800c620 <HAL_PCD_MspInit+0xbc>)
 800c5f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5f2:	4a0b      	ldr	r2, [pc, #44]	; (800c620 <HAL_PCD_MspInit+0xbc>)
 800c5f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c5f8:	6453      	str	r3, [r2, #68]	; 0x44
 800c5fa:	4b09      	ldr	r3, [pc, #36]	; (800c620 <HAL_PCD_MspInit+0xbc>)
 800c5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c602:	60fb      	str	r3, [r7, #12]
 800c604:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c606:	2200      	movs	r2, #0
 800c608:	2100      	movs	r1, #0
 800c60a:	2043      	movs	r0, #67	; 0x43
 800c60c:	f7f7 f891 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c610:	2043      	movs	r0, #67	; 0x43
 800c612:	f7f7 f8aa 	bl	800376a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c616:	bf00      	nop
 800c618:	3728      	adds	r7, #40	; 0x28
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	40023800 	.word	0x40023800
 800c624:	40020000 	.word	0x40020000

0800c628 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c63c:	4619      	mov	r1, r3
 800c63e:	4610      	mov	r0, r2
 800c640:	f7fe fd0f 	bl	800b062 <USBD_LL_SetupStage>
}
 800c644:	bf00      	nop
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	460b      	mov	r3, r1
 800c656:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c65e:	78fa      	ldrb	r2, [r7, #3]
 800c660:	6879      	ldr	r1, [r7, #4]
 800c662:	4613      	mov	r3, r2
 800c664:	00db      	lsls	r3, r3, #3
 800c666:	1a9b      	subs	r3, r3, r2
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	440b      	add	r3, r1
 800c66c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	78fb      	ldrb	r3, [r7, #3]
 800c674:	4619      	mov	r1, r3
 800c676:	f7fe fd47 	bl	800b108 <USBD_LL_DataOutStage>
}
 800c67a:	bf00      	nop
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b082      	sub	sp, #8
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
 800c68a:	460b      	mov	r3, r1
 800c68c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c694:	78fa      	ldrb	r2, [r7, #3]
 800c696:	6879      	ldr	r1, [r7, #4]
 800c698:	4613      	mov	r3, r2
 800c69a:	00db      	lsls	r3, r3, #3
 800c69c:	1a9b      	subs	r3, r3, r2
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	440b      	add	r3, r1
 800c6a2:	3348      	adds	r3, #72	; 0x48
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	78fb      	ldrb	r3, [r7, #3]
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	f7fe fd90 	bl	800b1ce <USBD_LL_DataInStage>
}
 800c6ae:	bf00      	nop
 800c6b0:	3708      	adds	r7, #8
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b082      	sub	sp, #8
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7fe fe94 	bl	800b3f2 <USBD_LL_SOF>
}
 800c6ca:	bf00      	nop
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b084      	sub	sp, #16
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d102      	bne.n	800c6ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	73fb      	strb	r3, [r7, #15]
 800c6ea:	e008      	b.n	800c6fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d102      	bne.n	800c6fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	73fb      	strb	r3, [r7, #15]
 800c6f8:	e001      	b.n	800c6fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c6fa:	f7f6 f861 	bl	80027c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c704:	7bfa      	ldrb	r2, [r7, #15]
 800c706:	4611      	mov	r1, r2
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fe fe37 	bl	800b37c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c714:	4618      	mov	r0, r3
 800c716:	f7fe fdf0 	bl	800b2fa <USBD_LL_Reset>
}
 800c71a:	bf00      	nop
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
	...

0800c724 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c732:	4618      	mov	r0, r3
 800c734:	f7fe fe32 	bl	800b39c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	6812      	ldr	r2, [r2, #0]
 800c746:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c74a:	f043 0301 	orr.w	r3, r3, #1
 800c74e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6a1b      	ldr	r3, [r3, #32]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d005      	beq.n	800c764 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c758:	4b04      	ldr	r3, [pc, #16]	; (800c76c <HAL_PCD_SuspendCallback+0x48>)
 800c75a:	691b      	ldr	r3, [r3, #16]
 800c75c:	4a03      	ldr	r2, [pc, #12]	; (800c76c <HAL_PCD_SuspendCallback+0x48>)
 800c75e:	f043 0306 	orr.w	r3, r3, #6
 800c762:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c764:	bf00      	nop
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	e000ed00 	.word	0xe000ed00

0800c770 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c77e:	4618      	mov	r0, r3
 800c780:	f7fe fe21 	bl	800b3c6 <USBD_LL_Resume>
}
 800c784:	bf00      	nop
 800c786:	3708      	adds	r7, #8
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	460b      	mov	r3, r1
 800c796:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c79e:	78fa      	ldrb	r2, [r7, #3]
 800c7a0:	4611      	mov	r1, r2
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fe fe4c 	bl	800b440 <USBD_LL_IsoOUTIncomplete>
}
 800c7a8:	bf00      	nop
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c7c2:	78fa      	ldrb	r2, [r7, #3]
 800c7c4:	4611      	mov	r1, r2
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7fe fe2d 	bl	800b426 <USBD_LL_IsoINIncomplete>
}
 800c7cc:	bf00      	nop
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fe fe39 	bl	800b45a <USBD_LL_DevConnected>
}
 800c7e8:	bf00      	nop
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7fe fe36 	bl	800b470 <USBD_LL_DevDisconnected>
}
 800c804:	bf00      	nop
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d13c      	bne.n	800c896 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c81c:	4a20      	ldr	r2, [pc, #128]	; (800c8a0 <USBD_LL_Init+0x94>)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4a1e      	ldr	r2, [pc, #120]	; (800c8a0 <USBD_LL_Init+0x94>)
 800c828:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c82c:	4b1c      	ldr	r3, [pc, #112]	; (800c8a0 <USBD_LL_Init+0x94>)
 800c82e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c832:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c834:	4b1a      	ldr	r3, [pc, #104]	; (800c8a0 <USBD_LL_Init+0x94>)
 800c836:	2204      	movs	r2, #4
 800c838:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c83a:	4b19      	ldr	r3, [pc, #100]	; (800c8a0 <USBD_LL_Init+0x94>)
 800c83c:	2202      	movs	r2, #2
 800c83e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c840:	4b17      	ldr	r3, [pc, #92]	; (800c8a0 <USBD_LL_Init+0x94>)
 800c842:	2200      	movs	r2, #0
 800c844:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c846:	4b16      	ldr	r3, [pc, #88]	; (800c8a0 <USBD_LL_Init+0x94>)
 800c848:	2202      	movs	r2, #2
 800c84a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c84c:	4b14      	ldr	r3, [pc, #80]	; (800c8a0 <USBD_LL_Init+0x94>)
 800c84e:	2200      	movs	r2, #0
 800c850:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c852:	4b13      	ldr	r3, [pc, #76]	; (800c8a0 <USBD_LL_Init+0x94>)
 800c854:	2200      	movs	r2, #0
 800c856:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c858:	4b11      	ldr	r3, [pc, #68]	; (800c8a0 <USBD_LL_Init+0x94>)
 800c85a:	2200      	movs	r2, #0
 800c85c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c85e:	4b10      	ldr	r3, [pc, #64]	; (800c8a0 <USBD_LL_Init+0x94>)
 800c860:	2201      	movs	r2, #1
 800c862:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c864:	4b0e      	ldr	r3, [pc, #56]	; (800c8a0 <USBD_LL_Init+0x94>)
 800c866:	2200      	movs	r2, #0
 800c868:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c86a:	480d      	ldr	r0, [pc, #52]	; (800c8a0 <USBD_LL_Init+0x94>)
 800c86c:	f7f9 fe2b 	bl	80064c6 <HAL_PCD_Init>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d001      	beq.n	800c87a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c876:	f7f5 ffa3 	bl	80027c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c87a:	2180      	movs	r1, #128	; 0x80
 800c87c:	4808      	ldr	r0, [pc, #32]	; (800c8a0 <USBD_LL_Init+0x94>)
 800c87e:	f7fa ff88 	bl	8007792 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c882:	2240      	movs	r2, #64	; 0x40
 800c884:	2100      	movs	r1, #0
 800c886:	4806      	ldr	r0, [pc, #24]	; (800c8a0 <USBD_LL_Init+0x94>)
 800c888:	f7fa ff3c 	bl	8007704 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c88c:	2280      	movs	r2, #128	; 0x80
 800c88e:	2101      	movs	r1, #1
 800c890:	4803      	ldr	r0, [pc, #12]	; (800c8a0 <USBD_LL_Init+0x94>)
 800c892:	f7fa ff37 	bl	8007704 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c896:	2300      	movs	r3, #0
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3708      	adds	r7, #8
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	20001024 	.word	0x20001024

0800c8a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7f9 ff20 	bl	8006700 <HAL_PCD_Start>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8c4:	7bfb      	ldrb	r3, [r7, #15]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f000 f92a 	bl	800cb20 <USBD_Get_USB_Status>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3710      	adds	r7, #16
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}

0800c8da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b084      	sub	sp, #16
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
 800c8e2:	4608      	mov	r0, r1
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	70fb      	strb	r3, [r7, #3]
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	70bb      	strb	r3, [r7, #2]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c902:	78bb      	ldrb	r3, [r7, #2]
 800c904:	883a      	ldrh	r2, [r7, #0]
 800c906:	78f9      	ldrb	r1, [r7, #3]
 800c908:	f7fa fb04 	bl	8006f14 <HAL_PCD_EP_Open>
 800c90c:	4603      	mov	r3, r0
 800c90e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c910:	7bfb      	ldrb	r3, [r7, #15]
 800c912:	4618      	mov	r0, r3
 800c914:	f000 f904 	bl	800cb20 <USBD_Get_USB_Status>
 800c918:	4603      	mov	r3, r0
 800c91a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c91c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c926:	b580      	push	{r7, lr}
 800c928:	b084      	sub	sp, #16
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
 800c92e:	460b      	mov	r3, r1
 800c930:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c932:	2300      	movs	r3, #0
 800c934:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c936:	2300      	movs	r3, #0
 800c938:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c940:	78fa      	ldrb	r2, [r7, #3]
 800c942:	4611      	mov	r1, r2
 800c944:	4618      	mov	r0, r3
 800c946:	f7fa fb4d 	bl	8006fe4 <HAL_PCD_EP_Close>
 800c94a:	4603      	mov	r3, r0
 800c94c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c94e:	7bfb      	ldrb	r3, [r7, #15]
 800c950:	4618      	mov	r0, r3
 800c952:	f000 f8e5 	bl	800cb20 <USBD_Get_USB_Status>
 800c956:	4603      	mov	r3, r0
 800c958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c95a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	460b      	mov	r3, r1
 800c96e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c970:	2300      	movs	r3, #0
 800c972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c974:	2300      	movs	r3, #0
 800c976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c97e:	78fa      	ldrb	r2, [r7, #3]
 800c980:	4611      	mov	r1, r2
 800c982:	4618      	mov	r0, r3
 800c984:	f7fa fc25 	bl	80071d2 <HAL_PCD_EP_SetStall>
 800c988:	4603      	mov	r3, r0
 800c98a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	4618      	mov	r0, r3
 800c990:	f000 f8c6 	bl	800cb20 <USBD_Get_USB_Status>
 800c994:	4603      	mov	r3, r0
 800c996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c998:	7bbb      	ldrb	r3, [r7, #14]
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b084      	sub	sp, #16
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c9bc:	78fa      	ldrb	r2, [r7, #3]
 800c9be:	4611      	mov	r1, r2
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7fa fc6a 	bl	800729a <HAL_PCD_EP_ClrStall>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9ca:	7bfb      	ldrb	r3, [r7, #15]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f000 f8a7 	bl	800cb20 <USBD_Get_USB_Status>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b085      	sub	sp, #20
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c9f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c9f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	da0b      	bge.n	800ca14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c9fc:	78fb      	ldrb	r3, [r7, #3]
 800c9fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca02:	68f9      	ldr	r1, [r7, #12]
 800ca04:	4613      	mov	r3, r2
 800ca06:	00db      	lsls	r3, r3, #3
 800ca08:	1a9b      	subs	r3, r3, r2
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	440b      	add	r3, r1
 800ca0e:	333e      	adds	r3, #62	; 0x3e
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	e00b      	b.n	800ca2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ca14:	78fb      	ldrb	r3, [r7, #3]
 800ca16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca1a:	68f9      	ldr	r1, [r7, #12]
 800ca1c:	4613      	mov	r3, r2
 800ca1e:	00db      	lsls	r3, r3, #3
 800ca20:	1a9b      	subs	r3, r3, r2
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	440b      	add	r3, r1
 800ca26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ca2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3714      	adds	r7, #20
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	460b      	mov	r3, r1
 800ca42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca44:	2300      	movs	r3, #0
 800ca46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca52:	78fa      	ldrb	r2, [r7, #3]
 800ca54:	4611      	mov	r1, r2
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7fa fa37 	bl	8006eca <HAL_PCD_SetAddress>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca60:	7bfb      	ldrb	r3, [r7, #15]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f000 f85c 	bl	800cb20 <USBD_Get_USB_Status>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ca76:	b580      	push	{r7, lr}
 800ca78:	b086      	sub	sp, #24
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	60f8      	str	r0, [r7, #12]
 800ca7e:	607a      	str	r2, [r7, #4]
 800ca80:	603b      	str	r3, [r7, #0]
 800ca82:	460b      	mov	r3, r1
 800ca84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca86:	2300      	movs	r3, #0
 800ca88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca94:	7af9      	ldrb	r1, [r7, #11]
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	f7fa fb50 	bl	800713e <HAL_PCD_EP_Transmit>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caa2:	7dfb      	ldrb	r3, [r7, #23]
 800caa4:	4618      	mov	r0, r3
 800caa6:	f000 f83b 	bl	800cb20 <USBD_Get_USB_Status>
 800caaa:	4603      	mov	r3, r0
 800caac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800caae:	7dbb      	ldrb	r3, [r7, #22]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3718      	adds	r7, #24
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b086      	sub	sp, #24
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	607a      	str	r2, [r7, #4]
 800cac2:	603b      	str	r3, [r7, #0]
 800cac4:	460b      	mov	r3, r1
 800cac6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cac8:	2300      	movs	r3, #0
 800caca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cacc:	2300      	movs	r3, #0
 800cace:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cad6:	7af9      	ldrb	r1, [r7, #11]
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	f7fa facc 	bl	8007078 <HAL_PCD_EP_Receive>
 800cae0:	4603      	mov	r3, r0
 800cae2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cae4:	7dfb      	ldrb	r3, [r7, #23]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 f81a 	bl	800cb20 <USBD_Get_USB_Status>
 800caec:	4603      	mov	r3, r0
 800caee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800caf0:	7dbb      	ldrb	r3, [r7, #22]
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3718      	adds	r7, #24
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b082      	sub	sp, #8
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	460b      	mov	r3, r1
 800cb04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb0c:	78fa      	ldrb	r2, [r7, #3]
 800cb0e:	4611      	mov	r1, r2
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7fa fafc 	bl	800710e <HAL_PCD_EP_GetRxCount>
 800cb16:	4603      	mov	r3, r0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3708      	adds	r7, #8
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	4603      	mov	r3, r0
 800cb28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb2e:	79fb      	ldrb	r3, [r7, #7]
 800cb30:	2b03      	cmp	r3, #3
 800cb32:	d817      	bhi.n	800cb64 <USBD_Get_USB_Status+0x44>
 800cb34:	a201      	add	r2, pc, #4	; (adr r2, 800cb3c <USBD_Get_USB_Status+0x1c>)
 800cb36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb3a:	bf00      	nop
 800cb3c:	0800cb4d 	.word	0x0800cb4d
 800cb40:	0800cb53 	.word	0x0800cb53
 800cb44:	0800cb59 	.word	0x0800cb59
 800cb48:	0800cb5f 	.word	0x0800cb5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb50:	e00b      	b.n	800cb6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb52:	2303      	movs	r3, #3
 800cb54:	73fb      	strb	r3, [r7, #15]
    break;
 800cb56:	e008      	b.n	800cb6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb5c:	e005      	b.n	800cb6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb5e:	2303      	movs	r3, #3
 800cb60:	73fb      	strb	r3, [r7, #15]
    break;
 800cb62:	e002      	b.n	800cb6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cb64:	2303      	movs	r3, #3
 800cb66:	73fb      	strb	r3, [r7, #15]
    break;
 800cb68:	bf00      	nop
  }
  return usb_status;
 800cb6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3714      	adds	r7, #20
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <__errno>:
 800cb78:	4b01      	ldr	r3, [pc, #4]	; (800cb80 <__errno+0x8>)
 800cb7a:	6818      	ldr	r0, [r3, #0]
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	2000019c 	.word	0x2000019c

0800cb84 <__libc_init_array>:
 800cb84:	b570      	push	{r4, r5, r6, lr}
 800cb86:	4e0d      	ldr	r6, [pc, #52]	; (800cbbc <__libc_init_array+0x38>)
 800cb88:	4c0d      	ldr	r4, [pc, #52]	; (800cbc0 <__libc_init_array+0x3c>)
 800cb8a:	1ba4      	subs	r4, r4, r6
 800cb8c:	10a4      	asrs	r4, r4, #2
 800cb8e:	2500      	movs	r5, #0
 800cb90:	42a5      	cmp	r5, r4
 800cb92:	d109      	bne.n	800cba8 <__libc_init_array+0x24>
 800cb94:	4e0b      	ldr	r6, [pc, #44]	; (800cbc4 <__libc_init_array+0x40>)
 800cb96:	4c0c      	ldr	r4, [pc, #48]	; (800cbc8 <__libc_init_array+0x44>)
 800cb98:	f000 ff5e 	bl	800da58 <_init>
 800cb9c:	1ba4      	subs	r4, r4, r6
 800cb9e:	10a4      	asrs	r4, r4, #2
 800cba0:	2500      	movs	r5, #0
 800cba2:	42a5      	cmp	r5, r4
 800cba4:	d105      	bne.n	800cbb2 <__libc_init_array+0x2e>
 800cba6:	bd70      	pop	{r4, r5, r6, pc}
 800cba8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cbac:	4798      	blx	r3
 800cbae:	3501      	adds	r5, #1
 800cbb0:	e7ee      	b.n	800cb90 <__libc_init_array+0xc>
 800cbb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cbb6:	4798      	blx	r3
 800cbb8:	3501      	adds	r5, #1
 800cbba:	e7f2      	b.n	800cba2 <__libc_init_array+0x1e>
 800cbbc:	0800dbb0 	.word	0x0800dbb0
 800cbc0:	0800dbb0 	.word	0x0800dbb0
 800cbc4:	0800dbb0 	.word	0x0800dbb0
 800cbc8:	0800dbb4 	.word	0x0800dbb4

0800cbcc <malloc>:
 800cbcc:	4b02      	ldr	r3, [pc, #8]	; (800cbd8 <malloc+0xc>)
 800cbce:	4601      	mov	r1, r0
 800cbd0:	6818      	ldr	r0, [r3, #0]
 800cbd2:	f000 b861 	b.w	800cc98 <_malloc_r>
 800cbd6:	bf00      	nop
 800cbd8:	2000019c 	.word	0x2000019c

0800cbdc <free>:
 800cbdc:	4b02      	ldr	r3, [pc, #8]	; (800cbe8 <free+0xc>)
 800cbde:	4601      	mov	r1, r0
 800cbe0:	6818      	ldr	r0, [r3, #0]
 800cbe2:	f000 b80b 	b.w	800cbfc <_free_r>
 800cbe6:	bf00      	nop
 800cbe8:	2000019c 	.word	0x2000019c

0800cbec <memset>:
 800cbec:	4402      	add	r2, r0
 800cbee:	4603      	mov	r3, r0
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d100      	bne.n	800cbf6 <memset+0xa>
 800cbf4:	4770      	bx	lr
 800cbf6:	f803 1b01 	strb.w	r1, [r3], #1
 800cbfa:	e7f9      	b.n	800cbf0 <memset+0x4>

0800cbfc <_free_r>:
 800cbfc:	b538      	push	{r3, r4, r5, lr}
 800cbfe:	4605      	mov	r5, r0
 800cc00:	2900      	cmp	r1, #0
 800cc02:	d045      	beq.n	800cc90 <_free_r+0x94>
 800cc04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc08:	1f0c      	subs	r4, r1, #4
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	bfb8      	it	lt
 800cc0e:	18e4      	addlt	r4, r4, r3
 800cc10:	f000 f9a2 	bl	800cf58 <__malloc_lock>
 800cc14:	4a1f      	ldr	r2, [pc, #124]	; (800cc94 <_free_r+0x98>)
 800cc16:	6813      	ldr	r3, [r2, #0]
 800cc18:	4610      	mov	r0, r2
 800cc1a:	b933      	cbnz	r3, 800cc2a <_free_r+0x2e>
 800cc1c:	6063      	str	r3, [r4, #4]
 800cc1e:	6014      	str	r4, [r2, #0]
 800cc20:	4628      	mov	r0, r5
 800cc22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc26:	f000 b998 	b.w	800cf5a <__malloc_unlock>
 800cc2a:	42a3      	cmp	r3, r4
 800cc2c:	d90c      	bls.n	800cc48 <_free_r+0x4c>
 800cc2e:	6821      	ldr	r1, [r4, #0]
 800cc30:	1862      	adds	r2, r4, r1
 800cc32:	4293      	cmp	r3, r2
 800cc34:	bf04      	itt	eq
 800cc36:	681a      	ldreq	r2, [r3, #0]
 800cc38:	685b      	ldreq	r3, [r3, #4]
 800cc3a:	6063      	str	r3, [r4, #4]
 800cc3c:	bf04      	itt	eq
 800cc3e:	1852      	addeq	r2, r2, r1
 800cc40:	6022      	streq	r2, [r4, #0]
 800cc42:	6004      	str	r4, [r0, #0]
 800cc44:	e7ec      	b.n	800cc20 <_free_r+0x24>
 800cc46:	4613      	mov	r3, r2
 800cc48:	685a      	ldr	r2, [r3, #4]
 800cc4a:	b10a      	cbz	r2, 800cc50 <_free_r+0x54>
 800cc4c:	42a2      	cmp	r2, r4
 800cc4e:	d9fa      	bls.n	800cc46 <_free_r+0x4a>
 800cc50:	6819      	ldr	r1, [r3, #0]
 800cc52:	1858      	adds	r0, r3, r1
 800cc54:	42a0      	cmp	r0, r4
 800cc56:	d10b      	bne.n	800cc70 <_free_r+0x74>
 800cc58:	6820      	ldr	r0, [r4, #0]
 800cc5a:	4401      	add	r1, r0
 800cc5c:	1858      	adds	r0, r3, r1
 800cc5e:	4282      	cmp	r2, r0
 800cc60:	6019      	str	r1, [r3, #0]
 800cc62:	d1dd      	bne.n	800cc20 <_free_r+0x24>
 800cc64:	6810      	ldr	r0, [r2, #0]
 800cc66:	6852      	ldr	r2, [r2, #4]
 800cc68:	605a      	str	r2, [r3, #4]
 800cc6a:	4401      	add	r1, r0
 800cc6c:	6019      	str	r1, [r3, #0]
 800cc6e:	e7d7      	b.n	800cc20 <_free_r+0x24>
 800cc70:	d902      	bls.n	800cc78 <_free_r+0x7c>
 800cc72:	230c      	movs	r3, #12
 800cc74:	602b      	str	r3, [r5, #0]
 800cc76:	e7d3      	b.n	800cc20 <_free_r+0x24>
 800cc78:	6820      	ldr	r0, [r4, #0]
 800cc7a:	1821      	adds	r1, r4, r0
 800cc7c:	428a      	cmp	r2, r1
 800cc7e:	bf04      	itt	eq
 800cc80:	6811      	ldreq	r1, [r2, #0]
 800cc82:	6852      	ldreq	r2, [r2, #4]
 800cc84:	6062      	str	r2, [r4, #4]
 800cc86:	bf04      	itt	eq
 800cc88:	1809      	addeq	r1, r1, r0
 800cc8a:	6021      	streq	r1, [r4, #0]
 800cc8c:	605c      	str	r4, [r3, #4]
 800cc8e:	e7c7      	b.n	800cc20 <_free_r+0x24>
 800cc90:	bd38      	pop	{r3, r4, r5, pc}
 800cc92:	bf00      	nop
 800cc94:	20000230 	.word	0x20000230

0800cc98 <_malloc_r>:
 800cc98:	b570      	push	{r4, r5, r6, lr}
 800cc9a:	1ccd      	adds	r5, r1, #3
 800cc9c:	f025 0503 	bic.w	r5, r5, #3
 800cca0:	3508      	adds	r5, #8
 800cca2:	2d0c      	cmp	r5, #12
 800cca4:	bf38      	it	cc
 800cca6:	250c      	movcc	r5, #12
 800cca8:	2d00      	cmp	r5, #0
 800ccaa:	4606      	mov	r6, r0
 800ccac:	db01      	blt.n	800ccb2 <_malloc_r+0x1a>
 800ccae:	42a9      	cmp	r1, r5
 800ccb0:	d903      	bls.n	800ccba <_malloc_r+0x22>
 800ccb2:	230c      	movs	r3, #12
 800ccb4:	6033      	str	r3, [r6, #0]
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	bd70      	pop	{r4, r5, r6, pc}
 800ccba:	f000 f94d 	bl	800cf58 <__malloc_lock>
 800ccbe:	4a21      	ldr	r2, [pc, #132]	; (800cd44 <_malloc_r+0xac>)
 800ccc0:	6814      	ldr	r4, [r2, #0]
 800ccc2:	4621      	mov	r1, r4
 800ccc4:	b991      	cbnz	r1, 800ccec <_malloc_r+0x54>
 800ccc6:	4c20      	ldr	r4, [pc, #128]	; (800cd48 <_malloc_r+0xb0>)
 800ccc8:	6823      	ldr	r3, [r4, #0]
 800ccca:	b91b      	cbnz	r3, 800ccd4 <_malloc_r+0x3c>
 800cccc:	4630      	mov	r0, r6
 800ccce:	f000 f869 	bl	800cda4 <_sbrk_r>
 800ccd2:	6020      	str	r0, [r4, #0]
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	f000 f864 	bl	800cda4 <_sbrk_r>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	d124      	bne.n	800cd2a <_malloc_r+0x92>
 800cce0:	230c      	movs	r3, #12
 800cce2:	6033      	str	r3, [r6, #0]
 800cce4:	4630      	mov	r0, r6
 800cce6:	f000 f938 	bl	800cf5a <__malloc_unlock>
 800ccea:	e7e4      	b.n	800ccb6 <_malloc_r+0x1e>
 800ccec:	680b      	ldr	r3, [r1, #0]
 800ccee:	1b5b      	subs	r3, r3, r5
 800ccf0:	d418      	bmi.n	800cd24 <_malloc_r+0x8c>
 800ccf2:	2b0b      	cmp	r3, #11
 800ccf4:	d90f      	bls.n	800cd16 <_malloc_r+0x7e>
 800ccf6:	600b      	str	r3, [r1, #0]
 800ccf8:	50cd      	str	r5, [r1, r3]
 800ccfa:	18cc      	adds	r4, r1, r3
 800ccfc:	4630      	mov	r0, r6
 800ccfe:	f000 f92c 	bl	800cf5a <__malloc_unlock>
 800cd02:	f104 000b 	add.w	r0, r4, #11
 800cd06:	1d23      	adds	r3, r4, #4
 800cd08:	f020 0007 	bic.w	r0, r0, #7
 800cd0c:	1ac3      	subs	r3, r0, r3
 800cd0e:	d0d3      	beq.n	800ccb8 <_malloc_r+0x20>
 800cd10:	425a      	negs	r2, r3
 800cd12:	50e2      	str	r2, [r4, r3]
 800cd14:	e7d0      	b.n	800ccb8 <_malloc_r+0x20>
 800cd16:	428c      	cmp	r4, r1
 800cd18:	684b      	ldr	r3, [r1, #4]
 800cd1a:	bf16      	itet	ne
 800cd1c:	6063      	strne	r3, [r4, #4]
 800cd1e:	6013      	streq	r3, [r2, #0]
 800cd20:	460c      	movne	r4, r1
 800cd22:	e7eb      	b.n	800ccfc <_malloc_r+0x64>
 800cd24:	460c      	mov	r4, r1
 800cd26:	6849      	ldr	r1, [r1, #4]
 800cd28:	e7cc      	b.n	800ccc4 <_malloc_r+0x2c>
 800cd2a:	1cc4      	adds	r4, r0, #3
 800cd2c:	f024 0403 	bic.w	r4, r4, #3
 800cd30:	42a0      	cmp	r0, r4
 800cd32:	d005      	beq.n	800cd40 <_malloc_r+0xa8>
 800cd34:	1a21      	subs	r1, r4, r0
 800cd36:	4630      	mov	r0, r6
 800cd38:	f000 f834 	bl	800cda4 <_sbrk_r>
 800cd3c:	3001      	adds	r0, #1
 800cd3e:	d0cf      	beq.n	800cce0 <_malloc_r+0x48>
 800cd40:	6025      	str	r5, [r4, #0]
 800cd42:	e7db      	b.n	800ccfc <_malloc_r+0x64>
 800cd44:	20000230 	.word	0x20000230
 800cd48:	20000234 	.word	0x20000234

0800cd4c <iprintf>:
 800cd4c:	b40f      	push	{r0, r1, r2, r3}
 800cd4e:	4b0a      	ldr	r3, [pc, #40]	; (800cd78 <iprintf+0x2c>)
 800cd50:	b513      	push	{r0, r1, r4, lr}
 800cd52:	681c      	ldr	r4, [r3, #0]
 800cd54:	b124      	cbz	r4, 800cd60 <iprintf+0x14>
 800cd56:	69a3      	ldr	r3, [r4, #24]
 800cd58:	b913      	cbnz	r3, 800cd60 <iprintf+0x14>
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f000 f872 	bl	800ce44 <__sinit>
 800cd60:	ab05      	add	r3, sp, #20
 800cd62:	9a04      	ldr	r2, [sp, #16]
 800cd64:	68a1      	ldr	r1, [r4, #8]
 800cd66:	9301      	str	r3, [sp, #4]
 800cd68:	4620      	mov	r0, r4
 800cd6a:	f000 f921 	bl	800cfb0 <_vfiprintf_r>
 800cd6e:	b002      	add	sp, #8
 800cd70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd74:	b004      	add	sp, #16
 800cd76:	4770      	bx	lr
 800cd78:	2000019c 	.word	0x2000019c

0800cd7c <putchar>:
 800cd7c:	b538      	push	{r3, r4, r5, lr}
 800cd7e:	4b08      	ldr	r3, [pc, #32]	; (800cda0 <putchar+0x24>)
 800cd80:	681c      	ldr	r4, [r3, #0]
 800cd82:	4605      	mov	r5, r0
 800cd84:	b124      	cbz	r4, 800cd90 <putchar+0x14>
 800cd86:	69a3      	ldr	r3, [r4, #24]
 800cd88:	b913      	cbnz	r3, 800cd90 <putchar+0x14>
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	f000 f85a 	bl	800ce44 <__sinit>
 800cd90:	68a2      	ldr	r2, [r4, #8]
 800cd92:	4629      	mov	r1, r5
 800cd94:	4620      	mov	r0, r4
 800cd96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd9a:	f000 bba7 	b.w	800d4ec <_putc_r>
 800cd9e:	bf00      	nop
 800cda0:	2000019c 	.word	0x2000019c

0800cda4 <_sbrk_r>:
 800cda4:	b538      	push	{r3, r4, r5, lr}
 800cda6:	4c06      	ldr	r4, [pc, #24]	; (800cdc0 <_sbrk_r+0x1c>)
 800cda8:	2300      	movs	r3, #0
 800cdaa:	4605      	mov	r5, r0
 800cdac:	4608      	mov	r0, r1
 800cdae:	6023      	str	r3, [r4, #0]
 800cdb0:	f7f5 ffee 	bl	8002d90 <_sbrk>
 800cdb4:	1c43      	adds	r3, r0, #1
 800cdb6:	d102      	bne.n	800cdbe <_sbrk_r+0x1a>
 800cdb8:	6823      	ldr	r3, [r4, #0]
 800cdba:	b103      	cbz	r3, 800cdbe <_sbrk_r+0x1a>
 800cdbc:	602b      	str	r3, [r5, #0]
 800cdbe:	bd38      	pop	{r3, r4, r5, pc}
 800cdc0:	2000142c 	.word	0x2000142c

0800cdc4 <std>:
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	b510      	push	{r4, lr}
 800cdc8:	4604      	mov	r4, r0
 800cdca:	e9c0 3300 	strd	r3, r3, [r0]
 800cdce:	6083      	str	r3, [r0, #8]
 800cdd0:	8181      	strh	r1, [r0, #12]
 800cdd2:	6643      	str	r3, [r0, #100]	; 0x64
 800cdd4:	81c2      	strh	r2, [r0, #14]
 800cdd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdda:	6183      	str	r3, [r0, #24]
 800cddc:	4619      	mov	r1, r3
 800cdde:	2208      	movs	r2, #8
 800cde0:	305c      	adds	r0, #92	; 0x5c
 800cde2:	f7ff ff03 	bl	800cbec <memset>
 800cde6:	4b05      	ldr	r3, [pc, #20]	; (800cdfc <std+0x38>)
 800cde8:	6263      	str	r3, [r4, #36]	; 0x24
 800cdea:	4b05      	ldr	r3, [pc, #20]	; (800ce00 <std+0x3c>)
 800cdec:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdee:	4b05      	ldr	r3, [pc, #20]	; (800ce04 <std+0x40>)
 800cdf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cdf2:	4b05      	ldr	r3, [pc, #20]	; (800ce08 <std+0x44>)
 800cdf4:	6224      	str	r4, [r4, #32]
 800cdf6:	6323      	str	r3, [r4, #48]	; 0x30
 800cdf8:	bd10      	pop	{r4, pc}
 800cdfa:	bf00      	nop
 800cdfc:	0800d559 	.word	0x0800d559
 800ce00:	0800d57b 	.word	0x0800d57b
 800ce04:	0800d5b3 	.word	0x0800d5b3
 800ce08:	0800d5d7 	.word	0x0800d5d7

0800ce0c <_cleanup_r>:
 800ce0c:	4901      	ldr	r1, [pc, #4]	; (800ce14 <_cleanup_r+0x8>)
 800ce0e:	f000 b885 	b.w	800cf1c <_fwalk_reent>
 800ce12:	bf00      	nop
 800ce14:	0800d8b1 	.word	0x0800d8b1

0800ce18 <__sfmoreglue>:
 800ce18:	b570      	push	{r4, r5, r6, lr}
 800ce1a:	1e4a      	subs	r2, r1, #1
 800ce1c:	2568      	movs	r5, #104	; 0x68
 800ce1e:	4355      	muls	r5, r2
 800ce20:	460e      	mov	r6, r1
 800ce22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce26:	f7ff ff37 	bl	800cc98 <_malloc_r>
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	b140      	cbz	r0, 800ce40 <__sfmoreglue+0x28>
 800ce2e:	2100      	movs	r1, #0
 800ce30:	e9c0 1600 	strd	r1, r6, [r0]
 800ce34:	300c      	adds	r0, #12
 800ce36:	60a0      	str	r0, [r4, #8]
 800ce38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce3c:	f7ff fed6 	bl	800cbec <memset>
 800ce40:	4620      	mov	r0, r4
 800ce42:	bd70      	pop	{r4, r5, r6, pc}

0800ce44 <__sinit>:
 800ce44:	6983      	ldr	r3, [r0, #24]
 800ce46:	b510      	push	{r4, lr}
 800ce48:	4604      	mov	r4, r0
 800ce4a:	bb33      	cbnz	r3, 800ce9a <__sinit+0x56>
 800ce4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ce50:	6503      	str	r3, [r0, #80]	; 0x50
 800ce52:	4b12      	ldr	r3, [pc, #72]	; (800ce9c <__sinit+0x58>)
 800ce54:	4a12      	ldr	r2, [pc, #72]	; (800cea0 <__sinit+0x5c>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	6282      	str	r2, [r0, #40]	; 0x28
 800ce5a:	4298      	cmp	r0, r3
 800ce5c:	bf04      	itt	eq
 800ce5e:	2301      	moveq	r3, #1
 800ce60:	6183      	streq	r3, [r0, #24]
 800ce62:	f000 f81f 	bl	800cea4 <__sfp>
 800ce66:	6060      	str	r0, [r4, #4]
 800ce68:	4620      	mov	r0, r4
 800ce6a:	f000 f81b 	bl	800cea4 <__sfp>
 800ce6e:	60a0      	str	r0, [r4, #8]
 800ce70:	4620      	mov	r0, r4
 800ce72:	f000 f817 	bl	800cea4 <__sfp>
 800ce76:	2200      	movs	r2, #0
 800ce78:	60e0      	str	r0, [r4, #12]
 800ce7a:	2104      	movs	r1, #4
 800ce7c:	6860      	ldr	r0, [r4, #4]
 800ce7e:	f7ff ffa1 	bl	800cdc4 <std>
 800ce82:	2201      	movs	r2, #1
 800ce84:	2109      	movs	r1, #9
 800ce86:	68a0      	ldr	r0, [r4, #8]
 800ce88:	f7ff ff9c 	bl	800cdc4 <std>
 800ce8c:	2202      	movs	r2, #2
 800ce8e:	2112      	movs	r1, #18
 800ce90:	68e0      	ldr	r0, [r4, #12]
 800ce92:	f7ff ff97 	bl	800cdc4 <std>
 800ce96:	2301      	movs	r3, #1
 800ce98:	61a3      	str	r3, [r4, #24]
 800ce9a:	bd10      	pop	{r4, pc}
 800ce9c:	0800db10 	.word	0x0800db10
 800cea0:	0800ce0d 	.word	0x0800ce0d

0800cea4 <__sfp>:
 800cea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea6:	4b1b      	ldr	r3, [pc, #108]	; (800cf14 <__sfp+0x70>)
 800cea8:	681e      	ldr	r6, [r3, #0]
 800ceaa:	69b3      	ldr	r3, [r6, #24]
 800ceac:	4607      	mov	r7, r0
 800ceae:	b913      	cbnz	r3, 800ceb6 <__sfp+0x12>
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	f7ff ffc7 	bl	800ce44 <__sinit>
 800ceb6:	3648      	adds	r6, #72	; 0x48
 800ceb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cebc:	3b01      	subs	r3, #1
 800cebe:	d503      	bpl.n	800cec8 <__sfp+0x24>
 800cec0:	6833      	ldr	r3, [r6, #0]
 800cec2:	b133      	cbz	r3, 800ced2 <__sfp+0x2e>
 800cec4:	6836      	ldr	r6, [r6, #0]
 800cec6:	e7f7      	b.n	800ceb8 <__sfp+0x14>
 800cec8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cecc:	b16d      	cbz	r5, 800ceea <__sfp+0x46>
 800cece:	3468      	adds	r4, #104	; 0x68
 800ced0:	e7f4      	b.n	800cebc <__sfp+0x18>
 800ced2:	2104      	movs	r1, #4
 800ced4:	4638      	mov	r0, r7
 800ced6:	f7ff ff9f 	bl	800ce18 <__sfmoreglue>
 800ceda:	6030      	str	r0, [r6, #0]
 800cedc:	2800      	cmp	r0, #0
 800cede:	d1f1      	bne.n	800cec4 <__sfp+0x20>
 800cee0:	230c      	movs	r3, #12
 800cee2:	603b      	str	r3, [r7, #0]
 800cee4:	4604      	mov	r4, r0
 800cee6:	4620      	mov	r0, r4
 800cee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceea:	4b0b      	ldr	r3, [pc, #44]	; (800cf18 <__sfp+0x74>)
 800ceec:	6665      	str	r5, [r4, #100]	; 0x64
 800ceee:	e9c4 5500 	strd	r5, r5, [r4]
 800cef2:	60a5      	str	r5, [r4, #8]
 800cef4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cef8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cefc:	2208      	movs	r2, #8
 800cefe:	4629      	mov	r1, r5
 800cf00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf04:	f7ff fe72 	bl	800cbec <memset>
 800cf08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf10:	e7e9      	b.n	800cee6 <__sfp+0x42>
 800cf12:	bf00      	nop
 800cf14:	0800db10 	.word	0x0800db10
 800cf18:	ffff0001 	.word	0xffff0001

0800cf1c <_fwalk_reent>:
 800cf1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf20:	4680      	mov	r8, r0
 800cf22:	4689      	mov	r9, r1
 800cf24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf28:	2600      	movs	r6, #0
 800cf2a:	b914      	cbnz	r4, 800cf32 <_fwalk_reent+0x16>
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf32:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cf36:	3f01      	subs	r7, #1
 800cf38:	d501      	bpl.n	800cf3e <_fwalk_reent+0x22>
 800cf3a:	6824      	ldr	r4, [r4, #0]
 800cf3c:	e7f5      	b.n	800cf2a <_fwalk_reent+0xe>
 800cf3e:	89ab      	ldrh	r3, [r5, #12]
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d907      	bls.n	800cf54 <_fwalk_reent+0x38>
 800cf44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf48:	3301      	adds	r3, #1
 800cf4a:	d003      	beq.n	800cf54 <_fwalk_reent+0x38>
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	4640      	mov	r0, r8
 800cf50:	47c8      	blx	r9
 800cf52:	4306      	orrs	r6, r0
 800cf54:	3568      	adds	r5, #104	; 0x68
 800cf56:	e7ee      	b.n	800cf36 <_fwalk_reent+0x1a>

0800cf58 <__malloc_lock>:
 800cf58:	4770      	bx	lr

0800cf5a <__malloc_unlock>:
 800cf5a:	4770      	bx	lr

0800cf5c <__sfputc_r>:
 800cf5c:	6893      	ldr	r3, [r2, #8]
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	b410      	push	{r4}
 800cf64:	6093      	str	r3, [r2, #8]
 800cf66:	da08      	bge.n	800cf7a <__sfputc_r+0x1e>
 800cf68:	6994      	ldr	r4, [r2, #24]
 800cf6a:	42a3      	cmp	r3, r4
 800cf6c:	db01      	blt.n	800cf72 <__sfputc_r+0x16>
 800cf6e:	290a      	cmp	r1, #10
 800cf70:	d103      	bne.n	800cf7a <__sfputc_r+0x1e>
 800cf72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf76:	f000 bb33 	b.w	800d5e0 <__swbuf_r>
 800cf7a:	6813      	ldr	r3, [r2, #0]
 800cf7c:	1c58      	adds	r0, r3, #1
 800cf7e:	6010      	str	r0, [r2, #0]
 800cf80:	7019      	strb	r1, [r3, #0]
 800cf82:	4608      	mov	r0, r1
 800cf84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf88:	4770      	bx	lr

0800cf8a <__sfputs_r>:
 800cf8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf8c:	4606      	mov	r6, r0
 800cf8e:	460f      	mov	r7, r1
 800cf90:	4614      	mov	r4, r2
 800cf92:	18d5      	adds	r5, r2, r3
 800cf94:	42ac      	cmp	r4, r5
 800cf96:	d101      	bne.n	800cf9c <__sfputs_r+0x12>
 800cf98:	2000      	movs	r0, #0
 800cf9a:	e007      	b.n	800cfac <__sfputs_r+0x22>
 800cf9c:	463a      	mov	r2, r7
 800cf9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	f7ff ffda 	bl	800cf5c <__sfputc_r>
 800cfa8:	1c43      	adds	r3, r0, #1
 800cfaa:	d1f3      	bne.n	800cf94 <__sfputs_r+0xa>
 800cfac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfb0 <_vfiprintf_r>:
 800cfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb4:	460c      	mov	r4, r1
 800cfb6:	b09d      	sub	sp, #116	; 0x74
 800cfb8:	4617      	mov	r7, r2
 800cfba:	461d      	mov	r5, r3
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	b118      	cbz	r0, 800cfc8 <_vfiprintf_r+0x18>
 800cfc0:	6983      	ldr	r3, [r0, #24]
 800cfc2:	b90b      	cbnz	r3, 800cfc8 <_vfiprintf_r+0x18>
 800cfc4:	f7ff ff3e 	bl	800ce44 <__sinit>
 800cfc8:	4b7c      	ldr	r3, [pc, #496]	; (800d1bc <_vfiprintf_r+0x20c>)
 800cfca:	429c      	cmp	r4, r3
 800cfcc:	d158      	bne.n	800d080 <_vfiprintf_r+0xd0>
 800cfce:	6874      	ldr	r4, [r6, #4]
 800cfd0:	89a3      	ldrh	r3, [r4, #12]
 800cfd2:	0718      	lsls	r0, r3, #28
 800cfd4:	d55e      	bpl.n	800d094 <_vfiprintf_r+0xe4>
 800cfd6:	6923      	ldr	r3, [r4, #16]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d05b      	beq.n	800d094 <_vfiprintf_r+0xe4>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	9309      	str	r3, [sp, #36]	; 0x24
 800cfe0:	2320      	movs	r3, #32
 800cfe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfe6:	2330      	movs	r3, #48	; 0x30
 800cfe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfec:	9503      	str	r5, [sp, #12]
 800cfee:	f04f 0b01 	mov.w	fp, #1
 800cff2:	46b8      	mov	r8, r7
 800cff4:	4645      	mov	r5, r8
 800cff6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cffa:	b10b      	cbz	r3, 800d000 <_vfiprintf_r+0x50>
 800cffc:	2b25      	cmp	r3, #37	; 0x25
 800cffe:	d154      	bne.n	800d0aa <_vfiprintf_r+0xfa>
 800d000:	ebb8 0a07 	subs.w	sl, r8, r7
 800d004:	d00b      	beq.n	800d01e <_vfiprintf_r+0x6e>
 800d006:	4653      	mov	r3, sl
 800d008:	463a      	mov	r2, r7
 800d00a:	4621      	mov	r1, r4
 800d00c:	4630      	mov	r0, r6
 800d00e:	f7ff ffbc 	bl	800cf8a <__sfputs_r>
 800d012:	3001      	adds	r0, #1
 800d014:	f000 80c2 	beq.w	800d19c <_vfiprintf_r+0x1ec>
 800d018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d01a:	4453      	add	r3, sl
 800d01c:	9309      	str	r3, [sp, #36]	; 0x24
 800d01e:	f898 3000 	ldrb.w	r3, [r8]
 800d022:	2b00      	cmp	r3, #0
 800d024:	f000 80ba 	beq.w	800d19c <_vfiprintf_r+0x1ec>
 800d028:	2300      	movs	r3, #0
 800d02a:	f04f 32ff 	mov.w	r2, #4294967295
 800d02e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d032:	9304      	str	r3, [sp, #16]
 800d034:	9307      	str	r3, [sp, #28]
 800d036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d03a:	931a      	str	r3, [sp, #104]	; 0x68
 800d03c:	46a8      	mov	r8, r5
 800d03e:	2205      	movs	r2, #5
 800d040:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d044:	485e      	ldr	r0, [pc, #376]	; (800d1c0 <_vfiprintf_r+0x210>)
 800d046:	f7f3 f8c3 	bl	80001d0 <memchr>
 800d04a:	9b04      	ldr	r3, [sp, #16]
 800d04c:	bb78      	cbnz	r0, 800d0ae <_vfiprintf_r+0xfe>
 800d04e:	06d9      	lsls	r1, r3, #27
 800d050:	bf44      	itt	mi
 800d052:	2220      	movmi	r2, #32
 800d054:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d058:	071a      	lsls	r2, r3, #28
 800d05a:	bf44      	itt	mi
 800d05c:	222b      	movmi	r2, #43	; 0x2b
 800d05e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d062:	782a      	ldrb	r2, [r5, #0]
 800d064:	2a2a      	cmp	r2, #42	; 0x2a
 800d066:	d02a      	beq.n	800d0be <_vfiprintf_r+0x10e>
 800d068:	9a07      	ldr	r2, [sp, #28]
 800d06a:	46a8      	mov	r8, r5
 800d06c:	2000      	movs	r0, #0
 800d06e:	250a      	movs	r5, #10
 800d070:	4641      	mov	r1, r8
 800d072:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d076:	3b30      	subs	r3, #48	; 0x30
 800d078:	2b09      	cmp	r3, #9
 800d07a:	d969      	bls.n	800d150 <_vfiprintf_r+0x1a0>
 800d07c:	b360      	cbz	r0, 800d0d8 <_vfiprintf_r+0x128>
 800d07e:	e024      	b.n	800d0ca <_vfiprintf_r+0x11a>
 800d080:	4b50      	ldr	r3, [pc, #320]	; (800d1c4 <_vfiprintf_r+0x214>)
 800d082:	429c      	cmp	r4, r3
 800d084:	d101      	bne.n	800d08a <_vfiprintf_r+0xda>
 800d086:	68b4      	ldr	r4, [r6, #8]
 800d088:	e7a2      	b.n	800cfd0 <_vfiprintf_r+0x20>
 800d08a:	4b4f      	ldr	r3, [pc, #316]	; (800d1c8 <_vfiprintf_r+0x218>)
 800d08c:	429c      	cmp	r4, r3
 800d08e:	bf08      	it	eq
 800d090:	68f4      	ldreq	r4, [r6, #12]
 800d092:	e79d      	b.n	800cfd0 <_vfiprintf_r+0x20>
 800d094:	4621      	mov	r1, r4
 800d096:	4630      	mov	r0, r6
 800d098:	f000 fb06 	bl	800d6a8 <__swsetup_r>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d09d      	beq.n	800cfdc <_vfiprintf_r+0x2c>
 800d0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a4:	b01d      	add	sp, #116	; 0x74
 800d0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0aa:	46a8      	mov	r8, r5
 800d0ac:	e7a2      	b.n	800cff4 <_vfiprintf_r+0x44>
 800d0ae:	4a44      	ldr	r2, [pc, #272]	; (800d1c0 <_vfiprintf_r+0x210>)
 800d0b0:	1a80      	subs	r0, r0, r2
 800d0b2:	fa0b f000 	lsl.w	r0, fp, r0
 800d0b6:	4318      	orrs	r0, r3
 800d0b8:	9004      	str	r0, [sp, #16]
 800d0ba:	4645      	mov	r5, r8
 800d0bc:	e7be      	b.n	800d03c <_vfiprintf_r+0x8c>
 800d0be:	9a03      	ldr	r2, [sp, #12]
 800d0c0:	1d11      	adds	r1, r2, #4
 800d0c2:	6812      	ldr	r2, [r2, #0]
 800d0c4:	9103      	str	r1, [sp, #12]
 800d0c6:	2a00      	cmp	r2, #0
 800d0c8:	db01      	blt.n	800d0ce <_vfiprintf_r+0x11e>
 800d0ca:	9207      	str	r2, [sp, #28]
 800d0cc:	e004      	b.n	800d0d8 <_vfiprintf_r+0x128>
 800d0ce:	4252      	negs	r2, r2
 800d0d0:	f043 0302 	orr.w	r3, r3, #2
 800d0d4:	9207      	str	r2, [sp, #28]
 800d0d6:	9304      	str	r3, [sp, #16]
 800d0d8:	f898 3000 	ldrb.w	r3, [r8]
 800d0dc:	2b2e      	cmp	r3, #46	; 0x2e
 800d0de:	d10e      	bne.n	800d0fe <_vfiprintf_r+0x14e>
 800d0e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d0e4:	2b2a      	cmp	r3, #42	; 0x2a
 800d0e6:	d138      	bne.n	800d15a <_vfiprintf_r+0x1aa>
 800d0e8:	9b03      	ldr	r3, [sp, #12]
 800d0ea:	1d1a      	adds	r2, r3, #4
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	9203      	str	r2, [sp, #12]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	bfb8      	it	lt
 800d0f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0f8:	f108 0802 	add.w	r8, r8, #2
 800d0fc:	9305      	str	r3, [sp, #20]
 800d0fe:	4d33      	ldr	r5, [pc, #204]	; (800d1cc <_vfiprintf_r+0x21c>)
 800d100:	f898 1000 	ldrb.w	r1, [r8]
 800d104:	2203      	movs	r2, #3
 800d106:	4628      	mov	r0, r5
 800d108:	f7f3 f862 	bl	80001d0 <memchr>
 800d10c:	b140      	cbz	r0, 800d120 <_vfiprintf_r+0x170>
 800d10e:	2340      	movs	r3, #64	; 0x40
 800d110:	1b40      	subs	r0, r0, r5
 800d112:	fa03 f000 	lsl.w	r0, r3, r0
 800d116:	9b04      	ldr	r3, [sp, #16]
 800d118:	4303      	orrs	r3, r0
 800d11a:	f108 0801 	add.w	r8, r8, #1
 800d11e:	9304      	str	r3, [sp, #16]
 800d120:	f898 1000 	ldrb.w	r1, [r8]
 800d124:	482a      	ldr	r0, [pc, #168]	; (800d1d0 <_vfiprintf_r+0x220>)
 800d126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d12a:	2206      	movs	r2, #6
 800d12c:	f108 0701 	add.w	r7, r8, #1
 800d130:	f7f3 f84e 	bl	80001d0 <memchr>
 800d134:	2800      	cmp	r0, #0
 800d136:	d037      	beq.n	800d1a8 <_vfiprintf_r+0x1f8>
 800d138:	4b26      	ldr	r3, [pc, #152]	; (800d1d4 <_vfiprintf_r+0x224>)
 800d13a:	bb1b      	cbnz	r3, 800d184 <_vfiprintf_r+0x1d4>
 800d13c:	9b03      	ldr	r3, [sp, #12]
 800d13e:	3307      	adds	r3, #7
 800d140:	f023 0307 	bic.w	r3, r3, #7
 800d144:	3308      	adds	r3, #8
 800d146:	9303      	str	r3, [sp, #12]
 800d148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d14a:	444b      	add	r3, r9
 800d14c:	9309      	str	r3, [sp, #36]	; 0x24
 800d14e:	e750      	b.n	800cff2 <_vfiprintf_r+0x42>
 800d150:	fb05 3202 	mla	r2, r5, r2, r3
 800d154:	2001      	movs	r0, #1
 800d156:	4688      	mov	r8, r1
 800d158:	e78a      	b.n	800d070 <_vfiprintf_r+0xc0>
 800d15a:	2300      	movs	r3, #0
 800d15c:	f108 0801 	add.w	r8, r8, #1
 800d160:	9305      	str	r3, [sp, #20]
 800d162:	4619      	mov	r1, r3
 800d164:	250a      	movs	r5, #10
 800d166:	4640      	mov	r0, r8
 800d168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d16c:	3a30      	subs	r2, #48	; 0x30
 800d16e:	2a09      	cmp	r2, #9
 800d170:	d903      	bls.n	800d17a <_vfiprintf_r+0x1ca>
 800d172:	2b00      	cmp	r3, #0
 800d174:	d0c3      	beq.n	800d0fe <_vfiprintf_r+0x14e>
 800d176:	9105      	str	r1, [sp, #20]
 800d178:	e7c1      	b.n	800d0fe <_vfiprintf_r+0x14e>
 800d17a:	fb05 2101 	mla	r1, r5, r1, r2
 800d17e:	2301      	movs	r3, #1
 800d180:	4680      	mov	r8, r0
 800d182:	e7f0      	b.n	800d166 <_vfiprintf_r+0x1b6>
 800d184:	ab03      	add	r3, sp, #12
 800d186:	9300      	str	r3, [sp, #0]
 800d188:	4622      	mov	r2, r4
 800d18a:	4b13      	ldr	r3, [pc, #76]	; (800d1d8 <_vfiprintf_r+0x228>)
 800d18c:	a904      	add	r1, sp, #16
 800d18e:	4630      	mov	r0, r6
 800d190:	f3af 8000 	nop.w
 800d194:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d198:	4681      	mov	r9, r0
 800d19a:	d1d5      	bne.n	800d148 <_vfiprintf_r+0x198>
 800d19c:	89a3      	ldrh	r3, [r4, #12]
 800d19e:	065b      	lsls	r3, r3, #25
 800d1a0:	f53f af7e 	bmi.w	800d0a0 <_vfiprintf_r+0xf0>
 800d1a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1a6:	e77d      	b.n	800d0a4 <_vfiprintf_r+0xf4>
 800d1a8:	ab03      	add	r3, sp, #12
 800d1aa:	9300      	str	r3, [sp, #0]
 800d1ac:	4622      	mov	r2, r4
 800d1ae:	4b0a      	ldr	r3, [pc, #40]	; (800d1d8 <_vfiprintf_r+0x228>)
 800d1b0:	a904      	add	r1, sp, #16
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f000 f888 	bl	800d2c8 <_printf_i>
 800d1b8:	e7ec      	b.n	800d194 <_vfiprintf_r+0x1e4>
 800d1ba:	bf00      	nop
 800d1bc:	0800db34 	.word	0x0800db34
 800d1c0:	0800db74 	.word	0x0800db74
 800d1c4:	0800db54 	.word	0x0800db54
 800d1c8:	0800db14 	.word	0x0800db14
 800d1cc:	0800db7a 	.word	0x0800db7a
 800d1d0:	0800db7e 	.word	0x0800db7e
 800d1d4:	00000000 	.word	0x00000000
 800d1d8:	0800cf8b 	.word	0x0800cf8b

0800d1dc <_printf_common>:
 800d1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1e0:	4691      	mov	r9, r2
 800d1e2:	461f      	mov	r7, r3
 800d1e4:	688a      	ldr	r2, [r1, #8]
 800d1e6:	690b      	ldr	r3, [r1, #16]
 800d1e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	bfb8      	it	lt
 800d1f0:	4613      	movlt	r3, r2
 800d1f2:	f8c9 3000 	str.w	r3, [r9]
 800d1f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1fa:	4606      	mov	r6, r0
 800d1fc:	460c      	mov	r4, r1
 800d1fe:	b112      	cbz	r2, 800d206 <_printf_common+0x2a>
 800d200:	3301      	adds	r3, #1
 800d202:	f8c9 3000 	str.w	r3, [r9]
 800d206:	6823      	ldr	r3, [r4, #0]
 800d208:	0699      	lsls	r1, r3, #26
 800d20a:	bf42      	ittt	mi
 800d20c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d210:	3302      	addmi	r3, #2
 800d212:	f8c9 3000 	strmi.w	r3, [r9]
 800d216:	6825      	ldr	r5, [r4, #0]
 800d218:	f015 0506 	ands.w	r5, r5, #6
 800d21c:	d107      	bne.n	800d22e <_printf_common+0x52>
 800d21e:	f104 0a19 	add.w	sl, r4, #25
 800d222:	68e3      	ldr	r3, [r4, #12]
 800d224:	f8d9 2000 	ldr.w	r2, [r9]
 800d228:	1a9b      	subs	r3, r3, r2
 800d22a:	42ab      	cmp	r3, r5
 800d22c:	dc28      	bgt.n	800d280 <_printf_common+0xa4>
 800d22e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d232:	6822      	ldr	r2, [r4, #0]
 800d234:	3300      	adds	r3, #0
 800d236:	bf18      	it	ne
 800d238:	2301      	movne	r3, #1
 800d23a:	0692      	lsls	r2, r2, #26
 800d23c:	d42d      	bmi.n	800d29a <_printf_common+0xbe>
 800d23e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d242:	4639      	mov	r1, r7
 800d244:	4630      	mov	r0, r6
 800d246:	47c0      	blx	r8
 800d248:	3001      	adds	r0, #1
 800d24a:	d020      	beq.n	800d28e <_printf_common+0xb2>
 800d24c:	6823      	ldr	r3, [r4, #0]
 800d24e:	68e5      	ldr	r5, [r4, #12]
 800d250:	f8d9 2000 	ldr.w	r2, [r9]
 800d254:	f003 0306 	and.w	r3, r3, #6
 800d258:	2b04      	cmp	r3, #4
 800d25a:	bf08      	it	eq
 800d25c:	1aad      	subeq	r5, r5, r2
 800d25e:	68a3      	ldr	r3, [r4, #8]
 800d260:	6922      	ldr	r2, [r4, #16]
 800d262:	bf0c      	ite	eq
 800d264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d268:	2500      	movne	r5, #0
 800d26a:	4293      	cmp	r3, r2
 800d26c:	bfc4      	itt	gt
 800d26e:	1a9b      	subgt	r3, r3, r2
 800d270:	18ed      	addgt	r5, r5, r3
 800d272:	f04f 0900 	mov.w	r9, #0
 800d276:	341a      	adds	r4, #26
 800d278:	454d      	cmp	r5, r9
 800d27a:	d11a      	bne.n	800d2b2 <_printf_common+0xd6>
 800d27c:	2000      	movs	r0, #0
 800d27e:	e008      	b.n	800d292 <_printf_common+0xb6>
 800d280:	2301      	movs	r3, #1
 800d282:	4652      	mov	r2, sl
 800d284:	4639      	mov	r1, r7
 800d286:	4630      	mov	r0, r6
 800d288:	47c0      	blx	r8
 800d28a:	3001      	adds	r0, #1
 800d28c:	d103      	bne.n	800d296 <_printf_common+0xba>
 800d28e:	f04f 30ff 	mov.w	r0, #4294967295
 800d292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d296:	3501      	adds	r5, #1
 800d298:	e7c3      	b.n	800d222 <_printf_common+0x46>
 800d29a:	18e1      	adds	r1, r4, r3
 800d29c:	1c5a      	adds	r2, r3, #1
 800d29e:	2030      	movs	r0, #48	; 0x30
 800d2a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2a4:	4422      	add	r2, r4
 800d2a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2ae:	3302      	adds	r3, #2
 800d2b0:	e7c5      	b.n	800d23e <_printf_common+0x62>
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	4622      	mov	r2, r4
 800d2b6:	4639      	mov	r1, r7
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	47c0      	blx	r8
 800d2bc:	3001      	adds	r0, #1
 800d2be:	d0e6      	beq.n	800d28e <_printf_common+0xb2>
 800d2c0:	f109 0901 	add.w	r9, r9, #1
 800d2c4:	e7d8      	b.n	800d278 <_printf_common+0x9c>
	...

0800d2c8 <_printf_i>:
 800d2c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d2d0:	460c      	mov	r4, r1
 800d2d2:	7e09      	ldrb	r1, [r1, #24]
 800d2d4:	b085      	sub	sp, #20
 800d2d6:	296e      	cmp	r1, #110	; 0x6e
 800d2d8:	4617      	mov	r7, r2
 800d2da:	4606      	mov	r6, r0
 800d2dc:	4698      	mov	r8, r3
 800d2de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d2e0:	f000 80b3 	beq.w	800d44a <_printf_i+0x182>
 800d2e4:	d822      	bhi.n	800d32c <_printf_i+0x64>
 800d2e6:	2963      	cmp	r1, #99	; 0x63
 800d2e8:	d036      	beq.n	800d358 <_printf_i+0x90>
 800d2ea:	d80a      	bhi.n	800d302 <_printf_i+0x3a>
 800d2ec:	2900      	cmp	r1, #0
 800d2ee:	f000 80b9 	beq.w	800d464 <_printf_i+0x19c>
 800d2f2:	2958      	cmp	r1, #88	; 0x58
 800d2f4:	f000 8083 	beq.w	800d3fe <_printf_i+0x136>
 800d2f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d300:	e032      	b.n	800d368 <_printf_i+0xa0>
 800d302:	2964      	cmp	r1, #100	; 0x64
 800d304:	d001      	beq.n	800d30a <_printf_i+0x42>
 800d306:	2969      	cmp	r1, #105	; 0x69
 800d308:	d1f6      	bne.n	800d2f8 <_printf_i+0x30>
 800d30a:	6820      	ldr	r0, [r4, #0]
 800d30c:	6813      	ldr	r3, [r2, #0]
 800d30e:	0605      	lsls	r5, r0, #24
 800d310:	f103 0104 	add.w	r1, r3, #4
 800d314:	d52a      	bpl.n	800d36c <_printf_i+0xa4>
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	6011      	str	r1, [r2, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	da03      	bge.n	800d326 <_printf_i+0x5e>
 800d31e:	222d      	movs	r2, #45	; 0x2d
 800d320:	425b      	negs	r3, r3
 800d322:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d326:	486f      	ldr	r0, [pc, #444]	; (800d4e4 <_printf_i+0x21c>)
 800d328:	220a      	movs	r2, #10
 800d32a:	e039      	b.n	800d3a0 <_printf_i+0xd8>
 800d32c:	2973      	cmp	r1, #115	; 0x73
 800d32e:	f000 809d 	beq.w	800d46c <_printf_i+0x1a4>
 800d332:	d808      	bhi.n	800d346 <_printf_i+0x7e>
 800d334:	296f      	cmp	r1, #111	; 0x6f
 800d336:	d020      	beq.n	800d37a <_printf_i+0xb2>
 800d338:	2970      	cmp	r1, #112	; 0x70
 800d33a:	d1dd      	bne.n	800d2f8 <_printf_i+0x30>
 800d33c:	6823      	ldr	r3, [r4, #0]
 800d33e:	f043 0320 	orr.w	r3, r3, #32
 800d342:	6023      	str	r3, [r4, #0]
 800d344:	e003      	b.n	800d34e <_printf_i+0x86>
 800d346:	2975      	cmp	r1, #117	; 0x75
 800d348:	d017      	beq.n	800d37a <_printf_i+0xb2>
 800d34a:	2978      	cmp	r1, #120	; 0x78
 800d34c:	d1d4      	bne.n	800d2f8 <_printf_i+0x30>
 800d34e:	2378      	movs	r3, #120	; 0x78
 800d350:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d354:	4864      	ldr	r0, [pc, #400]	; (800d4e8 <_printf_i+0x220>)
 800d356:	e055      	b.n	800d404 <_printf_i+0x13c>
 800d358:	6813      	ldr	r3, [r2, #0]
 800d35a:	1d19      	adds	r1, r3, #4
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	6011      	str	r1, [r2, #0]
 800d360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d368:	2301      	movs	r3, #1
 800d36a:	e08c      	b.n	800d486 <_printf_i+0x1be>
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	6011      	str	r1, [r2, #0]
 800d370:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d374:	bf18      	it	ne
 800d376:	b21b      	sxthne	r3, r3
 800d378:	e7cf      	b.n	800d31a <_printf_i+0x52>
 800d37a:	6813      	ldr	r3, [r2, #0]
 800d37c:	6825      	ldr	r5, [r4, #0]
 800d37e:	1d18      	adds	r0, r3, #4
 800d380:	6010      	str	r0, [r2, #0]
 800d382:	0628      	lsls	r0, r5, #24
 800d384:	d501      	bpl.n	800d38a <_printf_i+0xc2>
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	e002      	b.n	800d390 <_printf_i+0xc8>
 800d38a:	0668      	lsls	r0, r5, #25
 800d38c:	d5fb      	bpl.n	800d386 <_printf_i+0xbe>
 800d38e:	881b      	ldrh	r3, [r3, #0]
 800d390:	4854      	ldr	r0, [pc, #336]	; (800d4e4 <_printf_i+0x21c>)
 800d392:	296f      	cmp	r1, #111	; 0x6f
 800d394:	bf14      	ite	ne
 800d396:	220a      	movne	r2, #10
 800d398:	2208      	moveq	r2, #8
 800d39a:	2100      	movs	r1, #0
 800d39c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3a0:	6865      	ldr	r5, [r4, #4]
 800d3a2:	60a5      	str	r5, [r4, #8]
 800d3a4:	2d00      	cmp	r5, #0
 800d3a6:	f2c0 8095 	blt.w	800d4d4 <_printf_i+0x20c>
 800d3aa:	6821      	ldr	r1, [r4, #0]
 800d3ac:	f021 0104 	bic.w	r1, r1, #4
 800d3b0:	6021      	str	r1, [r4, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d13d      	bne.n	800d432 <_printf_i+0x16a>
 800d3b6:	2d00      	cmp	r5, #0
 800d3b8:	f040 808e 	bne.w	800d4d8 <_printf_i+0x210>
 800d3bc:	4665      	mov	r5, ip
 800d3be:	2a08      	cmp	r2, #8
 800d3c0:	d10b      	bne.n	800d3da <_printf_i+0x112>
 800d3c2:	6823      	ldr	r3, [r4, #0]
 800d3c4:	07db      	lsls	r3, r3, #31
 800d3c6:	d508      	bpl.n	800d3da <_printf_i+0x112>
 800d3c8:	6923      	ldr	r3, [r4, #16]
 800d3ca:	6862      	ldr	r2, [r4, #4]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	bfde      	ittt	le
 800d3d0:	2330      	movle	r3, #48	; 0x30
 800d3d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d3da:	ebac 0305 	sub.w	r3, ip, r5
 800d3de:	6123      	str	r3, [r4, #16]
 800d3e0:	f8cd 8000 	str.w	r8, [sp]
 800d3e4:	463b      	mov	r3, r7
 800d3e6:	aa03      	add	r2, sp, #12
 800d3e8:	4621      	mov	r1, r4
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	f7ff fef6 	bl	800d1dc <_printf_common>
 800d3f0:	3001      	adds	r0, #1
 800d3f2:	d14d      	bne.n	800d490 <_printf_i+0x1c8>
 800d3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f8:	b005      	add	sp, #20
 800d3fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3fe:	4839      	ldr	r0, [pc, #228]	; (800d4e4 <_printf_i+0x21c>)
 800d400:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d404:	6813      	ldr	r3, [r2, #0]
 800d406:	6821      	ldr	r1, [r4, #0]
 800d408:	1d1d      	adds	r5, r3, #4
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6015      	str	r5, [r2, #0]
 800d40e:	060a      	lsls	r2, r1, #24
 800d410:	d50b      	bpl.n	800d42a <_printf_i+0x162>
 800d412:	07ca      	lsls	r2, r1, #31
 800d414:	bf44      	itt	mi
 800d416:	f041 0120 	orrmi.w	r1, r1, #32
 800d41a:	6021      	strmi	r1, [r4, #0]
 800d41c:	b91b      	cbnz	r3, 800d426 <_printf_i+0x15e>
 800d41e:	6822      	ldr	r2, [r4, #0]
 800d420:	f022 0220 	bic.w	r2, r2, #32
 800d424:	6022      	str	r2, [r4, #0]
 800d426:	2210      	movs	r2, #16
 800d428:	e7b7      	b.n	800d39a <_printf_i+0xd2>
 800d42a:	064d      	lsls	r5, r1, #25
 800d42c:	bf48      	it	mi
 800d42e:	b29b      	uxthmi	r3, r3
 800d430:	e7ef      	b.n	800d412 <_printf_i+0x14a>
 800d432:	4665      	mov	r5, ip
 800d434:	fbb3 f1f2 	udiv	r1, r3, r2
 800d438:	fb02 3311 	mls	r3, r2, r1, r3
 800d43c:	5cc3      	ldrb	r3, [r0, r3]
 800d43e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d442:	460b      	mov	r3, r1
 800d444:	2900      	cmp	r1, #0
 800d446:	d1f5      	bne.n	800d434 <_printf_i+0x16c>
 800d448:	e7b9      	b.n	800d3be <_printf_i+0xf6>
 800d44a:	6813      	ldr	r3, [r2, #0]
 800d44c:	6825      	ldr	r5, [r4, #0]
 800d44e:	6961      	ldr	r1, [r4, #20]
 800d450:	1d18      	adds	r0, r3, #4
 800d452:	6010      	str	r0, [r2, #0]
 800d454:	0628      	lsls	r0, r5, #24
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	d501      	bpl.n	800d45e <_printf_i+0x196>
 800d45a:	6019      	str	r1, [r3, #0]
 800d45c:	e002      	b.n	800d464 <_printf_i+0x19c>
 800d45e:	066a      	lsls	r2, r5, #25
 800d460:	d5fb      	bpl.n	800d45a <_printf_i+0x192>
 800d462:	8019      	strh	r1, [r3, #0]
 800d464:	2300      	movs	r3, #0
 800d466:	6123      	str	r3, [r4, #16]
 800d468:	4665      	mov	r5, ip
 800d46a:	e7b9      	b.n	800d3e0 <_printf_i+0x118>
 800d46c:	6813      	ldr	r3, [r2, #0]
 800d46e:	1d19      	adds	r1, r3, #4
 800d470:	6011      	str	r1, [r2, #0]
 800d472:	681d      	ldr	r5, [r3, #0]
 800d474:	6862      	ldr	r2, [r4, #4]
 800d476:	2100      	movs	r1, #0
 800d478:	4628      	mov	r0, r5
 800d47a:	f7f2 fea9 	bl	80001d0 <memchr>
 800d47e:	b108      	cbz	r0, 800d484 <_printf_i+0x1bc>
 800d480:	1b40      	subs	r0, r0, r5
 800d482:	6060      	str	r0, [r4, #4]
 800d484:	6863      	ldr	r3, [r4, #4]
 800d486:	6123      	str	r3, [r4, #16]
 800d488:	2300      	movs	r3, #0
 800d48a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d48e:	e7a7      	b.n	800d3e0 <_printf_i+0x118>
 800d490:	6923      	ldr	r3, [r4, #16]
 800d492:	462a      	mov	r2, r5
 800d494:	4639      	mov	r1, r7
 800d496:	4630      	mov	r0, r6
 800d498:	47c0      	blx	r8
 800d49a:	3001      	adds	r0, #1
 800d49c:	d0aa      	beq.n	800d3f4 <_printf_i+0x12c>
 800d49e:	6823      	ldr	r3, [r4, #0]
 800d4a0:	079b      	lsls	r3, r3, #30
 800d4a2:	d413      	bmi.n	800d4cc <_printf_i+0x204>
 800d4a4:	68e0      	ldr	r0, [r4, #12]
 800d4a6:	9b03      	ldr	r3, [sp, #12]
 800d4a8:	4298      	cmp	r0, r3
 800d4aa:	bfb8      	it	lt
 800d4ac:	4618      	movlt	r0, r3
 800d4ae:	e7a3      	b.n	800d3f8 <_printf_i+0x130>
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	464a      	mov	r2, r9
 800d4b4:	4639      	mov	r1, r7
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	47c0      	blx	r8
 800d4ba:	3001      	adds	r0, #1
 800d4bc:	d09a      	beq.n	800d3f4 <_printf_i+0x12c>
 800d4be:	3501      	adds	r5, #1
 800d4c0:	68e3      	ldr	r3, [r4, #12]
 800d4c2:	9a03      	ldr	r2, [sp, #12]
 800d4c4:	1a9b      	subs	r3, r3, r2
 800d4c6:	42ab      	cmp	r3, r5
 800d4c8:	dcf2      	bgt.n	800d4b0 <_printf_i+0x1e8>
 800d4ca:	e7eb      	b.n	800d4a4 <_printf_i+0x1dc>
 800d4cc:	2500      	movs	r5, #0
 800d4ce:	f104 0919 	add.w	r9, r4, #25
 800d4d2:	e7f5      	b.n	800d4c0 <_printf_i+0x1f8>
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d1ac      	bne.n	800d432 <_printf_i+0x16a>
 800d4d8:	7803      	ldrb	r3, [r0, #0]
 800d4da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4e2:	e76c      	b.n	800d3be <_printf_i+0xf6>
 800d4e4:	0800db85 	.word	0x0800db85
 800d4e8:	0800db96 	.word	0x0800db96

0800d4ec <_putc_r>:
 800d4ec:	b570      	push	{r4, r5, r6, lr}
 800d4ee:	460d      	mov	r5, r1
 800d4f0:	4614      	mov	r4, r2
 800d4f2:	4606      	mov	r6, r0
 800d4f4:	b118      	cbz	r0, 800d4fe <_putc_r+0x12>
 800d4f6:	6983      	ldr	r3, [r0, #24]
 800d4f8:	b90b      	cbnz	r3, 800d4fe <_putc_r+0x12>
 800d4fa:	f7ff fca3 	bl	800ce44 <__sinit>
 800d4fe:	4b13      	ldr	r3, [pc, #76]	; (800d54c <_putc_r+0x60>)
 800d500:	429c      	cmp	r4, r3
 800d502:	d112      	bne.n	800d52a <_putc_r+0x3e>
 800d504:	6874      	ldr	r4, [r6, #4]
 800d506:	68a3      	ldr	r3, [r4, #8]
 800d508:	3b01      	subs	r3, #1
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	60a3      	str	r3, [r4, #8]
 800d50e:	da16      	bge.n	800d53e <_putc_r+0x52>
 800d510:	69a2      	ldr	r2, [r4, #24]
 800d512:	4293      	cmp	r3, r2
 800d514:	db02      	blt.n	800d51c <_putc_r+0x30>
 800d516:	b2eb      	uxtb	r3, r5
 800d518:	2b0a      	cmp	r3, #10
 800d51a:	d110      	bne.n	800d53e <_putc_r+0x52>
 800d51c:	4622      	mov	r2, r4
 800d51e:	4629      	mov	r1, r5
 800d520:	4630      	mov	r0, r6
 800d522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d526:	f000 b85b 	b.w	800d5e0 <__swbuf_r>
 800d52a:	4b09      	ldr	r3, [pc, #36]	; (800d550 <_putc_r+0x64>)
 800d52c:	429c      	cmp	r4, r3
 800d52e:	d101      	bne.n	800d534 <_putc_r+0x48>
 800d530:	68b4      	ldr	r4, [r6, #8]
 800d532:	e7e8      	b.n	800d506 <_putc_r+0x1a>
 800d534:	4b07      	ldr	r3, [pc, #28]	; (800d554 <_putc_r+0x68>)
 800d536:	429c      	cmp	r4, r3
 800d538:	bf08      	it	eq
 800d53a:	68f4      	ldreq	r4, [r6, #12]
 800d53c:	e7e3      	b.n	800d506 <_putc_r+0x1a>
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	1c5a      	adds	r2, r3, #1
 800d542:	6022      	str	r2, [r4, #0]
 800d544:	701d      	strb	r5, [r3, #0]
 800d546:	b2e8      	uxtb	r0, r5
 800d548:	bd70      	pop	{r4, r5, r6, pc}
 800d54a:	bf00      	nop
 800d54c:	0800db34 	.word	0x0800db34
 800d550:	0800db54 	.word	0x0800db54
 800d554:	0800db14 	.word	0x0800db14

0800d558 <__sread>:
 800d558:	b510      	push	{r4, lr}
 800d55a:	460c      	mov	r4, r1
 800d55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d560:	f000 fa46 	bl	800d9f0 <_read_r>
 800d564:	2800      	cmp	r0, #0
 800d566:	bfab      	itete	ge
 800d568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d56a:	89a3      	ldrhlt	r3, [r4, #12]
 800d56c:	181b      	addge	r3, r3, r0
 800d56e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d572:	bfac      	ite	ge
 800d574:	6563      	strge	r3, [r4, #84]	; 0x54
 800d576:	81a3      	strhlt	r3, [r4, #12]
 800d578:	bd10      	pop	{r4, pc}

0800d57a <__swrite>:
 800d57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d57e:	461f      	mov	r7, r3
 800d580:	898b      	ldrh	r3, [r1, #12]
 800d582:	05db      	lsls	r3, r3, #23
 800d584:	4605      	mov	r5, r0
 800d586:	460c      	mov	r4, r1
 800d588:	4616      	mov	r6, r2
 800d58a:	d505      	bpl.n	800d598 <__swrite+0x1e>
 800d58c:	2302      	movs	r3, #2
 800d58e:	2200      	movs	r2, #0
 800d590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d594:	f000 f9b6 	bl	800d904 <_lseek_r>
 800d598:	89a3      	ldrh	r3, [r4, #12]
 800d59a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d59e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5a2:	81a3      	strh	r3, [r4, #12]
 800d5a4:	4632      	mov	r2, r6
 800d5a6:	463b      	mov	r3, r7
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ae:	f000 b869 	b.w	800d684 <_write_r>

0800d5b2 <__sseek>:
 800d5b2:	b510      	push	{r4, lr}
 800d5b4:	460c      	mov	r4, r1
 800d5b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ba:	f000 f9a3 	bl	800d904 <_lseek_r>
 800d5be:	1c43      	adds	r3, r0, #1
 800d5c0:	89a3      	ldrh	r3, [r4, #12]
 800d5c2:	bf15      	itete	ne
 800d5c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d5c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d5ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d5ce:	81a3      	strheq	r3, [r4, #12]
 800d5d0:	bf18      	it	ne
 800d5d2:	81a3      	strhne	r3, [r4, #12]
 800d5d4:	bd10      	pop	{r4, pc}

0800d5d6 <__sclose>:
 800d5d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5da:	f000 b8d3 	b.w	800d784 <_close_r>
	...

0800d5e0 <__swbuf_r>:
 800d5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e2:	460e      	mov	r6, r1
 800d5e4:	4614      	mov	r4, r2
 800d5e6:	4605      	mov	r5, r0
 800d5e8:	b118      	cbz	r0, 800d5f2 <__swbuf_r+0x12>
 800d5ea:	6983      	ldr	r3, [r0, #24]
 800d5ec:	b90b      	cbnz	r3, 800d5f2 <__swbuf_r+0x12>
 800d5ee:	f7ff fc29 	bl	800ce44 <__sinit>
 800d5f2:	4b21      	ldr	r3, [pc, #132]	; (800d678 <__swbuf_r+0x98>)
 800d5f4:	429c      	cmp	r4, r3
 800d5f6:	d12a      	bne.n	800d64e <__swbuf_r+0x6e>
 800d5f8:	686c      	ldr	r4, [r5, #4]
 800d5fa:	69a3      	ldr	r3, [r4, #24]
 800d5fc:	60a3      	str	r3, [r4, #8]
 800d5fe:	89a3      	ldrh	r3, [r4, #12]
 800d600:	071a      	lsls	r2, r3, #28
 800d602:	d52e      	bpl.n	800d662 <__swbuf_r+0x82>
 800d604:	6923      	ldr	r3, [r4, #16]
 800d606:	b363      	cbz	r3, 800d662 <__swbuf_r+0x82>
 800d608:	6923      	ldr	r3, [r4, #16]
 800d60a:	6820      	ldr	r0, [r4, #0]
 800d60c:	1ac0      	subs	r0, r0, r3
 800d60e:	6963      	ldr	r3, [r4, #20]
 800d610:	b2f6      	uxtb	r6, r6
 800d612:	4283      	cmp	r3, r0
 800d614:	4637      	mov	r7, r6
 800d616:	dc04      	bgt.n	800d622 <__swbuf_r+0x42>
 800d618:	4621      	mov	r1, r4
 800d61a:	4628      	mov	r0, r5
 800d61c:	f000 f948 	bl	800d8b0 <_fflush_r>
 800d620:	bb28      	cbnz	r0, 800d66e <__swbuf_r+0x8e>
 800d622:	68a3      	ldr	r3, [r4, #8]
 800d624:	3b01      	subs	r3, #1
 800d626:	60a3      	str	r3, [r4, #8]
 800d628:	6823      	ldr	r3, [r4, #0]
 800d62a:	1c5a      	adds	r2, r3, #1
 800d62c:	6022      	str	r2, [r4, #0]
 800d62e:	701e      	strb	r6, [r3, #0]
 800d630:	6963      	ldr	r3, [r4, #20]
 800d632:	3001      	adds	r0, #1
 800d634:	4283      	cmp	r3, r0
 800d636:	d004      	beq.n	800d642 <__swbuf_r+0x62>
 800d638:	89a3      	ldrh	r3, [r4, #12]
 800d63a:	07db      	lsls	r3, r3, #31
 800d63c:	d519      	bpl.n	800d672 <__swbuf_r+0x92>
 800d63e:	2e0a      	cmp	r6, #10
 800d640:	d117      	bne.n	800d672 <__swbuf_r+0x92>
 800d642:	4621      	mov	r1, r4
 800d644:	4628      	mov	r0, r5
 800d646:	f000 f933 	bl	800d8b0 <_fflush_r>
 800d64a:	b190      	cbz	r0, 800d672 <__swbuf_r+0x92>
 800d64c:	e00f      	b.n	800d66e <__swbuf_r+0x8e>
 800d64e:	4b0b      	ldr	r3, [pc, #44]	; (800d67c <__swbuf_r+0x9c>)
 800d650:	429c      	cmp	r4, r3
 800d652:	d101      	bne.n	800d658 <__swbuf_r+0x78>
 800d654:	68ac      	ldr	r4, [r5, #8]
 800d656:	e7d0      	b.n	800d5fa <__swbuf_r+0x1a>
 800d658:	4b09      	ldr	r3, [pc, #36]	; (800d680 <__swbuf_r+0xa0>)
 800d65a:	429c      	cmp	r4, r3
 800d65c:	bf08      	it	eq
 800d65e:	68ec      	ldreq	r4, [r5, #12]
 800d660:	e7cb      	b.n	800d5fa <__swbuf_r+0x1a>
 800d662:	4621      	mov	r1, r4
 800d664:	4628      	mov	r0, r5
 800d666:	f000 f81f 	bl	800d6a8 <__swsetup_r>
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d0cc      	beq.n	800d608 <__swbuf_r+0x28>
 800d66e:	f04f 37ff 	mov.w	r7, #4294967295
 800d672:	4638      	mov	r0, r7
 800d674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d676:	bf00      	nop
 800d678:	0800db34 	.word	0x0800db34
 800d67c:	0800db54 	.word	0x0800db54
 800d680:	0800db14 	.word	0x0800db14

0800d684 <_write_r>:
 800d684:	b538      	push	{r3, r4, r5, lr}
 800d686:	4c07      	ldr	r4, [pc, #28]	; (800d6a4 <_write_r+0x20>)
 800d688:	4605      	mov	r5, r0
 800d68a:	4608      	mov	r0, r1
 800d68c:	4611      	mov	r1, r2
 800d68e:	2200      	movs	r2, #0
 800d690:	6022      	str	r2, [r4, #0]
 800d692:	461a      	mov	r2, r3
 800d694:	f7f5 fb2b 	bl	8002cee <_write>
 800d698:	1c43      	adds	r3, r0, #1
 800d69a:	d102      	bne.n	800d6a2 <_write_r+0x1e>
 800d69c:	6823      	ldr	r3, [r4, #0]
 800d69e:	b103      	cbz	r3, 800d6a2 <_write_r+0x1e>
 800d6a0:	602b      	str	r3, [r5, #0]
 800d6a2:	bd38      	pop	{r3, r4, r5, pc}
 800d6a4:	2000142c 	.word	0x2000142c

0800d6a8 <__swsetup_r>:
 800d6a8:	4b32      	ldr	r3, [pc, #200]	; (800d774 <__swsetup_r+0xcc>)
 800d6aa:	b570      	push	{r4, r5, r6, lr}
 800d6ac:	681d      	ldr	r5, [r3, #0]
 800d6ae:	4606      	mov	r6, r0
 800d6b0:	460c      	mov	r4, r1
 800d6b2:	b125      	cbz	r5, 800d6be <__swsetup_r+0x16>
 800d6b4:	69ab      	ldr	r3, [r5, #24]
 800d6b6:	b913      	cbnz	r3, 800d6be <__swsetup_r+0x16>
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	f7ff fbc3 	bl	800ce44 <__sinit>
 800d6be:	4b2e      	ldr	r3, [pc, #184]	; (800d778 <__swsetup_r+0xd0>)
 800d6c0:	429c      	cmp	r4, r3
 800d6c2:	d10f      	bne.n	800d6e4 <__swsetup_r+0x3c>
 800d6c4:	686c      	ldr	r4, [r5, #4]
 800d6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	0715      	lsls	r5, r2, #28
 800d6ce:	d42c      	bmi.n	800d72a <__swsetup_r+0x82>
 800d6d0:	06d0      	lsls	r0, r2, #27
 800d6d2:	d411      	bmi.n	800d6f8 <__swsetup_r+0x50>
 800d6d4:	2209      	movs	r2, #9
 800d6d6:	6032      	str	r2, [r6, #0]
 800d6d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6dc:	81a3      	strh	r3, [r4, #12]
 800d6de:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e2:	e03e      	b.n	800d762 <__swsetup_r+0xba>
 800d6e4:	4b25      	ldr	r3, [pc, #148]	; (800d77c <__swsetup_r+0xd4>)
 800d6e6:	429c      	cmp	r4, r3
 800d6e8:	d101      	bne.n	800d6ee <__swsetup_r+0x46>
 800d6ea:	68ac      	ldr	r4, [r5, #8]
 800d6ec:	e7eb      	b.n	800d6c6 <__swsetup_r+0x1e>
 800d6ee:	4b24      	ldr	r3, [pc, #144]	; (800d780 <__swsetup_r+0xd8>)
 800d6f0:	429c      	cmp	r4, r3
 800d6f2:	bf08      	it	eq
 800d6f4:	68ec      	ldreq	r4, [r5, #12]
 800d6f6:	e7e6      	b.n	800d6c6 <__swsetup_r+0x1e>
 800d6f8:	0751      	lsls	r1, r2, #29
 800d6fa:	d512      	bpl.n	800d722 <__swsetup_r+0x7a>
 800d6fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6fe:	b141      	cbz	r1, 800d712 <__swsetup_r+0x6a>
 800d700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d704:	4299      	cmp	r1, r3
 800d706:	d002      	beq.n	800d70e <__swsetup_r+0x66>
 800d708:	4630      	mov	r0, r6
 800d70a:	f7ff fa77 	bl	800cbfc <_free_r>
 800d70e:	2300      	movs	r3, #0
 800d710:	6363      	str	r3, [r4, #52]	; 0x34
 800d712:	89a3      	ldrh	r3, [r4, #12]
 800d714:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d718:	81a3      	strh	r3, [r4, #12]
 800d71a:	2300      	movs	r3, #0
 800d71c:	6063      	str	r3, [r4, #4]
 800d71e:	6923      	ldr	r3, [r4, #16]
 800d720:	6023      	str	r3, [r4, #0]
 800d722:	89a3      	ldrh	r3, [r4, #12]
 800d724:	f043 0308 	orr.w	r3, r3, #8
 800d728:	81a3      	strh	r3, [r4, #12]
 800d72a:	6923      	ldr	r3, [r4, #16]
 800d72c:	b94b      	cbnz	r3, 800d742 <__swsetup_r+0x9a>
 800d72e:	89a3      	ldrh	r3, [r4, #12]
 800d730:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d738:	d003      	beq.n	800d742 <__swsetup_r+0x9a>
 800d73a:	4621      	mov	r1, r4
 800d73c:	4630      	mov	r0, r6
 800d73e:	f000 f917 	bl	800d970 <__smakebuf_r>
 800d742:	89a2      	ldrh	r2, [r4, #12]
 800d744:	f012 0301 	ands.w	r3, r2, #1
 800d748:	d00c      	beq.n	800d764 <__swsetup_r+0xbc>
 800d74a:	2300      	movs	r3, #0
 800d74c:	60a3      	str	r3, [r4, #8]
 800d74e:	6963      	ldr	r3, [r4, #20]
 800d750:	425b      	negs	r3, r3
 800d752:	61a3      	str	r3, [r4, #24]
 800d754:	6923      	ldr	r3, [r4, #16]
 800d756:	b953      	cbnz	r3, 800d76e <__swsetup_r+0xc6>
 800d758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d75c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d760:	d1ba      	bne.n	800d6d8 <__swsetup_r+0x30>
 800d762:	bd70      	pop	{r4, r5, r6, pc}
 800d764:	0792      	lsls	r2, r2, #30
 800d766:	bf58      	it	pl
 800d768:	6963      	ldrpl	r3, [r4, #20]
 800d76a:	60a3      	str	r3, [r4, #8]
 800d76c:	e7f2      	b.n	800d754 <__swsetup_r+0xac>
 800d76e:	2000      	movs	r0, #0
 800d770:	e7f7      	b.n	800d762 <__swsetup_r+0xba>
 800d772:	bf00      	nop
 800d774:	2000019c 	.word	0x2000019c
 800d778:	0800db34 	.word	0x0800db34
 800d77c:	0800db54 	.word	0x0800db54
 800d780:	0800db14 	.word	0x0800db14

0800d784 <_close_r>:
 800d784:	b538      	push	{r3, r4, r5, lr}
 800d786:	4c06      	ldr	r4, [pc, #24]	; (800d7a0 <_close_r+0x1c>)
 800d788:	2300      	movs	r3, #0
 800d78a:	4605      	mov	r5, r0
 800d78c:	4608      	mov	r0, r1
 800d78e:	6023      	str	r3, [r4, #0]
 800d790:	f7f5 fac9 	bl	8002d26 <_close>
 800d794:	1c43      	adds	r3, r0, #1
 800d796:	d102      	bne.n	800d79e <_close_r+0x1a>
 800d798:	6823      	ldr	r3, [r4, #0]
 800d79a:	b103      	cbz	r3, 800d79e <_close_r+0x1a>
 800d79c:	602b      	str	r3, [r5, #0]
 800d79e:	bd38      	pop	{r3, r4, r5, pc}
 800d7a0:	2000142c 	.word	0x2000142c

0800d7a4 <__sflush_r>:
 800d7a4:	898a      	ldrh	r2, [r1, #12]
 800d7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7aa:	4605      	mov	r5, r0
 800d7ac:	0710      	lsls	r0, r2, #28
 800d7ae:	460c      	mov	r4, r1
 800d7b0:	d458      	bmi.n	800d864 <__sflush_r+0xc0>
 800d7b2:	684b      	ldr	r3, [r1, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	dc05      	bgt.n	800d7c4 <__sflush_r+0x20>
 800d7b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	dc02      	bgt.n	800d7c4 <__sflush_r+0x20>
 800d7be:	2000      	movs	r0, #0
 800d7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7c6:	2e00      	cmp	r6, #0
 800d7c8:	d0f9      	beq.n	800d7be <__sflush_r+0x1a>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d7d0:	682f      	ldr	r7, [r5, #0]
 800d7d2:	6a21      	ldr	r1, [r4, #32]
 800d7d4:	602b      	str	r3, [r5, #0]
 800d7d6:	d032      	beq.n	800d83e <__sflush_r+0x9a>
 800d7d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d7da:	89a3      	ldrh	r3, [r4, #12]
 800d7dc:	075a      	lsls	r2, r3, #29
 800d7de:	d505      	bpl.n	800d7ec <__sflush_r+0x48>
 800d7e0:	6863      	ldr	r3, [r4, #4]
 800d7e2:	1ac0      	subs	r0, r0, r3
 800d7e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7e6:	b10b      	cbz	r3, 800d7ec <__sflush_r+0x48>
 800d7e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d7ea:	1ac0      	subs	r0, r0, r3
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7f2:	6a21      	ldr	r1, [r4, #32]
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	47b0      	blx	r6
 800d7f8:	1c43      	adds	r3, r0, #1
 800d7fa:	89a3      	ldrh	r3, [r4, #12]
 800d7fc:	d106      	bne.n	800d80c <__sflush_r+0x68>
 800d7fe:	6829      	ldr	r1, [r5, #0]
 800d800:	291d      	cmp	r1, #29
 800d802:	d848      	bhi.n	800d896 <__sflush_r+0xf2>
 800d804:	4a29      	ldr	r2, [pc, #164]	; (800d8ac <__sflush_r+0x108>)
 800d806:	40ca      	lsrs	r2, r1
 800d808:	07d6      	lsls	r6, r2, #31
 800d80a:	d544      	bpl.n	800d896 <__sflush_r+0xf2>
 800d80c:	2200      	movs	r2, #0
 800d80e:	6062      	str	r2, [r4, #4]
 800d810:	04d9      	lsls	r1, r3, #19
 800d812:	6922      	ldr	r2, [r4, #16]
 800d814:	6022      	str	r2, [r4, #0]
 800d816:	d504      	bpl.n	800d822 <__sflush_r+0x7e>
 800d818:	1c42      	adds	r2, r0, #1
 800d81a:	d101      	bne.n	800d820 <__sflush_r+0x7c>
 800d81c:	682b      	ldr	r3, [r5, #0]
 800d81e:	b903      	cbnz	r3, 800d822 <__sflush_r+0x7e>
 800d820:	6560      	str	r0, [r4, #84]	; 0x54
 800d822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d824:	602f      	str	r7, [r5, #0]
 800d826:	2900      	cmp	r1, #0
 800d828:	d0c9      	beq.n	800d7be <__sflush_r+0x1a>
 800d82a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d82e:	4299      	cmp	r1, r3
 800d830:	d002      	beq.n	800d838 <__sflush_r+0x94>
 800d832:	4628      	mov	r0, r5
 800d834:	f7ff f9e2 	bl	800cbfc <_free_r>
 800d838:	2000      	movs	r0, #0
 800d83a:	6360      	str	r0, [r4, #52]	; 0x34
 800d83c:	e7c0      	b.n	800d7c0 <__sflush_r+0x1c>
 800d83e:	2301      	movs	r3, #1
 800d840:	4628      	mov	r0, r5
 800d842:	47b0      	blx	r6
 800d844:	1c41      	adds	r1, r0, #1
 800d846:	d1c8      	bne.n	800d7da <__sflush_r+0x36>
 800d848:	682b      	ldr	r3, [r5, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d0c5      	beq.n	800d7da <__sflush_r+0x36>
 800d84e:	2b1d      	cmp	r3, #29
 800d850:	d001      	beq.n	800d856 <__sflush_r+0xb2>
 800d852:	2b16      	cmp	r3, #22
 800d854:	d101      	bne.n	800d85a <__sflush_r+0xb6>
 800d856:	602f      	str	r7, [r5, #0]
 800d858:	e7b1      	b.n	800d7be <__sflush_r+0x1a>
 800d85a:	89a3      	ldrh	r3, [r4, #12]
 800d85c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d860:	81a3      	strh	r3, [r4, #12]
 800d862:	e7ad      	b.n	800d7c0 <__sflush_r+0x1c>
 800d864:	690f      	ldr	r7, [r1, #16]
 800d866:	2f00      	cmp	r7, #0
 800d868:	d0a9      	beq.n	800d7be <__sflush_r+0x1a>
 800d86a:	0793      	lsls	r3, r2, #30
 800d86c:	680e      	ldr	r6, [r1, #0]
 800d86e:	bf08      	it	eq
 800d870:	694b      	ldreq	r3, [r1, #20]
 800d872:	600f      	str	r7, [r1, #0]
 800d874:	bf18      	it	ne
 800d876:	2300      	movne	r3, #0
 800d878:	eba6 0807 	sub.w	r8, r6, r7
 800d87c:	608b      	str	r3, [r1, #8]
 800d87e:	f1b8 0f00 	cmp.w	r8, #0
 800d882:	dd9c      	ble.n	800d7be <__sflush_r+0x1a>
 800d884:	4643      	mov	r3, r8
 800d886:	463a      	mov	r2, r7
 800d888:	6a21      	ldr	r1, [r4, #32]
 800d88a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d88c:	4628      	mov	r0, r5
 800d88e:	47b0      	blx	r6
 800d890:	2800      	cmp	r0, #0
 800d892:	dc06      	bgt.n	800d8a2 <__sflush_r+0xfe>
 800d894:	89a3      	ldrh	r3, [r4, #12]
 800d896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d89a:	81a3      	strh	r3, [r4, #12]
 800d89c:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a0:	e78e      	b.n	800d7c0 <__sflush_r+0x1c>
 800d8a2:	4407      	add	r7, r0
 800d8a4:	eba8 0800 	sub.w	r8, r8, r0
 800d8a8:	e7e9      	b.n	800d87e <__sflush_r+0xda>
 800d8aa:	bf00      	nop
 800d8ac:	20400001 	.word	0x20400001

0800d8b0 <_fflush_r>:
 800d8b0:	b538      	push	{r3, r4, r5, lr}
 800d8b2:	690b      	ldr	r3, [r1, #16]
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	460c      	mov	r4, r1
 800d8b8:	b1db      	cbz	r3, 800d8f2 <_fflush_r+0x42>
 800d8ba:	b118      	cbz	r0, 800d8c4 <_fflush_r+0x14>
 800d8bc:	6983      	ldr	r3, [r0, #24]
 800d8be:	b90b      	cbnz	r3, 800d8c4 <_fflush_r+0x14>
 800d8c0:	f7ff fac0 	bl	800ce44 <__sinit>
 800d8c4:	4b0c      	ldr	r3, [pc, #48]	; (800d8f8 <_fflush_r+0x48>)
 800d8c6:	429c      	cmp	r4, r3
 800d8c8:	d109      	bne.n	800d8de <_fflush_r+0x2e>
 800d8ca:	686c      	ldr	r4, [r5, #4]
 800d8cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8d0:	b17b      	cbz	r3, 800d8f2 <_fflush_r+0x42>
 800d8d2:	4621      	mov	r1, r4
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8da:	f7ff bf63 	b.w	800d7a4 <__sflush_r>
 800d8de:	4b07      	ldr	r3, [pc, #28]	; (800d8fc <_fflush_r+0x4c>)
 800d8e0:	429c      	cmp	r4, r3
 800d8e2:	d101      	bne.n	800d8e8 <_fflush_r+0x38>
 800d8e4:	68ac      	ldr	r4, [r5, #8]
 800d8e6:	e7f1      	b.n	800d8cc <_fflush_r+0x1c>
 800d8e8:	4b05      	ldr	r3, [pc, #20]	; (800d900 <_fflush_r+0x50>)
 800d8ea:	429c      	cmp	r4, r3
 800d8ec:	bf08      	it	eq
 800d8ee:	68ec      	ldreq	r4, [r5, #12]
 800d8f0:	e7ec      	b.n	800d8cc <_fflush_r+0x1c>
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	bd38      	pop	{r3, r4, r5, pc}
 800d8f6:	bf00      	nop
 800d8f8:	0800db34 	.word	0x0800db34
 800d8fc:	0800db54 	.word	0x0800db54
 800d900:	0800db14 	.word	0x0800db14

0800d904 <_lseek_r>:
 800d904:	b538      	push	{r3, r4, r5, lr}
 800d906:	4c07      	ldr	r4, [pc, #28]	; (800d924 <_lseek_r+0x20>)
 800d908:	4605      	mov	r5, r0
 800d90a:	4608      	mov	r0, r1
 800d90c:	4611      	mov	r1, r2
 800d90e:	2200      	movs	r2, #0
 800d910:	6022      	str	r2, [r4, #0]
 800d912:	461a      	mov	r2, r3
 800d914:	f7f5 fa2e 	bl	8002d74 <_lseek>
 800d918:	1c43      	adds	r3, r0, #1
 800d91a:	d102      	bne.n	800d922 <_lseek_r+0x1e>
 800d91c:	6823      	ldr	r3, [r4, #0]
 800d91e:	b103      	cbz	r3, 800d922 <_lseek_r+0x1e>
 800d920:	602b      	str	r3, [r5, #0]
 800d922:	bd38      	pop	{r3, r4, r5, pc}
 800d924:	2000142c 	.word	0x2000142c

0800d928 <__swhatbuf_r>:
 800d928:	b570      	push	{r4, r5, r6, lr}
 800d92a:	460e      	mov	r6, r1
 800d92c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d930:	2900      	cmp	r1, #0
 800d932:	b096      	sub	sp, #88	; 0x58
 800d934:	4614      	mov	r4, r2
 800d936:	461d      	mov	r5, r3
 800d938:	da07      	bge.n	800d94a <__swhatbuf_r+0x22>
 800d93a:	2300      	movs	r3, #0
 800d93c:	602b      	str	r3, [r5, #0]
 800d93e:	89b3      	ldrh	r3, [r6, #12]
 800d940:	061a      	lsls	r2, r3, #24
 800d942:	d410      	bmi.n	800d966 <__swhatbuf_r+0x3e>
 800d944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d948:	e00e      	b.n	800d968 <__swhatbuf_r+0x40>
 800d94a:	466a      	mov	r2, sp
 800d94c:	f000 f862 	bl	800da14 <_fstat_r>
 800d950:	2800      	cmp	r0, #0
 800d952:	dbf2      	blt.n	800d93a <__swhatbuf_r+0x12>
 800d954:	9a01      	ldr	r2, [sp, #4]
 800d956:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d95a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d95e:	425a      	negs	r2, r3
 800d960:	415a      	adcs	r2, r3
 800d962:	602a      	str	r2, [r5, #0]
 800d964:	e7ee      	b.n	800d944 <__swhatbuf_r+0x1c>
 800d966:	2340      	movs	r3, #64	; 0x40
 800d968:	2000      	movs	r0, #0
 800d96a:	6023      	str	r3, [r4, #0]
 800d96c:	b016      	add	sp, #88	; 0x58
 800d96e:	bd70      	pop	{r4, r5, r6, pc}

0800d970 <__smakebuf_r>:
 800d970:	898b      	ldrh	r3, [r1, #12]
 800d972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d974:	079d      	lsls	r5, r3, #30
 800d976:	4606      	mov	r6, r0
 800d978:	460c      	mov	r4, r1
 800d97a:	d507      	bpl.n	800d98c <__smakebuf_r+0x1c>
 800d97c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d980:	6023      	str	r3, [r4, #0]
 800d982:	6123      	str	r3, [r4, #16]
 800d984:	2301      	movs	r3, #1
 800d986:	6163      	str	r3, [r4, #20]
 800d988:	b002      	add	sp, #8
 800d98a:	bd70      	pop	{r4, r5, r6, pc}
 800d98c:	ab01      	add	r3, sp, #4
 800d98e:	466a      	mov	r2, sp
 800d990:	f7ff ffca 	bl	800d928 <__swhatbuf_r>
 800d994:	9900      	ldr	r1, [sp, #0]
 800d996:	4605      	mov	r5, r0
 800d998:	4630      	mov	r0, r6
 800d99a:	f7ff f97d 	bl	800cc98 <_malloc_r>
 800d99e:	b948      	cbnz	r0, 800d9b4 <__smakebuf_r+0x44>
 800d9a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9a4:	059a      	lsls	r2, r3, #22
 800d9a6:	d4ef      	bmi.n	800d988 <__smakebuf_r+0x18>
 800d9a8:	f023 0303 	bic.w	r3, r3, #3
 800d9ac:	f043 0302 	orr.w	r3, r3, #2
 800d9b0:	81a3      	strh	r3, [r4, #12]
 800d9b2:	e7e3      	b.n	800d97c <__smakebuf_r+0xc>
 800d9b4:	4b0d      	ldr	r3, [pc, #52]	; (800d9ec <__smakebuf_r+0x7c>)
 800d9b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9b8:	89a3      	ldrh	r3, [r4, #12]
 800d9ba:	6020      	str	r0, [r4, #0]
 800d9bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9c0:	81a3      	strh	r3, [r4, #12]
 800d9c2:	9b00      	ldr	r3, [sp, #0]
 800d9c4:	6163      	str	r3, [r4, #20]
 800d9c6:	9b01      	ldr	r3, [sp, #4]
 800d9c8:	6120      	str	r0, [r4, #16]
 800d9ca:	b15b      	cbz	r3, 800d9e4 <__smakebuf_r+0x74>
 800d9cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	f000 f831 	bl	800da38 <_isatty_r>
 800d9d6:	b128      	cbz	r0, 800d9e4 <__smakebuf_r+0x74>
 800d9d8:	89a3      	ldrh	r3, [r4, #12]
 800d9da:	f023 0303 	bic.w	r3, r3, #3
 800d9de:	f043 0301 	orr.w	r3, r3, #1
 800d9e2:	81a3      	strh	r3, [r4, #12]
 800d9e4:	89a3      	ldrh	r3, [r4, #12]
 800d9e6:	431d      	orrs	r5, r3
 800d9e8:	81a5      	strh	r5, [r4, #12]
 800d9ea:	e7cd      	b.n	800d988 <__smakebuf_r+0x18>
 800d9ec:	0800ce0d 	.word	0x0800ce0d

0800d9f0 <_read_r>:
 800d9f0:	b538      	push	{r3, r4, r5, lr}
 800d9f2:	4c07      	ldr	r4, [pc, #28]	; (800da10 <_read_r+0x20>)
 800d9f4:	4605      	mov	r5, r0
 800d9f6:	4608      	mov	r0, r1
 800d9f8:	4611      	mov	r1, r2
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	6022      	str	r2, [r4, #0]
 800d9fe:	461a      	mov	r2, r3
 800da00:	f7f5 f958 	bl	8002cb4 <_read>
 800da04:	1c43      	adds	r3, r0, #1
 800da06:	d102      	bne.n	800da0e <_read_r+0x1e>
 800da08:	6823      	ldr	r3, [r4, #0]
 800da0a:	b103      	cbz	r3, 800da0e <_read_r+0x1e>
 800da0c:	602b      	str	r3, [r5, #0]
 800da0e:	bd38      	pop	{r3, r4, r5, pc}
 800da10:	2000142c 	.word	0x2000142c

0800da14 <_fstat_r>:
 800da14:	b538      	push	{r3, r4, r5, lr}
 800da16:	4c07      	ldr	r4, [pc, #28]	; (800da34 <_fstat_r+0x20>)
 800da18:	2300      	movs	r3, #0
 800da1a:	4605      	mov	r5, r0
 800da1c:	4608      	mov	r0, r1
 800da1e:	4611      	mov	r1, r2
 800da20:	6023      	str	r3, [r4, #0]
 800da22:	f7f5 f98c 	bl	8002d3e <_fstat>
 800da26:	1c43      	adds	r3, r0, #1
 800da28:	d102      	bne.n	800da30 <_fstat_r+0x1c>
 800da2a:	6823      	ldr	r3, [r4, #0]
 800da2c:	b103      	cbz	r3, 800da30 <_fstat_r+0x1c>
 800da2e:	602b      	str	r3, [r5, #0]
 800da30:	bd38      	pop	{r3, r4, r5, pc}
 800da32:	bf00      	nop
 800da34:	2000142c 	.word	0x2000142c

0800da38 <_isatty_r>:
 800da38:	b538      	push	{r3, r4, r5, lr}
 800da3a:	4c06      	ldr	r4, [pc, #24]	; (800da54 <_isatty_r+0x1c>)
 800da3c:	2300      	movs	r3, #0
 800da3e:	4605      	mov	r5, r0
 800da40:	4608      	mov	r0, r1
 800da42:	6023      	str	r3, [r4, #0]
 800da44:	f7f5 f98b 	bl	8002d5e <_isatty>
 800da48:	1c43      	adds	r3, r0, #1
 800da4a:	d102      	bne.n	800da52 <_isatty_r+0x1a>
 800da4c:	6823      	ldr	r3, [r4, #0]
 800da4e:	b103      	cbz	r3, 800da52 <_isatty_r+0x1a>
 800da50:	602b      	str	r3, [r5, #0]
 800da52:	bd38      	pop	{r3, r4, r5, pc}
 800da54:	2000142c 	.word	0x2000142c

0800da58 <_init>:
 800da58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da5a:	bf00      	nop
 800da5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da5e:	bc08      	pop	{r3}
 800da60:	469e      	mov	lr, r3
 800da62:	4770      	bx	lr

0800da64 <_fini>:
 800da64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da66:	bf00      	nop
 800da68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da6a:	bc08      	pop	{r3}
 800da6c:	469e      	mov	lr, r3
 800da6e:	4770      	bx	lr
